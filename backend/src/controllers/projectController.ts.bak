import { Request, Response, NextFunction } from 'express';
import { ProjectService } from '../services/projectService';
import { CustomError } from '../middleware/errorHandler';
// Import auth middleware to ensure User interface extension is available
import '../middleware/auth';
// Import type definitions
import '../types/express';

export class ProjectController {
  static async createProject(req: Request, res: Response, next: NextFunction) {
    try {
      const { title, description, status } = req.body;
      const userId = req.user?.userId;

      if (!userId) {
        const error = new Error('Authentication required') as CustomError;
        error.statusCode = 401;
        return next(error);
      }

      const project = await ProjectService.createProject({
        userId,
        title,
        description,
        status,
      });

      res.status(201).json({
        success: true,
        data: project,
      });
    } catch (error) {
      next(error);
    }
  }

  static async getProjectById(req: Request, res: Response, next: NextFunction) {
    try {
      const { id } = req.params;
      const userId = req.user?.userId;

      const project = await ProjectService.getProjectById(id, userId);

      if (!project) {
        const error = new Error('Project not found') as CustomError;
        error.statusCode = 404;
        return next(error);
      }

      res.json({
        success: true,
        data: project,
      });
    } catch (error) {
      next(error);
    }
  }

  static async updateProject(req: Request, res: Response, next: NextFunction) {
    try {
      const { id } = req.params;
      const { title, description, status } = req.body;
      const userId = req.user?.userId;

      if (!userId) {
        const error = new Error('Authentication required') as CustomError;
        error.statusCode = 401;
        return next(error);
      }

      const project = await ProjectService.updateProject(id, {
        title,
        description,
        status,
      }, userId);

      if (!project) {
        const error = new Error('Project not found or access denied') as CustomError;
        error.statusCode = 404;
        return next(error);
      }

      res.json({
        success: true,
        data: project,
      });
    } catch (error) {
      next(error);
    }
  }

  static async deleteProject(req: Request, res: Response, next: NextFunction) {
    try {
      const { id } = req.params;
      const userId = req.user?.userId;

      if (!userId) {
        const error = new Error('Authentication required') as CustomError;
        error.statusCode = 401;
        return next(error);
      }

      const success = await ProjectService.deleteProject(id, userId);

      if (!success) {
        const error = new Error('Project not found or access denied') as CustomError;
        error.statusCode = 404;
        return next(error);
      }

      res.json({
        success: true,
        message: 'Project deleted successfully',
      });
    } catch (error) {
      next(error);
    }
  }

  static async getAllProjects(req: Request, res: Response, next: NextFunction) {
    try {
      const { status } = req.query;
      const userId = req.user?.userId;

      let projects;
      
      if (status) {
        projects = await ProjectService.getProjectsByStatus(
          status as any,
          userId
        );
      } else if (userId) {
        // If authenticated, only return user's projects by default
        projects = await ProjectService.getUserProjects(userId);
      } else {
        // If not authenticated, return all projects (for admin/public view)
        projects = await ProjectService.getAllProjects();
      }

      res.json({
        success: true,
        data: projects,
      });
    } catch (error) {
      next(error);
    }
  }

  static async getUserProjects(req: Request, res: Response, next: NextFunction) {
    try {
      const userId = req.user?.userId;

      if (!userId) {
        const error = new Error('Authentication required') as CustomError;
        error.statusCode = 401;
        return next(error);
      }

      const projects = await ProjectService.getUserProjects(userId);

      res.json({
        success: true,
        data: projects,
      });
    } catch (error) {
      next(error);
    }
  }
}
