# Docker Swarm Secrets Integration
version: '3.8'

secrets:
  # Database credentials
  postgres_password:
    external: true
    name: gameforge_postgres_password_v1

  postgres_user:
    external: true  
    name: gameforge_postgres_user_v1

  # API Keys
  openai_api_key:
    external: true
    name: gameforge_openai_api_key_v1

  jwt_secret:
    external: true
    name: gameforge_jwt_secret_v1

  encryption_key:
    external: true
    name: gameforge_encryption_key_v1

  # External service credentials
  aws_access_key:
    external: true
    name: gameforge_aws_access_key_v1

  aws_secret_key:
    external: true
    name: gameforge_aws_secret_key_v1

  # Monitoring credentials
  grafana_admin_password:
    external: true
    name: gameforge_grafana_admin_password_v1

services:
  # Secret management bridge service
  vault-docker-bridge:
    image: gameforge/vault-docker-bridge:latest
    build:
      context: .
      dockerfile: secrets/Dockerfile.vault-bridge
    environment:
      VAULT_ADDR: http://vault-primary:8200
      VAULT_TOKEN_FILE: /run/secrets/vault_token
      DOCKER_HOST: unix:///var/run/docker.sock
      SWARM_MODE: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./secrets/docker/configs:/configs
    secrets:
      - vault_token
    networks:
      - gameforge-network
      - vault-network
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    depends_on:
      - vault-primary

  # Enhanced GameForge API with secrets
  gameforge-api:
    image: gameforge/api:latest
    environment:
      # Use secrets instead of environment variables
      DATABASE_URL: postgresql://postgres:@postgres:5432/gameforge_production
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      ENCRYPTION_KEY_FILE: /run/secrets/encryption_key
      OPENAI_API_KEY_FILE: /run/secrets/openai_api_key
      AWS_ACCESS_KEY_ID_FILE: /run/secrets/aws_access_key
      AWS_SECRET_ACCESS_KEY_FILE: /run/secrets/aws_secret_key
    secrets:
      - postgres_user
      - postgres_password
      - jwt_secret
      - encryption_key
      - openai_api_key
      - aws_access_key
      - aws_secret_key
    networks:
      - gameforge-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure

  # Enhanced PostgreSQL with secrets
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: gameforge_production
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_user
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gameforge-network
    deploy:
      placement:
        constraints: [node.role == manager]

  # Enhanced Grafana with secrets
  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_admin_password
      GF_DATABASE_PASSWORD__FILE: /run/secrets/postgres_password
    secrets:
      - grafana_admin_password
      - postgres_password
    networks:
      - gameforge-network

volumes:
  postgres_data:
    driver: local

networks:
  gameforge-network:
    external: true
  vault-network:
    external: true
