import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { ArtAsset, AudioAsset, ModelAsset } from '@/lib/types'
import { Card } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { 
  Image, 
  Play, 
  Pause, 
  Eye, 
  Download, 
  Heart,
  Palette,
  MusicNote,
  Cube,
  CheckCircle,
  Clock,
  XCircle
} from '@phosphor-icons/react'
import { cn } from '@/lib/utils'

interface AssetGalleryProps {
  artAssets?: ArtAsset[]
  audioAssets?: AudioAsset[]
  modelAssets?: ModelAsset[]
  className?: string
}

export function AssetGallery({ 
  artAssets = [], 
  audioAssets = [], 
  modelAssets = [], 
  className 
}: AssetGalleryProps) {
  const [selectedAsset, setSelectedAsset] = useState<any>(null)
  const [isPreviewOpen, setIsPreviewOpen] = useState(false)
  const [favorites, setFavorites] = useState<Set<string>>(new Set())
  const [playingAudio, setPlayingAudio] = useState<string | null>(null)

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'approved': return <CheckCircle size={16} className="text-emerald-400" />
      case 'in-progress': return <Clock size={16} className="text-amber-400" />
      case 'review': return <Eye size={16} className="text-blue-400" />
      default: return <XCircle size={16} className="text-gray-400" />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'approved': return 'border-emerald-500/30 bg-emerald-500/10'
      case 'in-progress': return 'border-amber-500/30 bg-amber-500/10'
      case 'review': return 'border-blue-500/30 bg-blue-500/10'
      default: return 'border-gray-500/30 bg-gray-500/10'
    }
  }

  const toggleFavorite = (id: string) => {
    setFavorites(prev => {
      const newFavorites = new Set(prev)
      if (newFavorites.has(id)) {
        newFavorites.delete(id)
      } else {
        newFavorites.add(id)
      }
      return newFavorites
    })
  }

  const handlePreview = (asset: any) => {
    setSelectedAsset(asset)
    setIsPreviewOpen(true)
  }

  const toggleAudio = (audioId: string) => {
    setPlayingAudio(playingAudio === audioId ? null : audioId)
  }

  return (
    <div className={cn("space-y-6", className)}>
      <Tabs defaultValue="art" className="w-full">
        <TabsList className="grid w-full grid-cols-3 glass">
          <TabsTrigger value="art" className="gap-2">
            <Palette size={16} />
            Art ({artAssets.length})
          </TabsTrigger>
          <TabsTrigger value="audio" className="gap-2">
            <MusicNote size={16} />
            Audio ({audioAssets.length})
          </TabsTrigger>
          <TabsTrigger value="models" className="gap-2">
            <Cube size={16} />
            Models ({modelAssets.length})
          </TabsTrigger>
        </TabsList>

        <TabsContent value="art" className="space-y-4">
          {artAssets.length === 0 ? (
            <Card className="p-8 text-center space-y-4 glass-card">
              <Image size={48} className="text-muted-foreground mx-auto" />
              <div>
                <h3 className="font-semibold text-foreground mb-2">No Art Assets Yet</h3>
                <p className="text-muted-foreground text-sm">
                  Art assets will appear here as they're generated by AI
                </p>
              </div>
            </Card>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {artAssets.map((asset, index) => (
                <motion.div
                  key={asset.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1, duration: 0.3 }}
                >
                  <Card className={cn(
                    "overflow-hidden glass-card hover:glow-gold transition-all duration-300 cursor-pointer group",
                    getStatusColor(asset.status)
                  )}>
                    <div className="aspect-video relative overflow-hidden">
                      {asset.thumbnail ? (
                        <img 
                          src={asset.thumbnail} 
                          alt={asset.name}
                          className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                        />
                      ) : (
                        <div className="w-full h-full bg-gradient-to-br from-purple-500/20 to-blue-500/20 flex items-center justify-center">
                          <Image size={32} className="text-muted-foreground" />
                        </div>
                      )}
                      
                      {/* Overlay actions */}
                      <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center gap-2">
                        <Button
                          size="sm"
                          variant="secondary"
                          onClick={() => handlePreview(asset)}
                          className="gap-2"
                        >
                          <Eye size={14} />
                          Preview
                        </Button>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => toggleFavorite(asset.id)}
                          className={cn(
                            "gap-2",
                            favorites.has(asset.id) ? "text-red-400" : "text-white"
                          )}
                        >
                          <Heart size={14} weight={favorites.has(asset.id) ? "fill" : "regular"} />
                        </Button>
                      </div>
                      
                      {/* Status indicator */}
                      <div className="absolute top-2 right-2">
                        {getStatusIcon(asset.status)}
                      </div>
                    </div>
                    
                    <div className="p-4 space-y-3">
                      <div>
                        <h4 className="font-semibold text-foreground mb-1">{asset.name}</h4>
                        <Badge variant="outline" className="text-xs">
                          {asset.type}
                        </Badge>
                      </div>
                      
                      <div className="flex flex-wrap gap-1">
                        {asset.tags.slice(0, 3).map(tag => (
                          <Badge key={tag} variant="secondary" className="text-xs">
                            {tag}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </Card>
                </motion.div>
              ))}
            </div>
          )}
        </TabsContent>

        <TabsContent value="audio" className="space-y-4">
          {audioAssets.length === 0 ? (
            <Card className="p-8 text-center space-y-4 glass-card">
              <MusicNote size={48} className="text-muted-foreground mx-auto" />
              <div>
                <h3 className="font-semibold text-foreground mb-2">No Audio Assets Yet</h3>
                <p className="text-muted-foreground text-sm">
                  Audio assets will appear here as they're generated by AI
                </p>
              </div>
            </Card>
          ) : (
            <div className="space-y-3">
              {audioAssets.map((asset, index) => (
                <motion.div
                  key={asset.id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1, duration: 0.3 }}
                >
                  <Card className={cn(
                    "p-4 glass-card hover:glow-purple transition-all duration-300",
                    getStatusColor(asset.status)
                  )}>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => toggleAudio(asset.id)}
                          className="w-10 h-10 rounded-full bg-accent/20 hover:bg-accent/30"
                        >
                          {playingAudio === asset.id ? (
                            <Pause size={16} />
                          ) : (
                            <Play size={16} />
                          )}
                        </Button>
                        
                        <div className="space-y-1">
                          <h4 className="font-semibold text-foreground">{asset.name}</h4>
                          <div className="flex items-center gap-2 text-sm text-muted-foreground">
                            <Badge variant="outline" className="text-xs">
                              {asset.type}
                            </Badge>
                            {asset.duration && (
                              <span>{Math.floor(asset.duration / 60)}:{(asset.duration % 60).toString().padStart(2, '0')}</span>
                            )}
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        {getStatusIcon(asset.status)}
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => toggleFavorite(asset.id)}
                          className={cn(
                            favorites.has(asset.id) ? "text-red-400" : "text-muted-foreground"
                          )}
                        >
                          <Heart size={16} weight={favorites.has(asset.id) ? "fill" : "regular"} />
                        </Button>
                      </div>
                    </div>
                    
                    {/* Audio waveform placeholder */}
                    {playingAudio === asset.id && (
                      <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        exit={{ opacity: 0, height: 0 }}
                        className="mt-4 pt-4 border-t border-border/50"
                      >
                        <div className="flex items-center gap-1 h-8">
                          {[...Array(20)].map((_, i) => (
                            <motion.div
                              key={i}
                              className="bg-accent rounded-full flex-1"
                              animate={{
                                height: [8, 16 + Math.random() * 16, 8],
                              }}
                              transition={{
                                duration: 0.5,
                                repeat: Infinity,
                                delay: i * 0.05
                              }}
                            />
                          ))}
                        </div>
                      </motion.div>
                    )}
                    
                    <div className="flex flex-wrap gap-1 mt-3">
                      {asset.tags.map(tag => (
                        <Badge key={tag} variant="secondary" className="text-xs">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  </Card>
                </motion.div>
              ))}
            </div>
          )}
        </TabsContent>

        <TabsContent value="models" className="space-y-4">
          {modelAssets.length === 0 ? (
            <Card className="p-8 text-center space-y-4 glass-card">
              <Cube size={48} className="text-muted-foreground mx-auto" />
              <div>
                <h3 className="font-semibold text-foreground mb-2">No 3D Models Yet</h3>
                <p className="text-muted-foreground text-sm">
                  3D models and animations will appear here as they're generated
                </p>
              </div>
            </Card>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {modelAssets.map((asset, index) => (
                <motion.div
                  key={asset.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1, duration: 0.3 }}
                >
                  <Card className={cn(
                    "p-4 glass-card hover:glow-blue transition-all duration-300",
                    getStatusColor(asset.status)
                  )}>
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-3">
                        <div className="w-12 h-12 rounded-lg bg-gradient-to-br from-blue-500/20 to-purple-500/20 flex items-center justify-center">
                          <Cube size={24} className="text-blue-400" />
                        </div>
                        <div>
                          <h4 className="font-semibold text-foreground">{asset.name}</h4>
                          <Badge variant="outline" className="text-xs">
                            {asset.type}
                          </Badge>
                        </div>
                      </div>
                      {getStatusIcon(asset.status)}
                    </div>
                    
                    {asset.polyCount && (
                      <div className="text-sm text-muted-foreground mb-3">
                        Poly Count: {asset.polyCount.toLocaleString()}
                      </div>
                    )}
                    
                    <div className="flex flex-wrap gap-1">
                      {asset.tags.map(tag => (
                        <Badge key={tag} variant="secondary" className="text-xs">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  </Card>
                </motion.div>
              ))}
            </div>
          )}
        </TabsContent>
      </Tabs>

      {/* Preview Dialog */}
      <Dialog open={isPreviewOpen} onOpenChange={setIsPreviewOpen}>
        <DialogContent className="glass-card max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Image size={20} />
              {selectedAsset?.name}
            </DialogTitle>
          </DialogHeader>
          {selectedAsset?.thumbnail && (
            <div className="aspect-video rounded-lg overflow-hidden">
              <img 
                src={selectedAsset.thumbnail} 
                alt={selectedAsset.name}
                className="w-full h-full object-cover"
              />
            </div>
          )}
          <div className="flex items-center justify-between pt-4">
            <div className="flex flex-wrap gap-1">
              {selectedAsset?.tags?.map((tag: string) => (
                <Badge key={tag} variant="secondary" className="text-xs">
                  {tag}
                </Badge>
              ))}
            </div>
            <Button variant="outline" className="gap-2">
              <Download size={16} />
              Download
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}