version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gameforge-postgres
    environment:
      POSTGRES_DB: gameforge_production
      POSTGRES_USER: gameforge_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - gameforge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gameforge_user -d gameforge_production"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for job queuing
  redis:
    image: redis:7-alpine
    container_name: gameforge-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gameforge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GameForge Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gameforge-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://gameforge_user:${POSTGRES_PASSWORD}@postgres:5432/gameforge_production
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
      VAST_GPU_ENDPOINT: ${VAST_GPU_ENDPOINT}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gameforge-network
    restart: unless-stopped
    volumes:
      - upload_data:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GameForge Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: gameforge-frontend
    environment:
      VITE_API_BASE_URL: ${FRONTEND_API_URL}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - gameforge-network
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: gameforge-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
      - upload_data:/var/www/uploads:ro
    depends_on:
      - backend
      - frontend
    networks:
      - gameforge-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: gameforge-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - gameforge-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: gameforge-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    networks:
      - gameforge-network
    restart: unless-stopped

networks:
  gameforge-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  upload_data:
  prometheus_data:
  grafana_data:
