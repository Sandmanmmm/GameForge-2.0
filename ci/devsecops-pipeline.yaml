# GameForge DevSecOps Pipeline Configuration
# Implements comprehensive security-first CI/CD with automated promotion workflow

name: DevSecOps Pipeline
description: |
  Complete CI/CD pipeline with security-first approach:
  - Multi-stage security scanning (SAST, DAST, dependency, container)
  - Automated testing (unit, integration, e2e, performance)
  - Environment promotion workflow (dev → staging → production)
  - Blue/green deployments with automated rollback
  - Compliance validation and audit logging

# ============================================================================
# PIPELINE STAGES CONFIGURATION
# ============================================================================

stages:
  # Stage 1: Security & Quality Gates
  security_gates:
    description: "Comprehensive security scanning and validation"
    parallel: true
    jobs:
      - secret_detection
      - dependency_scanning  
      - static_analysis
      - container_security
      - compliance_check
    failure_action: "stop_pipeline"
    
  # Stage 2: Testing & Validation
  testing:
    description: "Multi-tier testing strategy"
    depends_on: [security_gates]
    parallel: true
    jobs:
      - unit_tests
      - integration_tests
      - api_tests
      - ml_platform_tests
      - performance_tests
    coverage_threshold: 80
    
  # Stage 3: Build & Package
  build:
    description: "Multi-arch container builds with signing"
    depends_on: [testing]
    jobs:
      - container_build
      - sbom_generation
      - image_signing
      - artifact_publishing
    
  # Stage 4: Deployment Pipeline
  deploy:
    description: "Progressive deployment with validation"
    depends_on: [build]
    environments:
      - name: development
        auto_deploy: true
        approval_required: false
      - name: staging  
        auto_deploy: true
        approval_required: false
        deployment_strategy: rolling
      - name: production
        auto_deploy: false
        approval_required: true
        deployment_strategy: blue_green

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================

security:
  # Secret Detection
  secret_detection:
    tools:
      - trufflehog
      - gitleaks
      - detect-secrets
    scan_scope:
      - repository_history
      - current_changes
      - environment_variables
    failure_threshold: 0  # Zero tolerance for secrets
    
  # Dependency Scanning
  dependency_scanning:
    tools:
      python:
        - safety
        - pip-audit
        - bandit
      javascript:
        - npm-audit
        - retire-js
      containers:
        - trivy
        - grype
        - snyk
    vulnerability_threshold:
      critical: 0
      high: 2
      medium: 10
    
  # Static Application Security Testing (SAST)
  static_analysis:
    tools:
      - semgrep
      - sonarqube
      - codeql
    rules:
      - owasp-top-10
      - cwe-top-25
      - custom-security-rules
    
  # Container Security
  container_security:
    base_image_scanning: true
    runtime_security: true
    image_signing: true
    policy_enforcement: true
    
  # Compliance Validation
  compliance:
    frameworks:
      - SOC2
      - ISO27001
      - GDPR
    validation:
      - data_encryption
      - access_controls
      - audit_logging
      - backup_procedures

# ============================================================================
# TESTING CONFIGURATION
# ============================================================================

testing:
  # Unit Tests
  unit_tests:
    frameworks:
      python: pytest
      javascript: jest
    coverage:
      minimum: 80
      format: ["xml", "html", "lcov"]
    parallel_execution: true
    
  # Integration Tests
  integration_tests:
    test_environments:
      - api_integration
      - ml_platform_integration
      - monitoring_integration
    database_setup: true
    external_services: mock
    
  # API Tests
  api_tests:
    tools:
      - postman_newman
      - rest_assured
    test_suites:
      - authentication
      - ai_generation
      - model_registry
      - monitoring_dashboard
    
  # Performance Tests
  performance_tests:
    tools:
      - k6
      - artillery
      - locust
    scenarios:
      - load_testing
      - stress_testing
      - spike_testing
    thresholds:
      response_time_p95: 500ms
      error_rate: 1%
      throughput: 100rps

# ============================================================================
# BUILD CONFIGURATION
# ============================================================================

build:
  # Container Build
  container_build:
    platforms:
      - linux/amd64
      - linux/arm64
    optimization:
      multi_stage: true
      layer_caching: true
      size_optimization: true
    
  # Software Bill of Materials
  sbom:
    format: spdx-json
    include:
      - dependencies
      - base_images
      - build_tools
    
  # Image Signing
  signing:
    tool: cosign
    keyless: true
    transparency_log: true
    
  # Artifact Management
  artifacts:
    registry: ghcr.io
    retention:
      development: 30d
      staging: 90d
      production: 1y
    cleanup_policy: automated

# ============================================================================
# DEPLOYMENT CONFIGURATION
# ============================================================================

deployment:
  # Environment Configuration
  environments:
    development:
      cluster: dev-cluster
      namespace: gameforge-dev
      resources:
        cpu: "500m"
        memory: "1Gi"
      replicas: 1
      
    staging:
      cluster: staging-cluster
      namespace: gameforge-staging
      resources:
        cpu: "1000m"
        memory: "2Gi"
      replicas: 2
      
    production:
      cluster: prod-cluster
      namespace: gameforge-prod
      resources:
        cpu: "2000m"
        memory: "4Gi"
      replicas: 3
      
  # Deployment Strategies
  strategies:
    rolling:
      max_unavailable: 25%
      max_surge: 25%
      
    blue_green:
      health_check_grace_period: 300s
      cutover_verification: true
      automatic_rollback: true
      
  # Health Checks
  health_checks:
    liveness_probe:
      path: /health
      initial_delay: 30s
      timeout: 10s
      
    readiness_probe:
      path: /ready
      initial_delay: 10s
      timeout: 5s
      
  # Post-Deployment Verification
  verification:
    smoke_tests:
      timeout: 300s
      retry_attempts: 3
      
    performance_validation:
      response_time_threshold: 200ms
      error_rate_threshold: 1%
      
    security_validation:
      runtime_security_scan: true
      network_policy_validation: true

# ============================================================================
# MONITORING & OBSERVABILITY
# ============================================================================

monitoring:
  # Metrics Collection
  metrics:
    prometheus:
      scrape_interval: 15s
      retention: 15d
      
    custom_metrics:
      - deployment_duration
      - test_execution_time
      - security_scan_results
      - artifact_size
      
  # Logging
  logging:
    centralized: true
    structured: true
    retention: 30d
    
  # Alerting
  alerting:
    deployment_failures: slack
    security_violations: pagerduty
    performance_degradation: email
    
  # Dashboards
  dashboards:
    - pipeline_overview
    - security_metrics
    - deployment_status
    - performance_metrics

# ============================================================================
# WORKFLOW TRIGGERS
# ============================================================================

triggers:
  # Git Events
  git:
    push:
      branches: [main, develop, 'release/**']
    pull_request:
      branches: [main, develop]
    tags:
      pattern: 'v*'
      
  # Scheduled Events
  schedule:
    security_scan: "0 2 * * *"  # Daily at 2 AM
    dependency_update: "0 6 * * 1"  # Monday at 6 AM
    
  # Manual Triggers
  manual:
    parameters:
      - name: environment
        type: choice
        options: [dev, staging, production]
      - name: force_deploy
        type: boolean
        default: false

# ============================================================================
# SECURITY POLICIES
# ============================================================================

policies:
  # Branch Protection
  branch_protection:
    main:
      required_reviews: 2
      dismiss_stale_reviews: true
      require_code_owner_reviews: true
      
  # Deployment Gates
  deployment_gates:
    production:
      - security_scan_passed
      - all_tests_passed
      - manual_approval
      - staging_health_verified
      
  # Access Control
  access_control:
    pipeline_execution:
      - developers: [dev, staging]
      - leads: [dev, staging, production]
      - admins: [all]
      
  # Audit Requirements
  audit:
    log_all_deployments: true
    track_approval_chains: true
    retain_artifacts: true

# ============================================================================
# INTEGRATION CONFIGURATION
# ============================================================================

integrations:
  # External Tools
  tools:
    github_actions: true
    gitlab_ci: true
    jenkins: false
    
  # Notification Channels
  notifications:
    slack:
      webhook_url: "${SLACK_WEBHOOK_URL}"
      channels:
        - "#gameforge-deployments"
        - "#security-alerts"
        
    email:
      recipients:
        - "devops@gameforge.com"
        - "security@gameforge.com"
        
  # Third-party Services
  services:
    sonarqube:
      url: "${SONARQUBE_URL}"
      project_key: "gameforge"
      
    artifactory:
      url: "${ARTIFACTORY_URL}"
      repository: "gameforge-docker"

# ============================================================================
# PIPELINE OPTIMIZATION
# ============================================================================

optimization:
  # Caching Strategy
  caching:
    dependency_cache: true
    build_cache: true
    test_cache: true
    cache_ttl: 7d
    
  # Parallel Execution
  parallelization:
    max_concurrent_jobs: 10
    test_parallelization: true
    security_scan_parallelization: true
    
  # Resource Management
  resources:
    pipeline_timeout: 60m
    job_timeout: 30m
    artifact_retention: 90d