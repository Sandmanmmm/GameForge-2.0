{
  "family": "gameforge-sdxl-task",
  "networkMode": "awsvpc",
  "requiresCompatibilities": ["FARGATE"],
  "cpu": "2048",
  "memory": "4096",
  "executionRoleArn": "arn:aws:iam::927588814706:role/ecsTaskExecutionRole",
  "taskRoleArn": "arn:aws:iam::927588814706:role/ecsTaskRole",
  "containerDefinitions": [
    {
      "name": "sdxl-service",
      "image": "public.ecr.aws/docker/library/python:3.11-slim",
      "essential": true,
      "portMappings": [
        {
          "containerPort": 8080,
          "protocol": "tcp",
          "name": "sdxl-port"
        }
      ],
      "logConfiguration": {
        "logDriver": "awslogs",
        "options": {
          "awslogs-group": "/ecs/gameforge-sdxl",
          "awslogs-region": "us-east-1",
          "awslogs-stream-prefix": "ecs"
        }
      },
      "environment": [
        {
          "name": "PORT",
          "value": "8080"
        },
        {
          "name": "PYTHON_ENV",
          "value": "production"
        }
      ],
      "command": [
        "bash",
        "-c",
        "apt-get update && apt-get install -y curl && pip install --no-cache-dir fastapi uvicorn pillow pydantic && cat > /tmp/sdxl_service.py << 'PYTHON_SERVICE_EOF'\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom PIL import Image, ImageDraw, ImageFont\nimport io\nimport base64\nfrom typing import Optional\nimport os\nimport uvicorn\n\napp = FastAPI(title='GameForge SDXL Service - Minimal', version='1.0.0')\n\nclass ImageRequest(BaseModel):\n    prompt: str\n    width: Optional[int] = 512\n    height: Optional[int] = 512\n    steps: Optional[int] = 20\n    guidance_scale: Optional[float] = 7.5\n\nclass ImageResponse(BaseModel):\n    image: str\n    metadata: dict\n\n@app.get('/health')\nasync def health():\n    return {'status': 'healthy', 'version': '1.0.0', 'service': 'sdxl-minimal'}\n\n@app.post('/generate', response_model=ImageResponse)\nasync def generate_image(request: ImageRequest):\n    try:\n        img = Image.new('RGB', (request.width, request.height), color='lightblue')\n        draw = ImageDraw.Draw(img)\n        \n        try:\n            font = ImageFont.load_default()\n        except:\n            font = None\n            \n        text = f'Generated: {request.prompt[:50]}'\n        if font:\n            bbox = draw.textbbox((0, 0), text, font=font)\n            text_width = bbox[2] - bbox[0]\n            text_height = bbox[3] - bbox[1]\n        else:\n            text_width = len(text) * 6\n            text_height = 12\n            \n        x = (request.width - text_width) // 2\n        y = (request.height - text_height) // 2\n        \n        draw.text((x, y), text, fill='darkblue', font=font)\n        \n        buffer = io.BytesIO()\n        img.save(buffer, format='PNG')\n        img_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')\n        \n        return ImageResponse(\n            image=img_base64,\n            metadata={\n                'prompt': request.prompt,\n                'width': request.width,\n                'height': request.height,\n                'format': 'PNG',\n                'service': 'minimal-placeholder'\n            }\n        )\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\nif __name__ == '__main__':\n    port = int(os.getenv('PORT', 8080))\n    uvicorn.run(app, host='0.0.0.0', port=port)\nPYTHON_SERVICE_EOF\npython /tmp/sdxl_service.py"
      ],
      "healthCheck": {
        "command": ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"],
        "interval": 30,
        "timeout": 5,
        "retries": 3,
        "startPeriod": 60
      },
      "stopTimeout": 30
    }
  ]
}
