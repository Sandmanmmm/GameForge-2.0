# GameForge Secret Rotation Monitoring Dashboard
# Prometheus + Grafana configuration for enterprise secret rotation monitoring

# Prometheus Configuration
prometheus_config:
  global:
    scrape_interval: 30s
    evaluation_interval: 30s
    
  rule_files:
    - "vault_rotation_rules.yml"
    
  scrape_configs:
    - job_name: 'vault-rotation-metrics'
      static_configs:
        - targets: ['localhost:9090']
      metrics_path: '/metrics'
      scrape_interval: 30s
      
    - job_name: 'vault-server'
      static_configs:
        - targets: ['vault:8200']
      metrics_path: '/v1/sys/metrics'
      params:
        format: ['prometheus']
      bearer_token_file: '/etc/prometheus/vault_token'

# Grafana Dashboard JSON
grafana_dashboard:
  dashboard:
    id: null
    title: "GameForge Secret Rotation Dashboard"
    description: "Enterprise secret rotation monitoring and alerting"
    tags: ["vault", "security", "rotation", "gameforge"]
    timezone: "browser"
    refresh: "30s"
    time:
      from: "now-24h"
      to: "now"
    
    templating:
      list:
        - name: "environment"
          type: "query"
          query: "label_values(vault_secret_rotation_total, environment)"
          refresh: "on_dashboard_load"
          
        - name: "secret_type"
          type: "query"
          query: "label_values(vault_secret_rotation_total, secret_type)"
          refresh: "on_dashboard_load"
    
    panels:
      # Secret Expiry Overview
      - id: 1
        title: "Secret Expiry Status"
        type: "stat"
        gridPos: {h: 4, w: 6, x: 0, y: 0}
        targets:
          - expr: "vault_secret_expiry_days{environment=~\"$environment\"}"
            legendFormat: "{{secret_type}} - {{environment}}"
        fieldConfig:
          defaults:
            unit: "days"
            thresholds:
              steps:
                - color: "red"
                  value: 0
                - color: "yellow"
                  value: 7
                - color: "green"
                  value: 30
        
      # Rotation Success Rate
      - id: 2
        title: "Rotation Success Rate (24h)"
        type: "stat"
        gridPos: {h: 4, w: 6, x: 6, y: 0}
        targets:
          - expr: "rate(vault_secret_rotation_success_total{environment=~\"$environment\"}[24h]) / rate(vault_secret_rotation_total{environment=~\"$environment\"}[24h]) * 100"
            legendFormat: "Success Rate"
        fieldConfig:
          defaults:
            unit: "percent"
            thresholds:
              steps:
                - color: "red"
                  value: 0
                - color: "yellow"
                  value: 95
                - color: "green"
                  value: 99
        
      # Active Rotations
      - id: 3
        title: "Active Rotations"
        type: "stat"
        gridPos: {h: 4, w: 6, x: 12, y: 0}
        targets:
          - expr: "vault_rotation_active{environment=~\"$environment\"}"
            legendFormat: "Active Rotations"
        fieldConfig:
          defaults:
            unit: "short"
            thresholds:
              steps:
                - color: "green"
                  value: 0
                - color: "yellow"
                  value: 2
                - color: "red"
                  value: 5
        
      # Health Status
      - id: 4
        title: "System Health"
        type: "stat"
        gridPos: {h: 4, w: 6, x: 18, y: 0}
        targets:
          - expr: "vault_rotation_health_status{environment=~\"$environment\"}"
            legendFormat: "Health Status"
        fieldConfig:
          defaults:
            unit: "short"
            mappings:
              - options:
                  "0": {text: "Unhealthy", color: "red"}
                  "1": {text: "Healthy", color: "green"}
        
      # Rotation Timeline
      - id: 5
        title: "Secret Rotation Timeline"
        type: "timeseries"
        gridPos: {h: 8, w: 12, x: 0, y: 4}
        targets:
          - expr: "increase(vault_secret_rotation_total{environment=~\"$environment\", secret_type=~\"$secret_type\"}[1h])"
            legendFormat: "{{secret_type}} - {{environment}}"
        fieldConfig:
          defaults:
            unit: "short"
            custom:
              drawStyle: "bars"
              stacking: {mode: "none"}
        
      # Rotation Duration
      - id: 6
        title: "Average Rotation Duration"
        type: "timeseries"
        gridPos: {h: 8, w: 12, x: 12, y: 4}
        targets:
          - expr: "histogram_quantile(0.95, rate(vault_rotation_duration_seconds_bucket{environment=~\"$environment\"}[5m]))"
            legendFormat: "95th percentile"
          - expr: "histogram_quantile(0.50, rate(vault_rotation_duration_seconds_bucket{environment=~\"$environment\"}[5m]))"
            legendFormat: "50th percentile"
        fieldConfig:
          defaults:
            unit: "s"
            
      # Secret Types Distribution
      - id: 7
        title: "Secret Types Distribution"
        type: "piechart"
        gridPos: {h: 8, w: 6, x: 0, y: 12}
        targets:
          - expr: "count by (secret_type) (vault_secret_rotation_total{environment=~\"$environment\"})"
            legendFormat: "{{secret_type}}"
        
      # Error Rate by Type
      - id: 8
        title: "Error Rate by Secret Type"
        type: "barchart"
        gridPos: {h: 8, w: 6, x: 6, y: 12}
        targets:
          - expr: "rate(vault_secret_rotation_errors_total{environment=~\"$environment\"}[24h])"
            legendFormat: "{{secret_type}}"
        fieldConfig:
          defaults:
            unit: "reqps"
            
      # Approval Queue
      - id: 9
        title: "Pending Approvals"
        type: "table"
        gridPos: {h: 8, w: 12, x: 12, y: 12}
        targets:
          - expr: "vault_rotation_pending_approvals{environment=~\"$environment\"}"
            format: "table"
        fieldConfig:
          defaults:
            custom:
              displayMode: "table"
        transformations:
          - id: "organize"
            options:
              excludeByName: {"Time": true, "__name__": true}
              renameByName:
                secret_type: "Secret Type"
                environment: "Environment"
                requested_by: "Requested By"
                requested_at: "Requested At"
                
      # Vault Health Metrics
      - id: 10
        title: "Vault Server Health"
        type: "timeseries"
        gridPos: {h: 6, w: 24, x: 0, y: 20}
        targets:
          - expr: "vault_core_unsealed{environment=~\"$environment\"}"
            legendFormat: "Unsealed Status"
          - expr: "vault_core_active{environment=~\"$environment\"}"
            legendFormat: "Active Status"
          - expr: "vault_runtime_num_goroutines{environment=~\"$environment\"}"
            legendFormat: "Goroutines"
        fieldConfig:
          defaults:
            unit: "short"

# Prometheus Alerting Rules
alerting_rules:
  groups:
    - name: "vault_rotation_alerts"
      rules:
        # Secret expiry alerts
        - alert: "SecretExpiringCritical"
          expr: "vault_secret_expiry_days < 3"
          for: "5m"
          labels:
            severity: "critical"
            team: "security"
          annotations:
            summary: "Secret {{$labels.secret_type}} expires in {{$value}} days"
            description: "Secret {{$labels.secret_type}} in {{$labels.environment}} environment expires in {{$value}} days. Immediate rotation required."
            
        - alert: "SecretExpiringWarning"
          expr: "vault_secret_expiry_days < 7 and vault_secret_expiry_days >= 3"
          for: "10m"
          labels:
            severity: "warning"
            team: "ops"
          annotations:
            summary: "Secret {{$labels.secret_type}} expires in {{$value}} days"
            description: "Secret {{$labels.secret_type}} in {{$labels.environment}} environment expires in {{$value}} days. Schedule rotation soon."
            
        # Rotation failure alerts
        - alert: "RotationFailure"
          expr: "increase(vault_secret_rotation_errors_total[15m]) > 0"
          for: "1m"
          labels:
            severity: "critical"
            team: "security"
          annotations:
            summary: "Secret rotation failed for {{$labels.secret_type}}"
            description: "Rotation failed for {{$labels.secret_type}} in {{$labels.environment}}. Manual intervention required."
            
        # High rotation duration
        - alert: "RotationDurationHigh"
          expr: "histogram_quantile(0.95, rate(vault_rotation_duration_seconds_bucket[10m])) > 1800"
          for: "5m"
          labels:
            severity: "warning"
            team: "ops"
          annotations:
            summary: "Secret rotation taking longer than expected"
            description: "95th percentile rotation duration is {{$value}} seconds, exceeding 30-minute threshold."
            
        # Vault health alerts
        - alert: "VaultUnsealed"
          expr: "vault_core_unsealed == 0"
          for: "1m"
          labels:
            severity: "critical"
            team: "security"
          annotations:
            summary: "Vault is sealed"
            description: "Vault server is sealed and requires manual unsealing."
            
        - alert: "VaultInactive"
          expr: "vault_core_active == 0"
          for: "2m"
          labels:
            severity: "critical"
            team: "security"
          annotations:
            summary: "Vault is not active"
            description: "Vault server is not in active state."
            
        # Pending approvals
        - alert: "PendingApprovalTimeout"
          expr: "vault_rotation_pending_approval_age_hours > 24"
          for: "5m"
          labels:
            severity: "warning"
            team: "security"
          annotations:
            summary: "Rotation approval pending for over 24 hours"
            description: "{{$labels.secret_type}} rotation has been pending approval for {{$value}} hours."

# AlertManager Configuration
alertmanager_config:
  global:
    smtp_smarthost: 'smtp.gmail.com:587'
    smtp_from: 'vault-alerts@gameforge.com'
    
  route:
    group_by: ['alertname', 'cluster', 'service']
    group_wait: 10s
    group_interval: 10s
    repeat_interval: 1h
    receiver: 'default'
    routes:
      - match:
          severity: critical
        receiver: 'critical-alerts'
      - match:
          severity: warning
        receiver: 'warning-alerts'
        
  receivers:
    - name: 'default'
      slack_configs:
        - api_url: '${SLACK_WEBHOOK_URL}'
          channel: '#ops-notifications'
          title: 'Vault Rotation Alert'
          text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
          
    - name: 'critical-alerts'
      slack_configs:
        - api_url: '${SLACK_WEBHOOK_URL}'
          channel: '#security-alerts'
          title: 'CRITICAL: Vault Rotation Alert'
          text: '{{ range .Alerts }}{{ .Annotations.summary }}\n{{ .Annotations.description }}{{ end }}'
          color: 'danger'
      pagerduty_configs:
        - service_key: '${PAGERDUTY_INTEGRATION_KEY}'
          description: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
          
    - name: 'warning-alerts'
      slack_configs:
        - api_url: '${SLACK_WEBHOOK_URL}'
          channel: '#ops-notifications'
          title: 'WARNING: Vault Rotation Alert'
          text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
          color: 'warning'

# Custom Metrics Exporter
metrics_exporter:
  port: 9091
  path: "/metrics"
  update_interval: "30s"
  
  metrics:
    - name: "vault_secret_expiry_days"
      type: "gauge"
      description: "Days until secret expiry"
      labels: ["secret_type", "environment"]
      
    - name: "vault_secret_rotation_total"
      type: "counter"
      description: "Total number of secret rotations"
      labels: ["secret_type", "environment", "status"]
      
    - name: "vault_secret_rotation_errors_total"
      type: "counter"
      description: "Total number of rotation errors"
      labels: ["secret_type", "environment", "error_type"]
      
    - name: "vault_rotation_duration_seconds"
      type: "histogram"
      description: "Time taken for secret rotation"
      labels: ["secret_type", "environment"]
      buckets: [1, 5, 10, 30, 60, 300, 600, 1800, 3600]
      
    - name: "vault_rotation_active"
      type: "gauge"
      description: "Number of currently active rotations"
      labels: ["environment"]
      
    - name: "vault_rotation_health_status"
      type: "gauge"
      description: "Health status of rotation system (0=unhealthy, 1=healthy)"
      labels: ["environment", "component"]
      
    - name: "vault_rotation_pending_approvals"
      type: "gauge"
      description: "Number of rotations pending approval"
      labels: ["secret_type", "environment"]
      
    - name: "vault_rotation_pending_approval_age_hours"
      type: "gauge"
      description: "Age of pending approvals in hours"
      labels: ["secret_type", "environment"]

# Docker Compose for monitoring stack
docker_compose_monitoring:
  version: '3.8'
  services:
    prometheus:
      image: prom/prometheus:latest
      container_name: gameforge-prometheus
      ports:
        - "9090:9090"
      volumes:
        - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
        - ./monitoring/rules:/etc/prometheus/rules
        - prometheus_data:/prometheus
      command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
        
    grafana:
      image: grafana/grafana:latest
      container_name: gameforge-grafana
      ports:
        - "3000:3000"
      volumes:
        - grafana_data:/var/lib/grafana
        - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
        - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      environment:
        - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
        - GF_USERS_ALLOW_SIGN_UP=false
        
    alertmanager:
      image: prom/alertmanager:latest
      container_name: gameforge-alertmanager
      ports:
        - "9093:9093"
      volumes:
        - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
        - alertmanager_data:/alertmanager
        
    vault-exporter:
      image: grapeshot/vault_exporter:latest
      container_name: gameforge-vault-exporter
      ports:
        - "9091:9091"
      environment:
        - VAULT_ADDR=${VAULT_ADDR}
        - VAULT_TOKEN=${VAULT_TOKEN}
        
  volumes:
    prometheus_data:
    grafana_data:
    alertmanager_data:
