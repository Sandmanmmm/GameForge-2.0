# GameForge Production Service Configuration
# Single source of truth for all service definitions

global:
  namespace: gameforge
  environment: production
  image_registry: "gameforge.azurecr.io"
  image_tag: "latest"
  security:
    enabled: true
    seccomp_profile: "runtime/default"
    read_only_root_filesystem: true
    run_as_non_root: true

networking:
  ingress:
    enabled: true
    host: "gameforge.example.com"
    tls: true
  service_mesh:
    enabled: true
    type: "istio"

storage:
  storage_classes:
    - name: "fast-ssd"
      provisioner: "kubernetes.io/aws-ebs"
      parameters:
        type: "gp3"
        iops: "3000"
    - name: "standard"
      provisioner: "kubernetes.io/aws-ebs"
      parameters:
        type: "gp2"

services:
  frontend:
    image: "gcr.io/distroless/nodejs18-debian11"
    base_image: "node:18-alpine"
    ports:
      - name: "http"
        port: 3000
        target_port: 3000
    replicas: 3
    resources:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "500m"
        memory: "512Mi"
    health_checks:
      liveness_probe:
        path: "/health"
        port: 3000
        initial_delay: 30
      readiness_probe:
        path: "/ready"
        port: 3000
        initial_delay: 5
    autoscaling:
      enabled: true
      min_replicas: 2
      max_replicas: 10
      target_cpu: 70

  backend:
    image: "gcr.io/distroless/python3-debian11"
    base_image: "python:3.11-alpine"
    ports:
      - name: "http"
        port: 8000
        target_port: 8000
      - name: "metrics"
        port: 9090
        target_port: 9090
    replicas: 3
    resources:
      requests:
        cpu: "200m"
        memory: "256Mi"
      limits:
        cpu: "1000m"
        memory: "1Gi"
    environment:
      - name: "DATABASE_URL"
        value_from_secret: "postgres-credentials"
      - name: "REDIS_URL"
        value: "redis://redis:6379"
    health_checks:
      liveness_probe:
        path: "/api/health"
        port: 8000
        initial_delay: 60
      readiness_probe:
        path: "/api/ready"
        port: 8000
        initial_delay: 30
    autoscaling:
      enabled: true
      min_replicas: 2
      max_replicas: 20
      target_cpu: 80

  ai-inference:
    image: "nvidia/cuda:12.1-runtime-alpine"
    base_image: "nvidia/cuda:12.1-runtime-alpine"
    ports:
      - name: "grpc"
        port: 50051
        target_port: 50051
      - name: "http"
        port: 8001
        target_port: 8001
    replicas: 2
    resources:
      requests:
        cpu: "1000m"
        memory: "4Gi"
        nvidia.com/gpu: 1
      limits:
        cpu: "4000m"
        memory: "16Gi"
        nvidia.com/gpu: 1
    volumes:
      - name: "models"
        type: "persistentVolume"
        mount_path: "/app/models"
        size: "100Gi"
        storage_class: "fast-ssd"
    node_selector:
      accelerator: "nvidia-tesla-v100"
    tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"
    health_checks:
      liveness_probe:
        path: "/health"
        port: 8001
        initial_delay: 120
      readiness_probe:
        path: "/ready"
        port: 8001
        initial_delay: 60

  postgres:
    image: "postgres:15-alpine"
    ports:
      - name: "postgres"
        port: 5432
        target_port: 5432
    replicas: 1
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "2000m"
        memory: "4Gi"
    volumes:
      - name: "data"
        type: "persistentVolume"
        mount_path: "/var/lib/postgresql/data"
        size: "50Gi"
        storage_class: "standard"
    environment:
      - name: "POSTGRES_DB"
        value: "gameforge"
      - name: "POSTGRES_USER"
        value_from_secret: "postgres-credentials"
      - name: "POSTGRES_PASSWORD"
        value_from_secret: "postgres-credentials"
    health_checks:
      liveness_probe:
        exec_command: ["pg_isready", "-U", "postgres"]
        initial_delay: 30
      readiness_probe:
        exec_command: ["pg_isready", "-U", "postgres"]
        initial_delay: 5

  redis:
    image: "redis:7-alpine"
    ports:
      - name: "redis"
        port: 6379
        target_port: 6379
    replicas: 1
    resources:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "500m"
        memory: "512Mi"
    volumes:
      - name: "data"
        type: "persistentVolume"
        mount_path: "/data"
        size: "10Gi"
        storage_class: "standard"
    health_checks:
      liveness_probe:
        exec_command: ["redis-cli", "ping"]
        initial_delay: 30
      readiness_probe:
        exec_command: ["redis-cli", "ping"]
        initial_delay: 5

  prometheus:
    image: "prom/prometheus:v2.45.0"
    ports:
      - name: "web"
        port: 9090
        target_port: 9090
    replicas: 1
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "1000m"
        memory: "2Gi"
    volumes:
      - name: "data"
        type: "persistentVolume"
        mount_path: "/prometheus"
        size: "50Gi"
        storage_class: "standard"
      - name: "config"
        type: "configMap"
        mount_path: "/etc/prometheus"
    health_checks:
      liveness_probe:
        path: "/-/healthy"
        port: 9090
        initial_delay: 30
      readiness_probe:
        path: "/-/ready"
        port: 9090
        initial_delay: 15

  grafana:
    image: "grafana/grafana:10.1.0"
    ports:
      - name: "web"
        port: 3000
        target_port: 3000
    replicas: 1
    resources:
      requests:
        cpu: "100m"
        memory: "256Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"
    volumes:
      - name: "data"
        type: "persistentVolume"
        mount_path: "/var/lib/grafana"
        size: "10Gi"
        storage_class: "standard"
    environment:
      - name: "GF_SECURITY_ADMIN_PASSWORD"
        value_from_secret: "grafana-credentials"
    health_checks:
      liveness_probe:
        path: "/api/health"
        port: 3000
        initial_delay: 30
      readiness_probe:
        path: "/api/health"
        port: 3000
        initial_delay: 15