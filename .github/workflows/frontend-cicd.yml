name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Test and Build Job
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run type check
      run: npx tsc --noEmit
      
    - name: Run tests
      run: npm run test -- --coverage --watchAll=false
      env:
        CI: true
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      
    - name: Build application
      run: npm run build
      env:
        VITE_NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        VITE_GAMEFORGE_API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.gameforge.app/api/v1' || 'https://api-staging.gameforge.app/api/v1' }}
        VITE_APP_VERSION: ${{ github.sha }}
        VITE_ENABLE_ANALYTICS: ${{ github.ref == 'refs/heads/main' && 'true' || 'false' }}
        VITE_ENABLE_ERROR_TRACKING: true
        VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/
        retention-days: 30

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Run security audit
      run: npm audit --audit-level=high
      
    - name: Run dependency check
      run: npx audit-ci --high

  # Deploy to Staging
  deploy-staging:
    needs: [test-and-build, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: dist/
        
    - name: Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
        alias-domains: staging.gameforge.app

  # Deploy to Production
  deploy-production:
    needs: [test-and-build, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: dist/
        
    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
        alias-domains: |
          gameforge.app
          www.gameforge.app
          
    - name: Notify Sentry of deployment
      run: |
        curl -X POST \
          https://sentry.io/api/0/organizations/${{ secrets.SENTRY_ORG }}/releases/ \
          -H 'Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}' \
          -H 'Content-Type: application/json' \
          -d '{
            "version": "${{ github.sha }}",
            "projects": ["gameforge-frontend"],
            "dateCreated": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'"
          }'
          
    - name: Health check
      run: |
        sleep 30
        curl -f https://gameforge.app/health || exit 1

  # Lighthouse Performance Audit
  lighthouse-audit:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Audit live site with Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
        LHCI_BUILD_CONTEXT__COMMIT_TIME: ${{ github.event.head_commit.timestamp }}
        LHCI_BUILD_CONTEXT__CURRENT_BRANCH: ${{ github.ref_name }}
        LHCI_BUILD_CONTEXT__COMMIT_MESSAGE: ${{ github.event.head_commit.message }}