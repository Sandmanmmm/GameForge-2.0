name: GameForge Phase 3 Security Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile*'
      - 'requirements*.txt'
      - 'docker-compose*.yml'
      - '.github/workflows/security-pipeline.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile*'
      - 'requirements*.txt'
      - 'docker-compose*.yml'
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_all_variants:
        description: 'Scan all image variants (CPU/GPU)'
        required: false
        default: 'true'
        type: boolean
      sign_images:
        description: 'Sign images with cosign'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  COSIGN_EXPERIMENTAL: 1

jobs:
  security-pipeline:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # For cosign
      security-events: write # For uploading SARIF files
      
    strategy:
      matrix:
        variant: [cpu, gpu]
        include:
          - variant: cpu
            dockerfile: Dockerfile.production.enhanced
            build_args: |
              BUILD_TYPE=production
              ENABLE_GPU=false
          - variant: gpu
            dockerfile: Dockerfile.production.enhanced
            build_args: |
              BUILD_TYPE=production
              ENABLE_GPU=true
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Install security tools
      run: |
        # Install syft for SBOM generation
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Install trivy for vulnerability scanning
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release -y
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy -y
        
        # Install cosign for image signing
        curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
        sudo mv cosign-linux-amd64 /usr/local/bin/cosign
        sudo chmod +x /usr/local/bin/cosign

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-${{ matrix.variant }}
          type=ref,event=pr,suffix=-${{ matrix.variant }}
          type=sha,suffix=-${{ matrix.variant }}
          type=raw,value=latest-${{ matrix.variant }},enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        build-args: ${{ matrix.build_args }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Phase 1 Pre-build Hygiene
      run: |
        # Simulate Phase 1 checks
        echo "Running Phase 1 hygiene checks..."
        
        # Check for secrets (simplified)
        if git log --all --grep="password\|secret\|key" --oneline | head -5; then
          echo "⚠️ Potential secrets detected in git history"
        fi
        
        # Verify requirements lock
        if [ ! -f "requirements-locked.txt" ]; then
          echo "⚠️ No requirements lock file found"
        fi
        
        echo "✅ Phase 1 hygiene checks complete"

    - name: Generate SBOM
      run: |
        echo "Generating SBOM for ${{ matrix.variant }} variant..."
        mkdir -p sbom-artifacts
        
        # Get the image name (first tag)
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
        
        # Generate SBOM in multiple formats
        syft "$IMAGE_TAG" -o json=sbom-artifacts/sbom-${{ matrix.variant }}.json
        syft "$IMAGE_TAG" -o cyclonedx-json=sbom-artifacts/sbom-${{ matrix.variant }}-cyclonedx.json
        syft "$IMAGE_TAG" -o spdx-json=sbom-artifacts/sbom-${{ matrix.variant }}-spdx.json
        syft "$IMAGE_TAG" -o table=sbom-artifacts/sbom-${{ matrix.variant }}.txt
        
        echo "✅ SBOM generated for ${{ matrix.variant }} variant"

    - name: Vulnerability Scan
      run: |
        echo "Scanning ${{ matrix.variant }} variant for vulnerabilities..."
        mkdir -p scan-artifacts
        
        # Get the image name (first tag)
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
        
        # Run Trivy scan
        trivy image \
          --format json \
          --output scan-artifacts/scan-${{ matrix.variant }}.json \
          "$IMAGE_TAG"
        
        # Generate SARIF for GitHub Security tab
        trivy image \
          --format sarif \
          --output scan-artifacts/scan-${{ matrix.variant }}.sarif \
          "$IMAGE_TAG"
        
        # Generate human-readable report
        trivy image \
          --format table \
          --output scan-artifacts/scan-${{ matrix.variant }}.txt \
          "$IMAGE_TAG"
        
        echo "✅ Vulnerability scan complete for ${{ matrix.variant }} variant"

    - name: Analyze Security Results
      run: |
        echo "Analyzing security scan results..."
        
        # Parse JSON results
        CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' scan-artifacts/scan-${{ matrix.variant }}.json)
        HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' scan-artifacts/scan-${{ matrix.variant }}.json)
        MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' scan-artifacts/scan-${{ matrix.variant }}.json)
        
        echo "Security Summary for ${{ matrix.variant }}:"
        echo "  Critical: $CRITICAL"
        echo "  High: $HIGH"
        echo "  Medium: $MEDIUM"
        
        # Set security gate
        if [ "$CRITICAL" -gt 0 ]; then
          echo "❌ CRITICAL vulnerabilities found - failing build"
          echo "SECURITY_GATE_PASSED=false" >> $GITHUB_ENV
          exit 1
        elif [ "$HIGH" -gt 5 ]; then
          echo "⚠️ Too many HIGH vulnerabilities ($HIGH > 5) - failing build"
          echo "SECURITY_GATE_PASSED=false" >> $GITHUB_ENV
          exit 1
        else
          echo "✅ Security gate passed"
          echo "SECURITY_GATE_PASSED=true" >> $GITHUB_ENV
        fi

    - name: Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: scan-artifacts/scan-${{ matrix.variant }}.sarif
        category: trivy-${{ matrix.variant }}

    - name: Push image to registry
      if: env.SECURITY_GATE_PASSED == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        build-args: ${{ matrix.build_args }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Sign image with cosign
      if: env.SECURITY_GATE_PASSED == 'true' && (github.event.inputs.sign_images == 'true' || github.ref == 'refs/heads/main')
      run: |
        # Get the image name (first tag)
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
        
        echo "Signing image: $IMAGE_TAG"
        cosign sign --yes "$IMAGE_TAG"
        
        # Verify signature
        cosign verify "$IMAGE_TAG" --certificate-identity-regexp=".*" --certificate-oidc-issuer-regexp=".*"
        
        echo "✅ Image signed and verified"

    - name: Generate Security Report
      if: always()
      run: |
        echo "Generating comprehensive security report..."
        
        cat > security-report-${{ matrix.variant }}.md << 'EOF'
        # GameForge Security Report - ${{ matrix.variant }} Variant
        
        **Generated**: $(date)
        **Commit**: ${{ github.sha }}
        **Branch**: ${{ github.ref_name }}
        
        ## Build Summary
        - **Image Variant**: ${{ matrix.variant }}
        - **Dockerfile**: ${{ matrix.dockerfile }}
        - **Security Gate**: $(if [ "$SECURITY_GATE_PASSED" = "true" ]; then echo "✅ PASSED"; else echo "❌ FAILED"; fi)
        
        ## Vulnerability Summary
        EOF
        
        if [ -f "scan-artifacts/scan-${{ matrix.variant }}.json" ]; then
          echo "| Severity | Count |" >> security-report-${{ matrix.variant }}.md
          echo "|----------|-------|" >> security-report-${{ matrix.variant }}.md
          echo "| Critical | $(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' scan-artifacts/scan-${{ matrix.variant }}.json) |" >> security-report-${{ matrix.variant }}.md
          echo "| High | $(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' scan-artifacts/scan-${{ matrix.variant }}.json) |" >> security-report-${{ matrix.variant }}.md
          echo "| Medium | $(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' scan-artifacts/scan-${{ matrix.variant }}.json) |" >> security-report-${{ matrix.variant }}.md
          echo "| Low | $(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' scan-artifacts/scan-${{ matrix.variant }}.json) |" >> security-report-${{ matrix.variant }}.md
        fi
        
        echo "" >> security-report-${{ matrix.variant }}.md
        echo "## SBOM Generated" >> security-report-${{ matrix.variant }}.md
        echo "- JSON Format: ✅" >> security-report-${{ matrix.variant }}.md
        echo "- CycloneDX Format: ✅" >> security-report-${{ matrix.variant }}.md
        echo "- SPDX Format: ✅" >> security-report-${{ matrix.variant }}.md
        
        if [ "$SECURITY_GATE_PASSED" = "true" ]; then
          echo "" >> security-report-${{ matrix.variant }}.md
          echo "## Image Information" >> security-report-${{ matrix.variant }}.md
          echo "- **Registry**: ${{ env.REGISTRY }}" >> security-report-${{ matrix.variant }}.md
          echo "- **Repository**: ${{ env.IMAGE_NAME }}" >> security-report-${{ matrix.variant }}.md
          echo "- **Tags**: $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ', ')" >> security-report-${{ matrix.variant }}.md
        fi

    - name: Upload Security Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-artifacts-${{ matrix.variant }}
        path: |
          sbom-artifacts/
          scan-artifacts/
          security-report-${{ matrix.variant }}.md
        retention-days: 30

    - name: Comment PR with Security Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const variant = '${{ matrix.variant }}';
          
          try {
            const reportPath = `security-report-${variant}.md`;
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🔒 Security Scan Results - ${variant.toUpperCase()} Variant\n\n${report}`
              });
            }
          } catch (error) {
            console.log('Could not post security report comment:', error);
          }

  security-summary:
    runs-on: ubuntu-latest
    needs: security-pipeline
    if: always()
    steps:
    - name: Security Pipeline Summary
      run: |
        echo "## 🔒 GameForge Phase 3 Security Pipeline Summary"
        echo ""
        echo "All security scans completed. Check individual job results for details."
        echo ""
        echo "### Next Steps"
        echo "1. Review vulnerability reports in the Security tab"
        echo "2. Download SBOM artifacts for compliance"
        echo "3. Address any critical/high severity vulnerabilities"
        echo "4. Update dependencies and rebuild images"
