name: "GameForge AI Production CI/CD Pipeline"

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  schedule:
    # Daily security scans at 2 AM UTC
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/gameforge-ai
  COSIGN_EXPERIMENTAL: 1

jobs:
  # ========================================================================
  # SECURITY SCANNING AND VALIDATION
  # ========================================================================
  security-scan:
    name: Security Scanning & Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install security tools
      run: |
        # Install Trivy for vulnerability scanning
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Install Grype for additional vulnerability scanning
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Install Syft for SBOM generation
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Install Cosign for image signing
        curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
        sudo mv cosign-linux-amd64 /usr/local/bin/cosign
        sudo chmod +x /usr/local/bin/cosign
    
    - name: Repository Security Scan
      run: |
        echo "üîç Running repository security scans..."
        
        # Trivy filesystem scan
        trivy fs --security-checks vuln,secret,config \
          --format sarif \
          --output trivy-results.sarif \
          .
        
        # Grype filesystem scan
        grype dir:. --output json --file grype-results.json
        
        echo "‚úÖ Repository security scan completed"
    
    - name: Python Dependencies Security Scan
      run: |
        pip install safety bandit pip-audit
        
        # Safety check for known vulnerabilities
        safety check --json --output safety-results.json || true
        
        # Bandit security linter
        bandit -r scripts/ -f json -o bandit-results.json || true
        
        # pip-audit for dependency vulnerabilities
        pip-audit --format=json --output=pip-audit-results.json || true
    
    - name: Secret Scanning
      run: |
        # Install truffleHog for secret detection
        curl -sSfL https://github.com/trufflesecurity/trufflehog/releases/latest/download/trufflehog_linux_amd64.tar.gz | tar -xzf -
        sudo mv trufflehog /usr/local/bin/
        
        # Scan for secrets
        trufflehog filesystem . --json > trufflehog-results.json
        
        echo "üîê Secret scanning completed"
    
    - name: Upload Security Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          trivy-results.sarif
          grype-results.json
          safety-results.json
          bandit-results.json
          pip-audit-results.json
          trufflehog-results.json
    
    - name: Upload to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: trivy-results.sarif

  # ========================================================================
  # BUILD AND CONTAINER SCANNING
  # ========================================================================
  build-and-scan:
    name: Build & Container Security Scan
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build Container Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push=true
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          VARIANT=cpu
          SECURITY_HARDENING=true
    
    - name: Install Container Security Tools
      run: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Install Grype
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Install Syft for SBOM
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
    
    - name: Container Vulnerability Scan with Trivy
      run: |
        echo "üîç Scanning container image with Trivy..."
        
        # Comprehensive vulnerability scan
        trivy image \
          --format sarif \
          --output trivy-container-results.sarif \
          --severity HIGH,CRITICAL \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Generate detailed report
        trivy image \
          --format json \
          --output trivy-container-detailed.json \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        echo "‚úÖ Trivy container scan completed"
    
    - name: Container Vulnerability Scan with Grype
      run: |
        echo "üîç Scanning container image with Grype..."
        
        grype ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --output json \
          --file grype-container-results.json
        
        echo "‚úÖ Grype container scan completed"
    
    - name: Generate SBOM (Software Bill of Materials)
      run: |
        echo "üìã Generating Software Bill of Materials..."
        
        # Generate SBOM in SPDX format
        syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --output spdx-json \
          --file gameforge-sbom.spdx.json
        
        # Generate SBOM in CycloneDX format
        syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --output cyclonedx-json \
          --file gameforge-sbom.cyclonedx.json
        
        # Generate human-readable SBOM
        syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --output table \
          --file gameforge-sbom.txt
        
        echo "‚úÖ SBOM generation completed"
        echo "üìä SBOM Summary:"
        wc -l gameforge-sbom.txt
    
    - name: Upload Container Scan Results
      uses: actions/upload-artifact@v3
      with:
        name: container-scan-results
        path: |
          trivy-container-results.sarif
          trivy-container-detailed.json
          grype-container-results.json
          gameforge-sbom.spdx.json
          gameforge-sbom.cyclonedx.json
          gameforge-sbom.txt
    
    - name: Upload Container SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: trivy-container-results.sarif

  # ========================================================================
  # IMAGE SIGNING WITH COSIGN
  # ========================================================================
  sign-image:
    name: Sign Container Image
    runs-on: ubuntu-latest
    needs: build-and-scan
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Sign Container Image
      run: |
        echo "üîê Signing container image with Cosign..."
        
        # Sign the image using keyless signing (OIDC)
        cosign sign --yes \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-scan.outputs.image-digest }}
        
        echo "‚úÖ Container image signed successfully"
    
    - name: Generate Attestation
      run: |
        echo "üìã Generating SLSA attestation..."
        
        # Create attestation for the image
        echo '{"buildType": "github-actions", "builder": {"id": "https://github.com/actions/runner"}}' > attestation.json
        
        cosign attest --yes \
          --predicate attestation.json \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-scan.outputs.image-digest }}
        
        echo "‚úÖ SLSA attestation generated"
    
    - name: Verify Signature
      run: |
        echo "üîç Verifying image signature..."
        
        cosign verify \
          --certificate-identity-regexp 'https://github\.com/${{ github.repository_owner }}/${{ github.event.repository.name }}' \
          --certificate-oidc-issuer https://token.actions.githubusercontent.com \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-scan.outputs.image-digest }}
        
        echo "‚úÖ Image signature verified"

  # ========================================================================
  # DEPLOYMENT AND INTEGRATION TESTS
  # ========================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-scan, sign-image]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    
    - name: Deploy to Staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        
        # Set staging environment variables
        export IMAGE_TAG="${{ github.sha }}"
        export ENVIRONMENT="staging"
        
        # Deploy with signed image using consolidated compose
        docker-compose -f docker-compose.yml \
          -f docker-compose.dev.yml \
          up -d
        
        echo "‚úÖ Staging deployment completed"
    
    - name: Health Check
      run: |
        echo "üè• Running health checks..."
        
        # Wait for services to be ready
        sleep 30
        
        # Check application health
        curl -f http://localhost:8000/health || exit 1
        
        # Check metrics endpoint
        curl -f http://localhost:8000/metrics || exit 1
        
        echo "‚úÖ Health checks passed"
    
    - name: Integration Tests
      run: |
        echo "üß™ Running integration tests..."
        
        # Install test dependencies
        pip install pytest httpx
        
        # Run integration tests
        python -m pytest tests/integration/ -v
        
        echo "‚úÖ Integration tests completed"

  # ========================================================================
  # PRODUCTION DEPLOYMENT
  # ========================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "üöÄ Deploying to production environment..."
        
        # Production deployment script
        ./scripts/deploy-production-complete.ps1 \
          --image-tag ${{ github.sha }} \
          --environment production \
          --verify-signature
        
        echo "‚úÖ Production deployment completed"

  # ========================================================================
  # SECURITY REPORTING
  # ========================================================================
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-scan]
    if: always()
    
    steps:
    - name: Download Scan Results
      uses: actions/download-artifact@v3
      with:
        name: security-scan-results
        path: security-results/
    
    - name: Download Container Results
      uses: actions/download-artifact@v3
      with:
        name: container-scan-results
        path: container-results/
    
    - name: Generate Security Summary
      run: |
        echo "üìä Generating security summary report..."
        
        python3 << 'EOF'
        import json
        import os
        from datetime import datetime
        
        # Load scan results
        security_summary = {
            "timestamp": datetime.now().isoformat(),
            "repository": "${{ github.repository }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "scans": {}
        }
        
        # Process Trivy results
        if os.path.exists("security-results/trivy-results.sarif"):
            with open("security-results/trivy-results.sarif") as f:
                trivy_data = json.load(f)
                security_summary["scans"]["trivy"] = {
                    "total_issues": len(trivy_data.get("runs", [{}])[0].get("results", [])),
                    "status": "completed"
                }
        
        # Process Grype results
        if os.path.exists("security-results/grype-results.json"):
            with open("security-results/grype-results.json") as f:
                grype_data = json.load(f)
                security_summary["scans"]["grype"] = {
                    "total_vulnerabilities": len(grype_data.get("matches", [])),
                    "status": "completed"
                }
        
        # Save summary
        with open("security-summary.json", "w") as f:
            json.dump(security_summary, f, indent=2)
        
        print("‚úÖ Security summary generated")
        EOF
    
    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: |
          security-summary.json
          security-results/
          container-results/

  # ========================================================================
  # CLEANUP
  # ========================================================================
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [deploy-staging, security-report]
    if: always()
    
    steps:
    - name: Cleanup Staging Environment
      run: |
        echo "üßπ Cleaning up staging resources..."
        
        # Stop staging containers using consolidated compose
        docker-compose -f docker-compose.yml \
          -f docker-compose.dev.yml \
          down --volumes --remove-orphans || true
        
        # Clean up Docker system
        docker system prune -af || true
        
        echo "‚úÖ Cleanup completed"