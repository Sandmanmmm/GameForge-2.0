"""add_all_missing_model_tables_v2

Revision ID: 93fcbdb8b506
Revises: 4d9691edf265
Create Date: 2025-09-17 14:35:36.079622

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '93fcbdb8b506'
down_revision = '4d9691edf265'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade database schema."""
    # Create enum types first
    sa.Enum('ACTIVE', 'INACTIVE', 'MAINTENANCE', 'ERROR', 'TESTING', name='storagestatus').create(op.get_bind())
    sa.Enum('PENDING', 'QUEUED', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'TIMEOUT', name='airequeststatus').create(op.get_bind())
    sa.Enum('PUBLIC', 'INTERNAL', 'CONFIDENTIAL', 'RESTRICTED', 'PERSONAL_DATA', 'SENSITIVE_PERSONAL_DATA', name='dataclassification').create(op.get_bind())
    sa.Enum('ADMIN', 'USER', 'MODERATOR', 'DEVELOPER', name='userrole').create(op.get_bind())
    sa.Enum('LOCAL', 'GITHUB', 'GOOGLE', 'DISCORD', name='authprovider').create(op.get_bind())
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_models',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('display_name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('version', sa.String(length=50), nullable=False),
    sa.Column('model_type', sa.Enum('TEXT_TO_IMAGE', 'TEXT_TO_AUDIO', 'TEXT_TO_TEXT', 'TEXT_TO_3D', 'IMAGE_TO_IMAGE', 'AUDIO_TO_AUDIO', 'UPSCALING', 'STYLE_TRANSFER', name='aimodeltype'), nullable=False),
    sa.Column('provider', sa.Enum('OPENAI', 'ANTHROPIC', 'STABILITY_AI', 'MIDJOURNEY', 'ELEVENLABS', 'RUNPOD', 'REPLICATE', 'HUGGINGFACE', 'CUSTOM', name='aiprovidertype'), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('input_formats', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('output_formats', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('max_resolution', sa.String(length=20), nullable=True),
    sa.Column('max_duration_seconds', sa.Integer(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('capabilities', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('limitations', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('supported_styles', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('average_processing_time', sa.Float(), nullable=True),
    sa.Column('success_rate', sa.Float(), nullable=True),
    sa.Column('quality_score', sa.Float(), nullable=True),
    sa.Column('cost_per_request', sa.Float(), nullable=True),
    sa.Column('cost_per_second', sa.Float(), nullable=True),
    sa.Column('cost_per_token', sa.Float(), nullable=True),
    sa.Column('pricing_model', sa.String(length=50), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('is_beta', sa.Boolean(), nullable=True),
    sa.Column('requires_approval', sa.Boolean(), nullable=True),
    sa.Column('default_parameters', sa.JSON(), nullable=True),
    sa.Column('parameter_schema', sa.JSON(), nullable=True),
    sa.Column('endpoint_url', sa.String(length=500), nullable=True),
    sa.Column('api_documentation', sa.String(length=500), nullable=True),
    sa.Column('total_requests', sa.Integer(), nullable=True),
    sa.Column('successful_requests', sa.Integer(), nullable=True),
    sa.Column('failed_requests', sa.Integer(), nullable=True),
    sa.Column('last_used_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deprecated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ai_models'))
    )
    op.create_index(op.f('ix_ai_models_category'), 'ai_models', ['category'], unique=False)
    op.create_index(op.f('ix_ai_models_created_at'), 'ai_models', ['created_at'], unique=False)
    op.create_index(op.f('ix_ai_models_is_active'), 'ai_models', ['is_active'], unique=False)
    op.create_index(op.f('ix_ai_models_is_beta'), 'ai_models', ['is_beta'], unique=False)
    op.create_index(op.f('ix_ai_models_is_public'), 'ai_models', ['is_public'], unique=False)
    op.create_index(op.f('ix_ai_models_model_type'), 'ai_models', ['model_type'], unique=False)
    op.create_index(op.f('ix_ai_models_name'), 'ai_models', ['name'], unique=False)
    op.create_index(op.f('ix_ai_models_provider'), 'ai_models', ['provider'], unique=False)
    op.create_table('ai_providers',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('display_name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('provider_type', sa.Enum('OPENAI', 'ANTHROPIC', 'STABILITY_AI', 'MIDJOURNEY', 'ELEVENLABS', 'RUNPOD', 'REPLICATE', 'HUGGINGFACE', 'CUSTOM', name='aiprovidertype'), nullable=False),
    sa.Column('base_url', sa.String(length=500), nullable=True),
    sa.Column('api_version', sa.String(length=20), nullable=True),
    sa.Column('authentication_type', sa.String(length=50), nullable=True),
    sa.Column('rate_limit_requests_per_minute', sa.Integer(), nullable=True),
    sa.Column('rate_limit_requests_per_hour', sa.Integer(), nullable=True),
    sa.Column('supported_model_types', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('supported_features', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('webhook_support', sa.Boolean(), nullable=True),
    sa.Column('batch_support', sa.Boolean(), nullable=True),
    sa.Column('uptime_percentage', sa.Float(), nullable=True),
    sa.Column('average_response_time', sa.Float(), nullable=True),
    sa.Column('error_rate', sa.Float(), nullable=True),
    sa.Column('pricing_url', sa.String(length=500), nullable=True),
    sa.Column('documentation_url', sa.String(length=500), nullable=True),
    sa.Column('support_email', sa.String(length=100), nullable=True),
    sa.Column('terms_of_service_url', sa.String(length=500), nullable=True),
    sa.Column('default_settings', sa.JSON(), nullable=True),
    sa.Column('health_check_url', sa.String(length=500), nullable=True),
    sa.Column('status_page_url', sa.String(length=500), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_available', sa.Boolean(), nullable=True),
    sa.Column('maintenance_mode', sa.Boolean(), nullable=True),
    sa.Column('last_health_check', sa.DateTime(), nullable=True),
    sa.Column('last_failure', sa.DateTime(), nullable=True),
    sa.Column('consecutive_failures', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ai_providers'))
    )
    op.create_index(op.f('ix_ai_providers_created_at'), 'ai_providers', ['created_at'], unique=False)
    op.create_index(op.f('ix_ai_providers_is_active'), 'ai_providers', ['is_active'], unique=False)
    op.create_index(op.f('ix_ai_providers_is_available'), 'ai_providers', ['is_available'], unique=False)
    op.create_index(op.f('ix_ai_providers_name'), 'ai_providers', ['name'], unique=True)
    op.create_index(op.f('ix_ai_providers_provider_type'), 'ai_providers', ['provider_type'], unique=False)
    op.create_table('storage_providers',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('display_name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('provider_type', sa.Enum('AWS_S3', 'GOOGLE_CLOUD', 'AZURE_BLOB', 'CLOUDFLARE_R2', 'DIGITAL_OCEAN', 'BACKBLAZE_B2', 'LOCAL_FILESYSTEM', 'FTP', 'SFTP', name='storageprovidertype'), nullable=False),
    sa.Column('supports_versioning', sa.Boolean(), nullable=True),
    sa.Column('supports_encryption', sa.Boolean(), nullable=True),
    sa.Column('supports_cdn', sa.Boolean(), nullable=True),
    sa.Column('supports_backup', sa.Boolean(), nullable=True),
    sa.Column('max_file_size_bytes', sa.Integer(), nullable=True),
    sa.Column('allowed_file_types', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('api_endpoint', sa.String(length=500), nullable=True),
    sa.Column('api_version', sa.String(length=20), nullable=True),
    sa.Column('documentation_url', sa.String(length=500), nullable=True),
    sa.Column('cost_per_gb_storage', sa.Float(), nullable=True),
    sa.Column('cost_per_request', sa.Float(), nullable=True),
    sa.Column('cost_per_gb_transfer', sa.Float(), nullable=True),
    sa.Column('free_tier_gb', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_available', sa.Boolean(), nullable=True),
    sa.Column('last_health_check', sa.DateTime(), nullable=True),
    sa.Column('uptime_percentage', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_storage_providers'))
    )
    op.create_index(op.f('ix_storage_providers_created_at'), 'storage_providers', ['created_at'], unique=False)
    op.create_index(op.f('ix_storage_providers_is_active'), 'storage_providers', ['is_active'], unique=False)
    op.create_index(op.f('ix_storage_providers_is_available'), 'storage_providers', ['is_available'], unique=False)
    op.create_index(op.f('ix_storage_providers_name'), 'storage_providers', ['name'], unique=True)
    op.create_index(op.f('ix_storage_providers_provider_type'), 'storage_providers', ['provider_type'], unique=False)
    op.create_table('template_categories',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('slug', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('parent_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=True),
    sa.Column('icon', sa.String(length=100), nullable=True),
    sa.Column('color', sa.String(length=20), nullable=True),
    sa.Column('banner_image', sa.String(length=500), nullable=True),
    sa.Column('template_count', sa.Integer(), nullable=True),
    sa.Column('is_featured', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('meta_title', sa.String(length=200), nullable=True),
    sa.Column('meta_description', sa.String(length=500), nullable=True),
    sa.Column('keywords', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['template_categories.id'], name=op.f('fk_template_categories_parent_id_template_categories')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_template_categories'))
    )
    op.create_index(op.f('ix_template_categories_created_at'), 'template_categories', ['created_at'], unique=False)
    op.create_index(op.f('ix_template_categories_is_active'), 'template_categories', ['is_active'], unique=False)
    op.create_index(op.f('ix_template_categories_is_featured'), 'template_categories', ['is_featured'], unique=False)
    op.create_index(op.f('ix_template_categories_name'), 'template_categories', ['name'], unique=True)
    op.create_index(op.f('ix_template_categories_slug'), 'template_categories', ['slug'], unique=True)
    op.create_table('coupon_codes',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('code', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('discount_type', sa.String(length=20), nullable=False),
    sa.Column('discount_value', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('max_discount_amount', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('minimum_purchase_amount', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('usage_limit_total', sa.Integer(), nullable=True),
    sa.Column('usage_limit_per_user', sa.Integer(), nullable=True),
    sa.Column('current_usage_count', sa.Integer(), nullable=True),
    sa.Column('valid_from', sa.DateTime(), nullable=False),
    sa.Column('valid_until', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('applicable_templates', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('applicable_categories', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('excluded_templates', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('new_users_only', sa.Boolean(), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=True),
    sa.Column('campaign_name', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_coupon_codes_created_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_coupon_codes'))
    )
    op.create_index(op.f('ix_coupon_codes_code'), 'coupon_codes', ['code'], unique=True)
    op.create_index(op.f('ix_coupon_codes_is_active'), 'coupon_codes', ['is_active'], unique=False)
    op.create_table('subscriptions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('organization_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('plan_type', sa.Enum('FREE', 'STANDARD', 'PREMIUM', 'ENTERPRISE', 'CUSTOM', name='subscriptionplantype'), nullable=False),
    sa.Column('plan_name', sa.String(length=100), nullable=False),
    sa.Column('plan_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'TRIAL', 'PAST_DUE', 'CANCELED', 'EXPIRED', 'SUSPENDED', 'PENDING', name='subscriptionstatus'), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('trial_start', sa.DateTime(), nullable=True),
    sa.Column('trial_end', sa.DateTime(), nullable=True),
    sa.Column('is_trial', sa.Boolean(), nullable=True),
    sa.Column('renewal_date', sa.DateTime(), nullable=True),
    sa.Column('cancel_at_period_end', sa.Boolean(), nullable=True),
    sa.Column('canceled_at', sa.DateTime(), nullable=True),
    sa.Column('payment_method_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('payment_status', sa.String(length=50), nullable=True),
    sa.Column('last_payment_at', sa.DateTime(), nullable=True),
    sa.Column('next_payment_due', sa.DateTime(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=True),
    sa.Column('invoice_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('external_subscription_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('external_customer_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_subscriptions_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_subscriptions'))
    )
    op.create_index(op.f('ix_subscriptions_created_at'), 'subscriptions', ['created_at'], unique=False)
    op.create_index(op.f('ix_subscriptions_external_customer_id'), 'subscriptions', ['external_customer_id'], unique=False)
    op.create_index(op.f('ix_subscriptions_external_subscription_id'), 'subscriptions', ['external_subscription_id'], unique=False)
    op.create_index(op.f('ix_subscriptions_invoice_id'), 'subscriptions', ['invoice_id'], unique=False)
    op.create_index(op.f('ix_subscriptions_is_active'), 'subscriptions', ['is_active'], unique=False)
    op.create_index(op.f('ix_subscriptions_is_deleted'), 'subscriptions', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_subscriptions_is_trial'), 'subscriptions', ['is_trial'], unique=False)
    op.create_index(op.f('ix_subscriptions_organization_id'), 'subscriptions', ['organization_id'], unique=False)
    op.create_index(op.f('ix_subscriptions_payment_method_id'), 'subscriptions', ['payment_method_id'], unique=False)
    op.create_index(op.f('ix_subscriptions_payment_status'), 'subscriptions', ['payment_status'], unique=False)
    op.create_index(op.f('ix_subscriptions_plan_type'), 'subscriptions', ['plan_type'], unique=False)
    op.create_index(op.f('ix_subscriptions_status'), 'subscriptions', ['status'], unique=False)
    op.create_index(op.f('ix_subscriptions_user_id'), 'subscriptions', ['user_id'], unique=False)
    op.create_table('system_configs',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('key', sa.String(length=200), nullable=False),
    sa.Column('scope', sa.Enum('GLOBAL', 'USER', 'PROJECT', 'ORGANIZATION', name='configscope'), nullable=False),
    sa.Column('scope_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('value', sa.JSON(), nullable=False),
    sa.Column('value_type', sa.String(length=50), nullable=False),
    sa.Column('default_value', sa.JSON(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('validation_schema', sa.JSON(), nullable=True),
    sa.Column('is_valid', sa.Boolean(), nullable=True),
    sa.Column('validation_error', sa.Text(), nullable=True),
    sa.Column('is_sensitive', sa.Boolean(), nullable=True),
    sa.Column('is_encrypted', sa.Boolean(), nullable=True),
    sa.Column('access_level', sa.String(length=50), nullable=True),
    sa.Column('version', sa.Integer(), nullable=True),
    sa.Column('previous_value', sa.JSON(), nullable=True),
    sa.Column('changed_by_id', sa.UUID(), nullable=True),
    sa.Column('change_reason', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_readonly', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['changed_by_id'], ['users.id'], name=op.f('fk_system_configs_changed_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_system_configs'))
    )
    op.create_index(op.f('ix_system_configs_category'), 'system_configs', ['category'], unique=False)
    op.create_index(op.f('ix_system_configs_created_at'), 'system_configs', ['created_at'], unique=False)
    op.create_index(op.f('ix_system_configs_is_active'), 'system_configs', ['is_active'], unique=False)
    op.create_index(op.f('ix_system_configs_is_sensitive'), 'system_configs', ['is_sensitive'], unique=False)
    op.create_index(op.f('ix_system_configs_key'), 'system_configs', ['key'], unique=False)
    op.create_index(op.f('ix_system_configs_scope'), 'system_configs', ['scope'], unique=False)
    op.create_index(op.f('ix_system_configs_scope_id'), 'system_configs', ['scope_id'], unique=False)
    op.create_table('system_notifications',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('organization_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('type', sa.Enum('SYSTEM', 'BILLING', 'SECURITY', 'USAGE', 'ALERT', 'MESSAGE', 'OTHER', name='notificationtype'), nullable=False),
    sa.Column('channel', sa.Enum('EMAIL', 'IN_APP', 'SMS', 'PUSH', name='notificationchannel'), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='notificationpriority'), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('notification_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=True),
    sa.Column('read_at', sa.DateTime(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('sent_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_system_notifications_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_system_notifications'))
    )
    op.create_index(op.f('ix_system_notifications_channel'), 'system_notifications', ['channel'], unique=False)
    op.create_index(op.f('ix_system_notifications_created_at'), 'system_notifications', ['created_at'], unique=False)
    op.create_index(op.f('ix_system_notifications_is_archived'), 'system_notifications', ['is_archived'], unique=False)
    op.create_index(op.f('ix_system_notifications_is_deleted'), 'system_notifications', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_system_notifications_is_read'), 'system_notifications', ['is_read'], unique=False)
    op.create_index(op.f('ix_system_notifications_organization_id'), 'system_notifications', ['organization_id'], unique=False)
    op.create_index(op.f('ix_system_notifications_priority'), 'system_notifications', ['priority'], unique=False)
    op.create_index(op.f('ix_system_notifications_sent_at'), 'system_notifications', ['sent_at'], unique=False)
    op.create_index(op.f('ix_system_notifications_type'), 'system_notifications', ['type'], unique=False)
    op.create_index(op.f('ix_system_notifications_user_id'), 'system_notifications', ['user_id'], unique=False)
    op.create_table('templates',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('slug', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('summary', sa.String(length=500), nullable=True),
    sa.Column('template_type', sa.Enum('PROJECT', 'ASSET_PACK', 'WORKFLOW', 'STYLE_GUIDE', name='templatetype'), nullable=False),
    sa.Column('category_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('creator_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('organization', sa.String(length=100), nullable=True),
    sa.Column('template_data', sa.JSON(), nullable=False),
    sa.Column('assets_included', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('dependencies', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('engine_version', sa.String(length=50), nullable=True),
    sa.Column('supported_platforms', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('minimum_requirements', sa.JSON(), nullable=True),
    sa.Column('file_structure', sa.JSON(), nullable=True),
    sa.Column('thumbnail_url', sa.String(length=500), nullable=True),
    sa.Column('preview_images', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('demo_url', sa.String(length=500), nullable=True),
    sa.Column('video_url', sa.String(length=500), nullable=True),
    sa.Column('readme_content', sa.Text(), nullable=True),
    sa.Column('documentation_url', sa.String(length=500), nullable=True),
    sa.Column('tutorial_url', sa.String(length=500), nullable=True),
    sa.Column('changelog', sa.Text(), nullable=True),
    sa.Column('version', sa.String(length=20), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'PUBLISHED', 'ARCHIVED', 'DEPRECATED', name='templatestatus'), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('is_featured', sa.Boolean(), nullable=True),
    sa.Column('is_premium', sa.Boolean(), nullable=True),
    sa.Column('license_type', sa.String(length=50), nullable=True),
    sa.Column('license_url', sa.String(length=500), nullable=True),
    sa.Column('attribution_required', sa.Boolean(), nullable=True),
    sa.Column('commercial_use_allowed', sa.Boolean(), nullable=True),
    sa.Column('download_count', sa.Integer(), nullable=True),
    sa.Column('use_count', sa.Integer(), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=True),
    sa.Column('star_count', sa.Integer(), nullable=True),
    sa.Column('fork_count', sa.Integer(), nullable=True),
    sa.Column('rating_average', sa.Float(), nullable=True),
    sa.Column('rating_count', sa.Integer(), nullable=True),
    sa.Column('price', sa.Float(), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=True),
    sa.Column('is_marketplace_ready', sa.Boolean(), nullable=True),
    sa.Column('marketplace_approval_status', sa.String(length=20), nullable=True),
    sa.Column('marketplace_approved_at', sa.DateTime(), nullable=True),
    sa.Column('marketplace_approved_by_id', sa.UUID(), nullable=True),
    sa.Column('total_revenue', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('purchase_count', sa.Integer(), nullable=True),
    sa.Column('refund_count', sa.Integer(), nullable=True),
    sa.Column('meta_title', sa.String(length=200), nullable=True),
    sa.Column('meta_description', sa.String(length=500), nullable=True),
    sa.Column('search_keywords', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('verified_by_id', sa.UUID(), nullable=True),
    sa.Column('verified_at', sa.DateTime(), nullable=True),
    sa.Column('quality_score', sa.Float(), nullable=True),
    sa.Column('last_tested_at', sa.DateTime(), nullable=True),
    sa.Column('compatibility_notes', sa.Text(), nullable=True),
    sa.Column('known_issues', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('published_at', sa.DateTime(), nullable=True),
    sa.Column('archived_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['template_categories.id'], name=op.f('fk_templates_category_id_template_categories')),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], name=op.f('fk_templates_creator_id_users'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['marketplace_approved_by_id'], ['users.id'], name=op.f('fk_templates_marketplace_approved_by_id_users')),
    sa.ForeignKeyConstraint(['previous_version_id'], ['templates.id'], name=op.f('fk_templates_previous_version_id_templates')),
    sa.ForeignKeyConstraint(['verified_by_id'], ['users.id'], name=op.f('fk_templates_verified_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_templates'))
    )
    op.create_index(op.f('ix_templates_category_id'), 'templates', ['category_id'], unique=False)
    op.create_index(op.f('ix_templates_created_at'), 'templates', ['created_at'], unique=False)
    op.create_index(op.f('ix_templates_is_featured'), 'templates', ['is_featured'], unique=False)
    op.create_index(op.f('ix_templates_is_marketplace_ready'), 'templates', ['is_marketplace_ready'], unique=False)
    op.create_index(op.f('ix_templates_is_premium'), 'templates', ['is_premium'], unique=False)
    op.create_index(op.f('ix_templates_is_public'), 'templates', ['is_public'], unique=False)
    op.create_index(op.f('ix_templates_is_verified'), 'templates', ['is_verified'], unique=False)
    op.create_index(op.f('ix_templates_name'), 'templates', ['name'], unique=False)
    op.create_index(op.f('ix_templates_slug'), 'templates', ['slug'], unique=True)
    op.create_index(op.f('ix_templates_status'), 'templates', ['status'], unique=False)
    op.create_index(op.f('ix_templates_template_type'), 'templates', ['template_type'], unique=False)
    op.create_table('usage_metrics',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('resource_type', sa.String(length=50), nullable=False),
    sa.Column('resource_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('metric_type', sa.String(length=100), nullable=False),
    sa.Column('metric_name', sa.String(length=100), nullable=False),
    sa.Column('metric_value', sa.Float(), nullable=False),
    sa.Column('metric_unit', sa.String(length=20), nullable=True),
    sa.Column('aggregation_period', sa.String(length=20), nullable=True),
    sa.Column('period_start', sa.DateTime(), nullable=True),
    sa.Column('period_end', sa.DateTime(), nullable=True),
    sa.Column('billable_amount', sa.Float(), nullable=True),
    sa.Column('cost_center', sa.String(length=50), nullable=True),
    sa.Column('pricing_tier', sa.String(length=50), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('usage_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_usage_metrics_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_usage_metrics'))
    )
    op.create_index(op.f('ix_usage_metrics_aggregation_period'), 'usage_metrics', ['aggregation_period'], unique=False)
    op.create_index(op.f('ix_usage_metrics_created_at'), 'usage_metrics', ['created_at'], unique=False)
    op.create_index(op.f('ix_usage_metrics_metric_type'), 'usage_metrics', ['metric_type'], unique=False)
    op.create_index(op.f('ix_usage_metrics_period_end'), 'usage_metrics', ['period_end'], unique=False)
    op.create_index(op.f('ix_usage_metrics_period_start'), 'usage_metrics', ['period_start'], unique=False)
    op.create_index(op.f('ix_usage_metrics_resource_id'), 'usage_metrics', ['resource_id'], unique=False)
    op.create_index(op.f('ix_usage_metrics_resource_type'), 'usage_metrics', ['resource_type'], unique=False)
    op.create_table('user_consents',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('consent_type', sa.String(length=50), nullable=False),
    sa.Column('purpose', sa.String(length=200), nullable=False),
    sa.Column('consent_given', sa.Boolean(), nullable=False),
    sa.Column('consent_text', sa.Text(), nullable=True),
    sa.Column('legal_basis', sa.String(length=100), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('withdrawn_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_consents_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_consents'))
    )
    op.create_index(op.f('ix_user_consents_consent_type'), 'user_consents', ['consent_type'], unique=False)
    op.create_index(op.f('ix_user_consents_created_at'), 'user_consents', ['created_at'], unique=False)
    op.create_table('activity_logs',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('activity_type', sa.Enum('PROJECT_CREATED', 'PROJECT_UPDATED', 'PROJECT_DELETED', 'ASSET_ADDED', 'ASSET_UPDATED', 'ASSET_DELETED', 'MEMBER_ADDED', 'MEMBER_REMOVED', 'ROLE_CHANGED', 'COMMENT_ADDED', 'COMMENT_UPDATED', 'COMMENT_DELETED', name='activitytype'), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('target_user_id', sa.UUID(), nullable=True),
    sa.Column('resource_type', sa.String(length=50), nullable=True),
    sa.Column('resource_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('resource_name', sa.String(length=200), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('changes', sa.JSON(), nullable=True),
    sa.Column('activity_metadata', sa.JSON(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_activity_logs_project_id_projects')),
    sa.ForeignKeyConstraint(['target_user_id'], ['users.id'], name=op.f('fk_activity_logs_target_user_id_users')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_activity_logs_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_activity_logs'))
    )
    op.create_index(op.f('ix_activity_logs_activity_type'), 'activity_logs', ['activity_type'], unique=False)
    op.create_index(op.f('ix_activity_logs_category'), 'activity_logs', ['category'], unique=False)
    op.create_index(op.f('ix_activity_logs_created_at'), 'activity_logs', ['created_at'], unique=False)
    op.create_index(op.f('ix_activity_logs_is_public'), 'activity_logs', ['is_public'], unique=False)
    op.create_index(op.f('ix_activity_logs_project_id'), 'activity_logs', ['project_id'], unique=False)
    op.create_index(op.f('ix_activity_logs_resource_id'), 'activity_logs', ['resource_id'], unique=False)
    op.create_index(op.f('ix_activity_logs_resource_type'), 'activity_logs', ['resource_type'], unique=False)
    op.create_table('analytics',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('event_type', sa.Enum('PAGE_VIEW', 'USER_ACTION', 'API_CALL', 'ERROR', 'PERFORMANCE', 'BUSINESS', name='analyticseventtype'), nullable=False),
    sa.Column('event_name', sa.String(length=100), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=True),
    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('properties', sa.JSON(), nullable=True),
    sa.Column('metrics', sa.JSON(), nullable=True),
    sa.Column('url', sa.String(length=1000), nullable=True),
    sa.Column('referrer', sa.String(length=1000), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('region', sa.String(length=100), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=True),
    sa.Column('device_type', sa.String(length=50), nullable=True),
    sa.Column('browser', sa.String(length=100), nullable=True),
    sa.Column('browser_version', sa.String(length=50), nullable=True),
    sa.Column('operating_system', sa.String(length=100), nullable=True),
    sa.Column('screen_resolution', sa.String(length=20), nullable=True),
    sa.Column('page_load_time', sa.Float(), nullable=True),
    sa.Column('response_time', sa.Float(), nullable=True),
    sa.Column('revenue', sa.Float(), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_analytics_project_id_projects')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_analytics_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_analytics'))
    )
    op.create_index(op.f('ix_analytics_category'), 'analytics', ['category'], unique=False)
    op.create_index(op.f('ix_analytics_created_at'), 'analytics', ['created_at'], unique=False)
    op.create_index(op.f('ix_analytics_event_name'), 'analytics', ['event_name'], unique=False)
    op.create_index(op.f('ix_analytics_event_type'), 'analytics', ['event_type'], unique=False)
    op.create_index(op.f('ix_analytics_ip_address'), 'analytics', ['ip_address'], unique=False)
    op.create_index(op.f('ix_analytics_session_id'), 'analytics', ['session_id'], unique=False)
    op.create_table('marketplace_analytics',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('period_type', sa.String(length=20), nullable=False),
    sa.Column('template_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('category_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('views', sa.Integer(), nullable=True),
    sa.Column('downloads', sa.Integer(), nullable=True),
    sa.Column('purchases', sa.Integer(), nullable=True),
    sa.Column('revenue', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('unique_visitors', sa.Integer(), nullable=True),
    sa.Column('add_to_cart', sa.Integer(), nullable=True),
    sa.Column('checkout_started', sa.Integer(), nullable=True),
    sa.Column('checkout_completed', sa.Integer(), nullable=True),
    sa.Column('top_countries', sa.JSON(), nullable=True),
    sa.Column('traffic_sources', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['template_categories.id'], name=op.f('fk_marketplace_analytics_category_id_template_categories')),
    sa.ForeignKeyConstraint(['template_id'], ['templates.id'], name=op.f('fk_marketplace_analytics_template_id_templates')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_marketplace_analytics'))
    )
    op.create_index('idx_analytics_category_date', 'marketplace_analytics', ['category_id', 'date'], unique=False)
    op.create_index('idx_analytics_period_date', 'marketplace_analytics', ['period_type', 'date'], unique=False)
    op.create_index('idx_analytics_template_date', 'marketplace_analytics', ['template_id', 'date'], unique=False)
    op.create_index(op.f('ix_marketplace_analytics_category_id'), 'marketplace_analytics', ['category_id'], unique=False)
    op.create_index(op.f('ix_marketplace_analytics_date'), 'marketplace_analytics', ['date'], unique=False)
    op.create_index(op.f('ix_marketplace_analytics_template_id'), 'marketplace_analytics', ['template_id'], unique=False)
    op.create_table('marketplace_listings',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('template_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('featured_until', sa.DateTime(), nullable=True),
    sa.Column('boost_score', sa.Float(), nullable=True),
    sa.Column('promotion_tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('pricing_model', sa.String(length=50), nullable=True),
    sa.Column('base_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('sale_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('sale_ends_at', sa.DateTime(), nullable=True),
    sa.Column('personal_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('commercial_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('extended_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('is_available', sa.Boolean(), nullable=True),
    sa.Column('availability_regions', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('age_restriction', sa.Integer(), nullable=True),
    sa.Column('conversion_rate', sa.Float(), nullable=True),
    sa.Column('average_rating', sa.Float(), nullable=True),
    sa.Column('revenue_total', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('revenue_30d', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('marketing_tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('social_media_links', sa.JSON(), nullable=True),
    sa.Column('press_kit_url', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('delisted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['template_id'], ['templates.id'], name=op.f('fk_marketplace_listings_template_id_templates'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_marketplace_listings'))
    )
    op.create_index(op.f('ix_marketplace_listings_is_available'), 'marketplace_listings', ['is_available'], unique=False)
    op.create_index(op.f('ix_marketplace_listings_template_id'), 'marketplace_listings', ['template_id'], unique=True)
    op.create_table('project_collaborations',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('role', sa.Enum('OWNER', 'ADMIN', 'EDITOR', 'VIEWER', name='collaborationrole'), nullable=False),
    sa.Column('permissions', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('invited_by_id', sa.UUID(), nullable=True),
    sa.Column('invitation_accepted_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['invited_by_id'], ['users.id'], name=op.f('fk_project_collaborations_invited_by_id_users')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_project_collaborations_project_id_projects'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_project_collaborations_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_project_collaborations'))
    )
    op.create_index(op.f('ix_project_collaborations_created_at'), 'project_collaborations', ['created_at'], unique=False)
    op.create_index(op.f('ix_project_collaborations_is_active'), 'project_collaborations', ['is_active'], unique=False)
    op.create_table('project_invites',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('invited_by_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('invited_user_id', sa.UUID(), nullable=True),
    sa.Column('invited_email', sa.String(length=100), nullable=True),
    sa.Column('role', sa.Enum('OWNER', 'ADMIN', 'EDITOR', 'VIEWER', name='collaborationrole'), nullable=False),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('token', sa.String(length=255), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'ACCEPTED', 'DECLINED', 'EXPIRED', 'CANCELLED', name='invitestatus'), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('responded_at', sa.DateTime(), nullable=True),
    sa.Column('response_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['invited_by_id'], ['users.id'], name=op.f('fk_project_invites_invited_by_id_users'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['invited_user_id'], ['users.id'], name=op.f('fk_project_invites_invited_user_id_users')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_project_invites_project_id_projects'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_project_invites'))
    )
    op.create_index(op.f('ix_project_invites_created_at'), 'project_invites', ['created_at'], unique=False)
    op.create_index(op.f('ix_project_invites_expires_at'), 'project_invites', ['expires_at'], unique=False)
    op.create_index(op.f('ix_project_invites_invited_email'), 'project_invites', ['invited_email'], unique=False)
    op.create_index(op.f('ix_project_invites_status'), 'project_invites', ['status'], unique=False)
    op.create_index(op.f('ix_project_invites_token'), 'project_invites', ['token'], unique=True)
    op.create_table('purchases',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('purchase_number', sa.String(length=50), nullable=False),
    sa.Column('invoice_number', sa.String(length=50), nullable=True),
    sa.Column('buyer_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('buyer_email', sa.String(length=100), nullable=False),
    sa.Column('buyer_ip', sa.String(length=45), nullable=True),
    sa.Column('template_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('template_version', sa.String(length=20), nullable=True),
    sa.Column('license_type', sa.Enum('PERSONAL', 'COMMERCIAL', 'EXTENDED', 'UNLIMITED', 'EDUCATIONAL', name='licensetype'), nullable=False),
    sa.Column('base_price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('discount_amount', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('tax_amount', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('total_amount', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('payment_provider', sa.Enum('STRIPE', 'PAYPAL', 'APPLE_PAY', 'GOOGLE_PAY', 'BANK_TRANSFER', 'CRYPTO', 'CREDITS', name='paymentprovider'), nullable=False),
    sa.Column('payment_method', sa.Enum('CREDIT_CARD', 'DEBIT_CARD', 'BANK_ACCOUNT', 'DIGITAL_WALLET', 'CRYPTOCURRENCY', 'PLATFORM_CREDITS', name='paymentmethod'), nullable=False),
    sa.Column('payment_provider_id', sa.String(length=100), nullable=True),
    sa.Column('payment_intent_id', sa.String(length=100), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', 'DISPUTED', name='purchasestatus'), nullable=False),
    sa.Column('processing_fee', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('platform_fee', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('creator_payout', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('coupon_code', sa.String(length=50), nullable=True),
    sa.Column('discount_percentage', sa.Float(), nullable=True),
    sa.Column('promotional_campaign', sa.String(length=100), nullable=True),
    sa.Column('buyer_country', sa.String(length=2), nullable=True),
    sa.Column('buyer_state', sa.String(length=50), nullable=True),
    sa.Column('tax_rate', sa.Float(), nullable=True),
    sa.Column('tax_exempt', sa.Boolean(), nullable=True),
    sa.Column('business_name', sa.String(length=200), nullable=True),
    sa.Column('business_tax_id', sa.String(length=50), nullable=True),
    sa.Column('business_address', sa.JSON(), nullable=True),
    sa.Column('download_count', sa.Integer(), nullable=True),
    sa.Column('download_limit', sa.Integer(), nullable=True),
    sa.Column('access_expires_at', sa.DateTime(), nullable=True),
    sa.Column('download_links', sa.JSON(), nullable=True),
    sa.Column('purchase_metadata', sa.JSON(), nullable=True),
    sa.Column('referral_source', sa.String(length=100), nullable=True),
    sa.Column('affiliate_id', sa.String(length=100), nullable=True),
    sa.Column('campaign_tracking', sa.JSON(), nullable=True),
    sa.Column('support_notes', sa.Text(), nullable=True),
    sa.Column('internal_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('cancelled_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['buyer_id'], ['users.id'], name=op.f('fk_purchases_buyer_id_users'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['template_id'], ['templates.id'], name=op.f('fk_purchases_template_id_templates'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_purchases'))
    )
    op.create_index('idx_purchases_buyer_status', 'purchases', ['buyer_id', 'status'], unique=False)
    op.create_index('idx_purchases_status_date', 'purchases', ['status', 'created_at'], unique=False)
    op.create_index('idx_purchases_template_date', 'purchases', ['template_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_purchases_buyer_email'), 'purchases', ['buyer_email'], unique=False)
    op.create_index(op.f('ix_purchases_buyer_id'), 'purchases', ['buyer_id'], unique=False)
    op.create_index(op.f('ix_purchases_completed_at'), 'purchases', ['completed_at'], unique=False)
    op.create_index(op.f('ix_purchases_coupon_code'), 'purchases', ['coupon_code'], unique=False)
    op.create_index(op.f('ix_purchases_created_at'), 'purchases', ['created_at'], unique=False)
    op.create_index(op.f('ix_purchases_invoice_number'), 'purchases', ['invoice_number'], unique=True)
    op.create_index(op.f('ix_purchases_purchase_number'), 'purchases', ['purchase_number'], unique=True)
    op.create_index(op.f('ix_purchases_status'), 'purchases', ['status'], unique=False)
    op.create_index(op.f('ix_purchases_template_id'), 'purchases', ['template_id'], unique=False)
    op.create_table('comments',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_type', sa.String(length=20), nullable=True),
    sa.Column('author_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('asset_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('parent_comment_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('thread_root_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('reply_count', sa.Integer(), nullable=True),
    sa.Column('is_edited', sa.Boolean(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('is_pinned', sa.Boolean(), nullable=True),
    sa.Column('like_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['assets.id'], name=op.f('fk_comments_asset_id_assets')),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], name=op.f('fk_comments_author_id_users'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_comment_id'], ['comments.id'], name=op.f('fk_comments_parent_comment_id_comments')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_comments_project_id_projects')),
    sa.ForeignKeyConstraint(['thread_root_id'], ['comments.id'], name=op.f('fk_comments_thread_root_id_comments')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_comments'))
    )
    op.create_index(op.f('ix_comments_asset_id'), 'comments', ['asset_id'], unique=False)
    op.create_index(op.f('ix_comments_created_at'), 'comments', ['created_at'], unique=False)
    op.create_index(op.f('ix_comments_is_deleted'), 'comments', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_comments_project_id'), 'comments', ['project_id'], unique=False)
    op.create_table('dataset_versions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('dataset_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_number', sa.String(length=50), nullable=False),
    sa.Column('version_hash', sa.String(length=64), nullable=False),
    sa.Column('changelog', sa.Text(), nullable=True),
    sa.Column('changes_summary', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('storage_path', sa.String(length=1000), nullable=False),
    sa.Column('size_bytes', sa.Integer(), nullable=False),
    sa.Column('checksum', sa.String(length=64), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_dataset_versions_created_by_id_users')),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], name=op.f('fk_dataset_versions_dataset_id_datasets'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_dataset_versions'))
    )
    op.create_index(op.f('ix_dataset_versions_dataset_id'), 'dataset_versions', ['dataset_id'], unique=False)
    op.create_index(op.f('ix_dataset_versions_version_hash'), 'dataset_versions', ['version_hash'], unique=False)
    op.create_table('experiments',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('experiment_type', sa.String(length=50), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('training_dataset_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('validation_dataset_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('test_dataset_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('base_model_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('model_architecture', sa.String(length=100), nullable=True),
    sa.Column('hyperparameters', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('training_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.Enum('CREATED', 'QUEUED', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', 'PAUSED', name='experimentstatus'), nullable=False),
    sa.Column('progress_percentage', sa.Float(), nullable=True),
    sa.Column('current_epoch', sa.Integer(), nullable=True),
    sa.Column('total_epochs', sa.Integer(), nullable=True),
    sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('best_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('loss_history', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('accuracy_history', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('compute_provider', sa.String(length=50), nullable=True),
    sa.Column('instance_type', sa.String(length=50), nullable=True),
    sa.Column('gpu_count', sa.Integer(), nullable=True),
    sa.Column('cpu_count', sa.Integer(), nullable=True),
    sa.Column('memory_gb', sa.Integer(), nullable=True),
    sa.Column('estimated_cost', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('actual_cost', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('compute_hours', sa.Float(), nullable=True),
    sa.Column('model_artifacts_path', sa.String(length=1000), nullable=True),
    sa.Column('logs_path', sa.String(length=1000), nullable=True),
    sa.Column('tensorboard_path', sa.String(length=1000), nullable=True),
    sa.Column('checkpoint_paths', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('estimated_completion_at', sa.DateTime(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_code', sa.String(length=50), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('wandb_run_id', sa.String(length=100), nullable=True),
    sa.Column('mlflow_run_id', sa.String(length=100), nullable=True),
    sa.Column('external_experiment_id', sa.String(length=100), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('experiment_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['base_model_id'], ['ai_models.id'], name=op.f('fk_experiments_base_model_id_ai_models')),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_experiments_created_by_id_users'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_experiments_project_id_projects')),
    sa.ForeignKeyConstraint(['test_dataset_id'], ['datasets.id'], name=op.f('fk_experiments_test_dataset_id_datasets')),
    sa.ForeignKeyConstraint(['training_dataset_id'], ['datasets.id'], name=op.f('fk_experiments_training_dataset_id_datasets')),
    sa.ForeignKeyConstraint(['validation_dataset_id'], ['datasets.id'], name=op.f('fk_experiments_validation_dataset_id_datasets')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_experiments'))
    )
    op.create_index(op.f('ix_experiments_created_at'), 'experiments', ['created_at'], unique=False)
    op.create_index(op.f('ix_experiments_created_by_id'), 'experiments', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_experiments_experiment_type'), 'experiments', ['experiment_type'], unique=False)
    op.create_index(op.f('ix_experiments_name'), 'experiments', ['name'], unique=False)
    op.create_index(op.f('ix_experiments_project_id'), 'experiments', ['project_id'], unique=False)
    op.create_index(op.f('ix_experiments_status'), 'experiments', ['status'], unique=False)
    op.create_table('payment_transactions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('transaction_id', sa.String(length=100), nullable=False),
    sa.Column('purchase_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('payment_provider', sa.Enum('STRIPE', 'PAYPAL', 'APPLE_PAY', 'GOOGLE_PAY', 'BANK_TRANSFER', 'CRYPTO', 'CREDITS', name='paymentprovider'), nullable=False),
    sa.Column('provider_transaction_id', sa.String(length=100), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('failure_code', sa.String(length=50), nullable=True),
    sa.Column('failure_message', sa.Text(), nullable=True),
    sa.Column('provider_response', sa.JSON(), nullable=True),
    sa.Column('provider_fees', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('risk_score', sa.Float(), nullable=True),
    sa.Column('fraud_detected', sa.Boolean(), nullable=True),
    sa.Column('verification_required', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['purchase_id'], ['purchases.id'], name=op.f('fk_payment_transactions_purchase_id_purchases'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_payment_transactions'))
    )
    op.create_index(op.f('ix_payment_transactions_provider_transaction_id'), 'payment_transactions', ['provider_transaction_id'], unique=False)
    op.create_index(op.f('ix_payment_transactions_purchase_id'), 'payment_transactions', ['purchase_id'], unique=False)
    op.create_index(op.f('ix_payment_transactions_status'), 'payment_transactions', ['status'], unique=False)
    op.create_index(op.f('ix_payment_transactions_transaction_id'), 'payment_transactions', ['transaction_id'], unique=True)
    op.create_table('refunds',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('refund_number', sa.String(length=50), nullable=False),
    sa.Column('purchase_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('reason', sa.Enum('CUSTOMER_REQUEST', 'DEFECTIVE_PRODUCT', 'UNAUTHORIZED_PURCHASE', 'DUPLICATE_PURCHASE', 'TECHNICAL_ISSUE', 'POLICY_VIOLATION', 'DISPUTE_RESOLUTION', name='refundreason'), nullable=False),
    sa.Column('reason_description', sa.Text(), nullable=True),
    sa.Column('requested_by_id', sa.UUID(), nullable=True),
    sa.Column('approved_by_id', sa.UUID(), nullable=True),
    sa.Column('payment_provider_refund_id', sa.String(length=100), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('admin_notes', sa.Text(), nullable=True),
    sa.Column('customer_notified', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['approved_by_id'], ['users.id'], name=op.f('fk_refunds_approved_by_id_users')),
    sa.ForeignKeyConstraint(['purchase_id'], ['purchases.id'], name=op.f('fk_refunds_purchase_id_purchases'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['requested_by_id'], ['users.id'], name=op.f('fk_refunds_requested_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_refunds'))
    )
    op.create_index(op.f('ix_refunds_purchase_id'), 'refunds', ['purchase_id'], unique=False)
    op.create_index(op.f('ix_refunds_refund_number'), 'refunds', ['refund_number'], unique=True)
    op.create_table('template_downloads',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('template_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('purchase_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('download_type', sa.String(length=50), nullable=True),
    sa.Column('file_size_bytes', sa.Integer(), nullable=True),
    sa.Column('download_url', sa.String(length=1000), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('referrer', sa.String(length=500), nullable=True),
    sa.Column('country', sa.String(length=2), nullable=True),
    sa.Column('region', sa.String(length=100), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('download_started', sa.Boolean(), nullable=True),
    sa.Column('download_completed', sa.Boolean(), nullable=True),
    sa.Column('bytes_downloaded', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['purchase_id'], ['purchases.id'], name=op.f('fk_template_downloads_purchase_id_purchases')),
    sa.ForeignKeyConstraint(['template_id'], ['templates.id'], name=op.f('fk_template_downloads_template_id_templates'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_template_downloads_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_template_downloads'))
    )
    op.create_index('idx_downloads_template_date', 'template_downloads', ['template_id', 'created_at'], unique=False)
    op.create_index('idx_downloads_user_date', 'template_downloads', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_template_downloads_ip_address'), 'template_downloads', ['ip_address'], unique=False)
    op.create_index(op.f('ix_template_downloads_template_id'), 'template_downloads', ['template_id'], unique=False)
    op.create_table('template_ratings',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('template_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('purchase_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('review_title', sa.String(length=200), nullable=True),
    sa.Column('review_text', sa.Text(), nullable=True),
    sa.Column('is_verified_purchase', sa.Boolean(), nullable=True),
    sa.Column('is_featured', sa.Boolean(), nullable=True),
    sa.Column('helpful_votes', sa.Integer(), nullable=True),
    sa.Column('total_votes', sa.Integer(), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=True),
    sa.Column('moderated_by_id', sa.UUID(), nullable=True),
    sa.Column('moderation_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('moderated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['moderated_by_id'], ['users.id'], name=op.f('fk_template_ratings_moderated_by_id_users')),
    sa.ForeignKeyConstraint(['purchase_id'], ['purchases.id'], name=op.f('fk_template_ratings_purchase_id_purchases')),
    sa.ForeignKeyConstraint(['template_id'], ['templates.id'], name=op.f('fk_template_ratings_template_id_templates'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_template_ratings_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_template_ratings'))
    )
    op.create_index('idx_unique_user_template_rating', 'template_ratings', ['user_id', 'template_id'], unique=True)
    op.create_index(op.f('ix_template_ratings_template_id'), 'template_ratings', ['template_id'], unique=False)
    op.create_index(op.f('ix_template_ratings_user_id'), 'template_ratings', ['user_id'], unique=False)
    op.create_table('model_versions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('base_model_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('experiment_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('training_dataset_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('parent_version_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('model_file_path', sa.String(length=1000), nullable=False),
    sa.Column('model_size_bytes', sa.Integer(), nullable=True),
    sa.Column('model_hash', sa.String(length=64), nullable=False),
    sa.Column('config_file_path', sa.String(length=1000), nullable=True),
    sa.Column('weights_path', sa.String(length=1000), nullable=True),
    sa.Column('model_architecture', sa.String(length=100), nullable=True),
    sa.Column('framework', sa.String(length=50), nullable=True),
    sa.Column('framework_version', sa.String(length=20), nullable=True),
    sa.Column('model_format', sa.String(length=20), nullable=True),
    sa.Column('accuracy', sa.Float(), nullable=True),
    sa.Column('loss', sa.Float(), nullable=True),
    sa.Column('f1_score', sa.Float(), nullable=True),
    sa.Column('precision', sa.Float(), nullable=True),
    sa.Column('recall', sa.Float(), nullable=True),
    sa.Column('inference_time_ms', sa.Float(), nullable=True),
    sa.Column('model_size_mb', sa.Float(), nullable=True),
    sa.Column('status', sa.Enum('TRAINING', 'READY', 'DEPLOYED', 'DEPRECATED', 'FAILED', 'ARCHIVED', name='modelversionstatus'), nullable=False),
    sa.Column('deployment_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('endpoint_url', sa.String(length=500), nullable=True),
    sa.Column('api_key', sa.String(length=200), nullable=True),
    sa.Column('git_commit_hash', sa.String(length=40), nullable=True),
    sa.Column('code_repository', sa.String(length=500), nullable=True),
    sa.Column('dockerfile_path', sa.String(length=500), nullable=True),
    sa.Column('requirements_hash', sa.String(length=64), nullable=True),
    sa.Column('inference_count', sa.Integer(), nullable=True),
    sa.Column('last_inference_at', sa.DateTime(), nullable=True),
    sa.Column('average_response_time', sa.Float(), nullable=True),
    sa.Column('error_rate', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('deployed_at', sa.DateTime(), nullable=True),
    sa.Column('deprecated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['base_model_id'], ['ai_models.id'], name=op.f('fk_model_versions_base_model_id_ai_models'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['experiment_id'], ['experiments.id'], name=op.f('fk_model_versions_experiment_id_experiments')),
    sa.ForeignKeyConstraint(['parent_version_id'], ['model_versions.id'], name=op.f('fk_model_versions_parent_version_id_model_versions')),
    sa.ForeignKeyConstraint(['training_dataset_id'], ['datasets.id'], name=op.f('fk_model_versions_training_dataset_id_datasets')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_model_versions'))
    )
    op.create_index('idx_unique_model_version', 'model_versions', ['base_model_id', 'version'], unique=True)
    op.create_index(op.f('ix_model_versions_base_model_id'), 'model_versions', ['base_model_id'], unique=False)
    op.create_index(op.f('ix_model_versions_created_at'), 'model_versions', ['created_at'], unique=False)
    op.create_index(op.f('ix_model_versions_experiment_id'), 'model_versions', ['experiment_id'], unique=False)
    op.create_index(op.f('ix_model_versions_status'), 'model_versions', ['status'], unique=False)
    op.create_table('notifications',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('notification_type', sa.Enum('PROJECT_INVITE', 'PROJECT_UPDATE', 'COMMENT_MENTION', 'COMMENT_REPLY', 'ASSET_READY', 'SYSTEM_ANNOUNCEMENT', 'SECURITY_ALERT', name='notificationtype'), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('asset_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('comment_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('sender_id', sa.UUID(), nullable=True),
    sa.Column('action_url', sa.String(length=500), nullable=True),
    sa.Column('action_text', sa.String(length=100), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.Column('priority', sa.String(length=20), nullable=True),
    sa.Column('delivery_method', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('notification_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('read_at', sa.DateTime(), nullable=True),
    sa.Column('archived_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['assets.id'], name=op.f('fk_notifications_asset_id_assets')),
    sa.ForeignKeyConstraint(['comment_id'], ['comments.id'], name=op.f('fk_notifications_comment_id_comments')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_notifications_project_id_projects')),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name=op.f('fk_notifications_sender_id_users')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_notifications_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_notifications'))
    )
    op.create_index(op.f('ix_notifications_created_at'), 'notifications', ['created_at'], unique=False)
    op.create_index(op.f('ix_notifications_is_archived'), 'notifications', ['is_archived'], unique=False)
    op.create_index(op.f('ix_notifications_is_read'), 'notifications', ['is_read'], unique=False)
    op.create_index(op.f('ix_notifications_notification_type'), 'notifications', ['notification_type'], unique=False)
    op.create_index(op.f('ix_notifications_priority'), 'notifications', ['priority'], unique=False)
    op.create_table('drift_events',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('event_type', sa.Enum('DATA_DRIFT', 'CONCEPT_DRIFT', 'PREDICTION_DRIFT', 'FEATURE_DRIFT', 'PERFORMANCE_DRIFT', name='drifttype'), nullable=False),
    sa.Column('severity', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='driftseverity'), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('model_version_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('drift_score', sa.Float(), nullable=False),
    sa.Column('threshold', sa.Float(), nullable=False),
    sa.Column('detection_method', sa.String(length=100), nullable=True),
    sa.Column('affected_features', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('statistical_test', sa.String(length=50), nullable=True),
    sa.Column('p_value', sa.Float(), nullable=True),
    sa.Column('test_statistic', sa.Float(), nullable=True),
    sa.Column('confidence_level', sa.Float(), nullable=True),
    sa.Column('reference_period_start', sa.DateTime(), nullable=False),
    sa.Column('reference_period_end', sa.DateTime(), nullable=False),
    sa.Column('comparison_period_start', sa.DateTime(), nullable=False),
    sa.Column('comparison_period_end', sa.DateTime(), nullable=False),
    sa.Column('sample_size_reference', sa.Integer(), nullable=True),
    sa.Column('sample_size_comparison', sa.Integer(), nullable=True),
    sa.Column('drift_magnitude', sa.Float(), nullable=True),
    sa.Column('drift_direction', sa.String(length=20), nullable=True),
    sa.Column('affected_predictions', sa.Integer(), nullable=True),
    sa.Column('impact_assessment', sa.Text(), nullable=True),
    sa.Column('performance_degradation', sa.Float(), nullable=True),
    sa.Column('prediction_confidence_drop', sa.Float(), nullable=True),
    sa.Column('error_rate_increase', sa.Float(), nullable=True),
    sa.Column('alert_triggered', sa.Boolean(), nullable=True),
    sa.Column('notification_sent', sa.Boolean(), nullable=True),
    sa.Column('acknowledged_by_id', sa.UUID(), nullable=True),
    sa.Column('acknowledged_at', sa.DateTime(), nullable=True),
    sa.Column('is_resolved', sa.Boolean(), nullable=True),
    sa.Column('resolution_action', sa.Text(), nullable=True),
    sa.Column('resolved_by_id', sa.UUID(), nullable=True),
    sa.Column('resolved_at', sa.DateTime(), nullable=True),
    sa.Column('recommended_actions', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('retraining_suggested', sa.Boolean(), nullable=True),
    sa.Column('feature_engineering_needed', sa.Boolean(), nullable=True),
    sa.Column('data_collection_needed', sa.Boolean(), nullable=True),
    sa.Column('monitoring_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('environmental_factors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('business_context', sa.Text(), nullable=True),
    sa.Column('detected_at', sa.DateTime(), nullable=False),
    sa.Column('parent_event_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['acknowledged_by_id'], ['users.id'], name=op.f('fk_drift_events_acknowledged_by_id_users')),
    sa.ForeignKeyConstraint(['model_version_id'], ['model_versions.id'], name=op.f('fk_drift_events_model_version_id_model_versions'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_event_id'], ['drift_events.id'], name=op.f('fk_drift_events_parent_event_id_drift_events')),
    sa.ForeignKeyConstraint(['resolved_by_id'], ['users.id'], name=op.f('fk_drift_events_resolved_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_drift_events'))
    )
    op.create_index('idx_drift_detected_unresolved', 'drift_events', ['detected_at', 'is_resolved'], unique=False)
    op.create_index('idx_drift_model_severity', 'drift_events', ['model_version_id', 'severity'], unique=False)
    op.create_index('idx_drift_type_severity', 'drift_events', ['event_type', 'severity'], unique=False)
    op.create_index(op.f('ix_drift_events_detected_at'), 'drift_events', ['detected_at'], unique=False)
    op.create_index(op.f('ix_drift_events_event_type'), 'drift_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_drift_events_is_resolved'), 'drift_events', ['is_resolved'], unique=False)
    op.create_index(op.f('ix_drift_events_model_version_id'), 'drift_events', ['model_version_id'], unique=False)
    op.create_index(op.f('ix_drift_events_severity'), 'drift_events', ['severity'], unique=False)
    op.create_table('model_monitoring_configs',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('model_version_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('monitoring_frequency_hours', sa.Integer(), nullable=True),
    sa.Column('drift_detection_method', sa.String(length=100), nullable=True),
    sa.Column('data_drift_threshold', sa.Float(), nullable=True),
    sa.Column('concept_drift_threshold', sa.Float(), nullable=True),
    sa.Column('performance_drift_threshold', sa.Float(), nullable=True),
    sa.Column('alert_on_low_severity', sa.Boolean(), nullable=True),
    sa.Column('alert_on_medium_severity', sa.Boolean(), nullable=True),
    sa.Column('alert_on_high_severity', sa.Boolean(), nullable=True),
    sa.Column('alert_on_critical_severity', sa.Boolean(), nullable=True),
    sa.Column('email_alerts', sa.Boolean(), nullable=True),
    sa.Column('slack_webhook_url', sa.String(length=500), nullable=True),
    sa.Column('notification_recipients', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('reference_dataset_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('reference_window_days', sa.Integer(), nullable=True),
    sa.Column('comparison_window_days', sa.Integer(), nullable=True),
    sa.Column('monitored_features', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('feature_weights', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('track_accuracy', sa.Boolean(), nullable=True),
    sa.Column('track_latency', sa.Boolean(), nullable=True),
    sa.Column('track_throughput', sa.Boolean(), nullable=True),
    sa.Column('track_error_rate', sa.Boolean(), nullable=True),
    sa.Column('check_missing_values', sa.Boolean(), nullable=True),
    sa.Column('check_outliers', sa.Boolean(), nullable=True),
    sa.Column('check_data_types', sa.Boolean(), nullable=True),
    sa.Column('check_value_ranges', sa.Boolean(), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('monitoring_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('last_check_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_model_monitoring_configs_created_by_id_users')),
    sa.ForeignKeyConstraint(['model_version_id'], ['model_versions.id'], name=op.f('fk_model_monitoring_configs_model_version_id_model_versions'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reference_dataset_id'], ['datasets.id'], name=op.f('fk_model_monitoring_configs_reference_dataset_id_datasets')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_model_monitoring_configs'))
    )
    op.create_index(op.f('ix_model_monitoring_configs_is_active'), 'model_monitoring_configs', ['is_active'], unique=False)
    op.create_index(op.f('ix_model_monitoring_configs_model_version_id'), 'model_monitoring_configs', ['model_version_id'], unique=True)
    op.drop_index(op.f('idx_project_collaborators_project_id'), table_name='project_collaborators')
    op.drop_index(op.f('idx_project_collaborators_user_id'), table_name='project_collaborators')
    # Drop views that depend on tables we're about to drop
    op.execute('DROP VIEW IF EXISTS project_stats CASCADE')
    op.execute('DROP VIEW IF EXISTS user_stats CASCADE')
    op.execute('DROP VIEW IF EXISTS migration_status CASCADE')
    
    op.drop_table('project_collaborators')
    op.drop_index(op.f('idx_schema_migrations_applied_at'), table_name='schema_migrations')
    op.drop_index(op.f('idx_schema_migrations_version'), table_name='schema_migrations')
    op.drop_table('schema_migrations')
    op.drop_index(op.f('idx_game_templates_active'), table_name='game_templates')
    op.drop_index(op.f('idx_game_templates_category'), table_name='game_templates')
    op.drop_index(op.f('idx_game_templates_engine'), table_name='game_templates')
    op.drop_index(op.f('idx_game_templates_featured'), table_name='game_templates')
    op.drop_index(op.f('idx_game_templates_genre'), table_name='game_templates')
    op.drop_index(op.f('idx_game_templates_slug'), table_name='game_templates')
    op.drop_index(op.f('idx_game_templates_tags'), table_name='game_templates', postgresql_using='gin')
    # Drop foreign key constraint before dropping the referenced table
    op.drop_constraint(op.f('projects_template_id_fkey'), 'projects', type_='foreignkey')
    op.drop_column('projects', 'template_id')
    op.drop_column('projects', 'total_assets')
    op.drop_column('projects', 'license')
    op.drop_column('projects', 'documentation_url')
    op.drop_column('projects', 'metadata')
    op.drop_column('projects', 'engine_version')
    op.drop_column('projects', 'engine')
    op.drop_column('projects', 'last_activity')
    op.drop_column('projects', 'art_style')
    op.drop_column('projects', 'target_platforms')
    op.drop_column('projects', 'total_size_bytes')
    op.drop_column('projects', 'status')
    op.add_column('storage_configs', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('storage_configs', sa.Column('user_id', sa.UUID(), nullable=True))
    op.add_column('storage_configs', sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column('storage_configs', sa.Column('is_global', sa.Boolean(), nullable=True))
    op.add_column('storage_configs', sa.Column('provider_id', postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column('storage_configs', sa.Column('secret_access_key', sa.String(length=500), nullable=True))
    op.add_column('storage_configs', sa.Column('use_ssl', sa.Boolean(), nullable=True))
    op.add_column('storage_configs', sa.Column('path_style', sa.Boolean(), nullable=True))
    op.add_column('storage_configs', sa.Column('custom_domain', sa.String(length=500), nullable=True))
    op.add_column('storage_configs', sa.Column('cdn_domain', sa.String(length=500), nullable=True))
    op.add_column('storage_configs', sa.Column('base_path', sa.String(length=500), nullable=True))
    op.add_column('storage_configs', sa.Column('folder_structure', sa.String(length=100), nullable=True))
    op.add_column('storage_configs', sa.Column('file_naming', sa.String(length=100), nullable=True))
    op.add_column('storage_configs', sa.Column('encryption_enabled', sa.Boolean(), nullable=True))
    op.add_column('storage_configs', sa.Column('encryption_key', sa.String(length=500), nullable=True))
    op.add_column('storage_configs', sa.Column('public_read', sa.Boolean(), nullable=True))
    op.add_column('storage_configs', sa.Column('signed_urls', sa.Boolean(), nullable=True))
    op.add_column('storage_configs', sa.Column('url_expiry_hours', sa.Integer(), nullable=True))
    op.add_column('storage_configs', sa.Column('allowed_extensions', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('storage_configs', sa.Column('forbidden_extensions', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('storage_configs', sa.Column('auto_backup', sa.Boolean(), nullable=True))
    op.add_column('storage_configs', sa.Column('backup_retention_days', sa.Integer(), nullable=True))
    op.add_column('storage_configs', sa.Column('multipart_threshold_mb', sa.Integer(), nullable=True))
    op.add_column('storage_configs', sa.Column('multipart_chunksize_mb', sa.Integer(), nullable=True))
    op.add_column('storage_configs', sa.Column('transfer_acceleration', sa.Boolean(), nullable=True))
    op.add_column('storage_configs', sa.Column('total_storage_used_bytes', sa.Integer(), nullable=True))
    op.add_column('storage_configs', sa.Column('file_count', sa.Integer(), nullable=True))
    op.add_column('storage_configs', sa.Column('last_sync_at', sa.DateTime(), nullable=True))
    op.add_column('storage_configs', sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'MAINTENANCE', 'ERROR', 'TESTING', name='storagestatus'), nullable=True))
    op.add_column('storage_configs', sa.Column('is_validated', sa.Boolean(), nullable=True))
    op.add_column('storage_configs', sa.Column('last_validation_at', sa.DateTime(), nullable=True))
    op.add_column('storage_configs', sa.Column('validation_error', sa.Text(), nullable=True))
    op.add_column('storage_configs', sa.Column('config_metadata', sa.JSON(), nullable=True))
    op.add_column('storage_configs', sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('storage_configs', sa.Column('last_used_at', sa.DateTime(), nullable=True))
    # Keep storage_configs.id as UUID - no alteration needed'))
    op.alter_column('storage_configs', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('storage_configs', 'endpoint_url',
               existing_type=sa.TEXT(),
               type_=sa.String(length=500),
               existing_nullable=True)
    op.alter_column('storage_configs', 'bucket_name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=False)
    op.alter_column('storage_configs', 'access_key_id',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=True)
    op.alter_column('storage_configs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('storage_configs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_storage_configs_active'), table_name='storage_configs')
    op.drop_index(op.f('idx_storage_configs_provider'), table_name='storage_configs')
    op.drop_constraint(op.f('unique_storage_name'), 'storage_configs', type_='unique')
    op.create_index(op.f('ix_storage_configs_created_at'), 'storage_configs', ['created_at'], unique=False)
    op.create_index(op.f('ix_storage_configs_is_global'), 'storage_configs', ['is_global'], unique=False)
    op.create_index(op.f('ix_storage_configs_name'), 'storage_configs', ['name'], unique=False)
    op.create_index(op.f('ix_storage_configs_status'), 'storage_configs', ['status'], unique=False)
    op.create_foreign_key(op.f('fk_storage_configs_user_id_users'), 'storage_configs', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('fk_storage_configs_provider_id_storage_providers'), 'storage_configs', 'storage_providers', ['provider_id'], ['id'])
    op.create_foreign_key(op.f('fk_storage_configs_project_id_projects'), 'storage_configs', 'projects', ['project_id'], ['id'])
    op.drop_column('storage_configs', 'configuration')
    op.drop_column('storage_configs', 'allowed_file_types')
    op.drop_column('storage_configs', 'is_active')
    op.drop_column('storage_configs', 'provider')
    op.drop_column('storage_configs', 'secret_access_key_hash')
    op.drop_column('storage_configs', 'is_default')
    op.add_column('user_sessions', sa.Column('device_fingerprint', sa.String(length=255), nullable=True))
    op.add_column('user_sessions', sa.Column('location', sa.String(length=100), nullable=True))
    op.add_column('user_sessions', sa.Column('last_activity_at', sa.DateTime(), nullable=True))
    # Keep user_sessions.id as UUID - no alteration needed'))
    op.alter_column('user_sessions', 'ip_address',
               existing_type=postgresql.INET(),
               type_=sa.String(length=45),
               existing_nullable=True)
    op.alter_column('user_sessions', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('user_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_user_sessions_expires_at'), table_name='user_sessions')
    op.drop_index(op.f('idx_user_sessions_token'), table_name='user_sessions')
    op.drop_index(op.f('idx_user_sessions_user_id'), table_name='user_sessions')
    op.drop_constraint(op.f('user_sessions_refresh_token_key'), 'user_sessions', type_='unique')
    op.drop_constraint(op.f('user_sessions_session_token_key'), 'user_sessions', type_='unique')
    op.create_index(op.f('ix_user_sessions_created_at'), 'user_sessions', ['created_at'], unique=False)
    op.create_index(op.f('ix_user_sessions_expires_at'), 'user_sessions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_user_sessions_ip_address'), 'user_sessions', ['ip_address'], unique=False)
    op.create_index(op.f('ix_user_sessions_is_active'), 'user_sessions', ['is_active'], unique=False)
    op.create_index(op.f('ix_user_sessions_session_token'), 'user_sessions', ['session_token'], unique=True)
    op.drop_column('user_sessions', 'retention_period_days')
    op.drop_column('user_sessions', 'last_activity')
    op.drop_column('user_sessions', 'data_classification')
    op.drop_column('user_sessions', 'refresh_token')
    op.add_column('users', sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column('users', sa.Column('bio', sa.Text(), nullable=True))
    op.add_column('users', sa.Column('location', sa.String(length=100), nullable=True))
    op.add_column('users', sa.Column('website', sa.String(length=200), nullable=True))
    op.add_column('users', sa.Column('password_hash', sa.String(length=255), nullable=True))
    op.add_column('users', sa.Column('is_verified', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('is_admin', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('google_id', sa.String(length=100), nullable=True))
    op.add_column('users', sa.Column('email_verified_at', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('api_requests_count', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('api_requests_limit', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('storage_used_bytes', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('storage_limit_bytes', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('profile_visibility', sa.String(length=20), nullable=True))
    op.add_column('users', sa.Column('email_notifications', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('marketing_emails', sa.Boolean(), nullable=True))
    op.alter_column('users', 'email',
               existing_type=postgresql.CITEXT(),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('users', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('users', 'avatar_url',
               existing_type=sa.TEXT(),
               type_=sa.String(length=500),
               existing_nullable=True)
    # Convert users.role with explicit casting (handle trigger and default separately)
    op.execute("DROP TRIGGER IF EXISTS assign_permissions_trigger ON users")
    op.execute("ALTER TABLE users ALTER COLUMN role DROP DEFAULT")
    op.execute("ALTER TABLE users ALTER COLUMN role TYPE userrole USING 'USER'::userrole")
    op.execute("ALTER TABLE users ALTER COLUMN role SET DEFAULT 'USER'::userrole")
    # Convert users.provider with explicit casting (handle default separately)
    op.execute("ALTER TABLE users ALTER COLUMN provider DROP DEFAULT")
    op.execute("ALTER TABLE users ALTER COLUMN provider TYPE authprovider USING 'LOCAL'::authprovider")
    op.execute("ALTER TABLE users ALTER COLUMN provider SET DEFAULT 'LOCAL'::authprovider")
    op.alter_column('users', 'provider_id',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('users', 'github_id',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'last_login',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index(op.f('idx_users_created_at'), table_name='users')
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.drop_index(op.f('idx_users_github_id'), table_name='users')
    op.drop_index(op.f('idx_users_provider'), table_name='users')
    op.drop_index(op.f('idx_users_provider_id'), table_name='users')
    op.drop_index(op.f('idx_users_role'), table_name='users')
    op.drop_index(op.f('idx_users_username'), table_name='users')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_github_id_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_github_id'), 'users', ['github_id'], unique=True)
    op.create_index(op.f('ix_users_google_id'), 'users', ['google_id'], unique=True)
    op.create_index(op.f('ix_users_is_active'), 'users', ['is_active'], unique=False)
    op.create_index(op.f('ix_users_is_admin'), 'users', ['is_admin'], unique=False)
    op.create_index(op.f('ix_users_is_verified'), 'users', ['is_verified'], unique=False)
    op.create_index(op.f('ix_users_provider'), 'users', ['provider'], unique=False)
    op.create_index(op.f('ix_users_provider_id'), 'users', ['provider_id'], unique=False)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_user_id'), 'users', ['user_id'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_column('users', 'github_username')
    op.drop_column('users', 'access_token')
    op.drop_column('users', 'token_expires_at')
    op.drop_column('users', 'first_name')
    op.drop_column('users', 'api_quota_used')
    op.drop_column('users', 'two_factor_secret')
    op.drop_column('users', 'data_classification')
    op.drop_column('users', 'retention_period_days')
    op.drop_column('users', 'hashed_password')
    op.drop_column('users', 'encryption_required')
    op.drop_column('users', 'api_quota_limit')
    op.drop_column('users', 'password_reset_expires')
    op.drop_column('users', 'last_name')
    op.drop_column('users', 'api_quota_reset_date')
    op.drop_column('users', 'password_reset_token')
    op.drop_column('users', 'refresh_token')
    op.drop_column('users', 'two_factor_enabled')
    op.drop_column('users', 'email_verified')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('email_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('two_factor_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('password_reset_token', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('api_quota_reset_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('password_reset_expires', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('api_quota_limit', sa.INTEGER(), server_default=sa.text('1000'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('encryption_required', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('hashed_password', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('retention_period_days', sa.INTEGER(), server_default=sa.text('2555'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('data_classification', postgresql.ENUM('USER_IDENTITY', 'USER_AUTH', 'PAYMENT_DATA', 'BILLING_INFO', 'PROJECT_METADATA', 'ASSET_METADATA', 'ASSET_BINARIES', 'USER_UPLOADS', 'MODEL_ARTIFACTS', 'TRAINING_DATASETS', 'MODEL_METADATA', 'APPLICATION_LOGS', 'ACCESS_LOGS', 'AUDIT_LOGS', 'SYSTEM_METRICS', 'API_KEYS', 'ENCRYPTION_KEYS', 'TLS_CERTIFICATES', 'VAULT_TOKENS', 'USAGE_ANALYTICS', 'BUSINESS_METRICS', 'PERFORMANCE_METRICS', name='data_classification'), server_default=sa.text("'USER_IDENTITY'::data_classification"), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('two_factor_secret', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('api_quota_used', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('token_expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('github_username', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_user_id'), table_name='users')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_index(op.f('ix_users_provider_id'), table_name='users')
    op.drop_index(op.f('ix_users_provider'), table_name='users')
    op.drop_index(op.f('ix_users_is_verified'), table_name='users')
    op.drop_index(op.f('ix_users_is_admin'), table_name='users')
    op.drop_index(op.f('ix_users_is_active'), table_name='users')
    op.drop_index(op.f('ix_users_google_id'), table_name='users')
    op.drop_index(op.f('ix_users_github_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_github_id_key'), 'users', ['github_id'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_users_username'), 'users', ['username'], unique=False)
    op.create_index(op.f('idx_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('idx_users_provider_id'), 'users', ['provider_id'], unique=False)
    op.create_index(op.f('idx_users_provider'), 'users', ['provider'], unique=False)
    op.create_index(op.f('idx_users_github_id'), 'users', ['github_id'], unique=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.create_index(op.f('idx_users_created_at'), 'users', ['created_at'], unique=False)
    op.alter_column('users', 'last_login',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'github_id',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('users', 'provider_id',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('users', 'provider',
               existing_type=sa.Enum('LOCAL', 'GITHUB', 'GOOGLE', 'DISCORD', name='authprovider'),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True,
               existing_server_default=sa.text("'local'::character varying"))
    op.alter_column('users', 'role',
               existing_type=sa.Enum('ADMIN', 'USER', 'MODERATOR', 'DEVELOPER', name='userrole'),
               type_=postgresql.ENUM('basic_user', 'premium_user', 'admin', 'super_admin', 'ai_user', name='user_role'),
               nullable=True,
               existing_server_default=sa.text("'basic_user'::user_role"))
    op.alter_column('users', 'avatar_url',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.String(length=100),
               type_=postgresql.CITEXT(),
               existing_nullable=False)
    op.drop_column('users', 'marketing_emails')
    op.drop_column('users', 'email_notifications')
    op.drop_column('users', 'profile_visibility')
    op.drop_column('users', 'storage_limit_bytes')
    op.drop_column('users', 'storage_used_bytes')
    op.drop_column('users', 'api_requests_limit')
    op.drop_column('users', 'api_requests_count')
    op.drop_column('users', 'email_verified_at')
    op.drop_column('users', 'google_id')
    op.drop_column('users', 'is_admin')
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'password_hash')
    op.drop_column('users', 'website')
    op.drop_column('users', 'location')
    op.drop_column('users', 'bio')
    op.drop_column('users', 'user_id')
    op.add_column('user_sessions', sa.Column('refresh_token', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('user_sessions', sa.Column('data_classification', postgresql.ENUM('USER_IDENTITY', 'USER_AUTH', 'PAYMENT_DATA', 'BILLING_INFO', 'PROJECT_METADATA', 'ASSET_METADATA', 'ASSET_BINARIES', 'USER_UPLOADS', 'MODEL_ARTIFACTS', 'TRAINING_DATASETS', 'MODEL_METADATA', 'APPLICATION_LOGS', 'ACCESS_LOGS', 'AUDIT_LOGS', 'SYSTEM_METRICS', 'API_KEYS', 'ENCRYPTION_KEYS', 'TLS_CERTIFICATES', 'VAULT_TOKENS', 'USAGE_ANALYTICS', 'BUSINESS_METRICS', 'PERFORMANCE_METRICS', name='data_classification'), server_default=sa.text("'USER_AUTH'::data_classification"), autoincrement=False, nullable=True))
    op.add_column('user_sessions', sa.Column('last_activity', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('user_sessions', sa.Column('retention_period_days', sa.INTEGER(), server_default=sa.text('90'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_user_sessions_session_token'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_is_active'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_ip_address'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_expires_at'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_created_at'), table_name='user_sessions')
    op.create_unique_constraint(op.f('user_sessions_session_token_key'), 'user_sessions', ['session_token'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('user_sessions_refresh_token_key'), 'user_sessions', ['refresh_token'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_user_sessions_user_id'), 'user_sessions', ['user_id'], unique=False)
    op.create_index(op.f('idx_user_sessions_token'), 'user_sessions', ['session_token'], unique=False)
    op.create_index(op.f('idx_user_sessions_expires_at'), 'user_sessions', ['expires_at'], unique=False)
    op.alter_column('user_sessions', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_sessions', 'expires_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('user_sessions', 'ip_address',
               existing_type=sa.String(length=45),
               type_=postgresql.INET(),
               existing_nullable=True)
    op.alter_column('user_sessions', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.drop_column('user_sessions', 'last_activity_at')
    op.drop_column('user_sessions', 'location')
    op.drop_column('user_sessions', 'device_fingerprint')
    op.add_column('storage_configs', sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('storage_configs', sa.Column('secret_access_key_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('storage_configs', sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('storage_configs', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('storage_configs', sa.Column('allowed_file_types', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("ARRAY['*'::text]"), autoincrement=False, nullable=True))
    op.add_column('storage_configs', sa.Column('configuration', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('fk_storage_configs_project_id_projects'), 'storage_configs', type_='foreignkey')
    op.drop_constraint(op.f('fk_storage_configs_provider_id_storage_providers'), 'storage_configs', type_='foreignkey')
    op.drop_constraint(op.f('fk_storage_configs_user_id_users'), 'storage_configs', type_='foreignkey')
    op.drop_index(op.f('ix_storage_configs_status'), table_name='storage_configs')
    op.drop_index(op.f('ix_storage_configs_name'), table_name='storage_configs')
    op.drop_index(op.f('ix_storage_configs_is_global'), table_name='storage_configs')
    op.drop_index(op.f('ix_storage_configs_created_at'), table_name='storage_configs')
    op.create_unique_constraint(op.f('unique_storage_name'), 'storage_configs', ['name'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_storage_configs_provider'), 'storage_configs', ['provider'], unique=False)
    op.create_index(op.f('idx_storage_configs_active'), 'storage_configs', ['is_active'], unique=False)
    op.alter_column('storage_configs', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('storage_configs', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('storage_configs', 'access_key_id',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('storage_configs', 'bucket_name',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('storage_configs', 'endpoint_url',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('storage_configs', 'name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('storage_configs', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.drop_column('storage_configs', 'last_used_at')
    op.drop_column('storage_configs', 'tags')
    op.drop_column('storage_configs', 'config_metadata')
    op.drop_column('storage_configs', 'validation_error')
    op.drop_column('storage_configs', 'last_validation_at')
    op.drop_column('storage_configs', 'is_validated')
    op.drop_column('storage_configs', 'status')
    op.drop_column('storage_configs', 'last_sync_at')
    op.drop_column('storage_configs', 'file_count')
    op.drop_column('storage_configs', 'total_storage_used_bytes')
    op.drop_column('storage_configs', 'transfer_acceleration')
    op.drop_column('storage_configs', 'multipart_chunksize_mb')
    op.drop_column('storage_configs', 'multipart_threshold_mb')
    op.drop_column('storage_configs', 'backup_retention_days')
    op.drop_column('storage_configs', 'auto_backup')
    op.drop_column('storage_configs', 'forbidden_extensions')
    op.drop_column('storage_configs', 'allowed_extensions')
    op.drop_column('storage_configs', 'url_expiry_hours')
    op.drop_column('storage_configs', 'signed_urls')
    op.drop_column('storage_configs', 'public_read')
    op.drop_column('storage_configs', 'encryption_key')
    op.drop_column('storage_configs', 'encryption_enabled')
    op.drop_column('storage_configs', 'file_naming')
    op.drop_column('storage_configs', 'folder_structure')
    op.drop_column('storage_configs', 'base_path')
    op.drop_column('storage_configs', 'cdn_domain')
    op.drop_column('storage_configs', 'custom_domain')
    op.drop_column('storage_configs', 'path_style')
    op.drop_column('storage_configs', 'use_ssl')
    op.drop_column('storage_configs', 'secret_access_key')
    op.drop_column('storage_configs', 'provider_id')
    op.drop_column('storage_configs', 'is_global')
    op.drop_column('storage_configs', 'project_id')
    op.drop_column('storage_configs', 'user_id')
    op.drop_column('storage_configs', 'description')
    op.add_column('projects', sa.Column('status', postgresql.ENUM('active', 'archived', 'deleted', name='project_status'), server_default=sa.text("'active'::project_status"), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('total_size_bytes', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('target_platforms', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('art_style', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('last_activity', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('engine', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('engine_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('documentation_url', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('license', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('total_assets', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('projects_template_id_fkey'), 'projects', 'game_templates', ['template_id'], ['id'])
    op.drop_index(op.f('ix_projects_visibility'), table_name='projects')
    op.drop_index(op.f('ix_projects_slug'), table_name='projects')
    op.drop_index(op.f('ix_projects_name'), table_name='projects')
    op.drop_index(op.f('ix_projects_is_template'), table_name='projects')
    op.drop_index(op.f('ix_projects_is_public'), table_name='projects')
    op.drop_index(op.f('ix_projects_is_featured'), table_name='projects')
    op.drop_index(op.f('ix_projects_is_archived'), table_name='projects')
    op.drop_index(op.f('ix_projects_created_at'), table_name='projects')
    op.drop_index(op.f('ix_projects_category'), table_name='projects')
    op.create_unique_constraint(op.f('projects_slug_key'), 'projects', ['slug'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_projects_template_id'), 'projects', ['template_id'], unique=False)
    op.create_index(op.f('idx_projects_target_platforms'), 'projects', ['target_platforms'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_projects_tags'), 'projects', ['tags'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_projects_status'), 'projects', ['status'], unique=False)
    op.create_index(op.f('idx_projects_slug'), 'projects', ['slug'], unique=False)
    op.create_index(op.f('idx_projects_search'), 'projects', [sa.literal_column("to_tsvector('english'::regconfig, (name::text || ' '::text) || COALESCE(description, ''::text))")], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_projects_owner_id'), 'projects', ['owner_id'], unique=False)
    op.create_index(op.f('idx_projects_genre'), 'projects', ['genre'], unique=False)
    op.create_index(op.f('idx_projects_engine'), 'projects', ['engine'], unique=False)
    op.create_index(op.f('idx_projects_created_at'), 'projects', ['created_at'], unique=False)
    op.alter_column('projects', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('projects', 'demo_url',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('projects', 'repository_url',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('projects', 'genre',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.alter_column('projects', 'tags',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('projects', 'slug',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('projects', 'name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('projects', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.drop_column('projects', 'archived_at')
    op.drop_column('projects', 'published_at')
    op.drop_column('projects', 'collaboration_settings')
    op.drop_column('projects', 'ai_settings')
    op.drop_column('projects', 'project_config')
    op.drop_column('projects', 'is_template')
    op.drop_column('projects', 'is_archived')
    op.drop_column('projects', 'is_featured')
    op.drop_column('projects', 'forks_count')
    op.drop_column('projects', 'stars_count')
    op.drop_column('projects', 'downloads_count')
    op.drop_column('projects', 'views_count')
    op.drop_column('projects', 'thumbnail_url')
    op.drop_column('projects', 'target_platform')
    op.drop_column('projects', 'category')
    op.drop_column('projects', 'visibility')
    op.drop_column('projects', 'summary')
    op.add_column('datasets', sa.Column('column_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('datasets', sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('datasets', sa.Column('file_size', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('datasets', sa.Column('file_path', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('datasets', sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('datasets', sa.Column('data_drift_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True))
    op.add_column('datasets', sa.Column('row_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('fk_datasets_created_by_id_users'), 'datasets', type_='foreignkey')
    op.drop_constraint(op.f('fk_datasets_project_id_projects'), 'datasets', type_='foreignkey')
    op.create_foreign_key(op.f('datasets_project_id_fkey'), 'datasets', 'projects', ['project_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('datasets_created_by_fkey'), 'datasets', 'users', ['created_by'], ['id'])
    op.drop_index(op.f('ix_datasets_status'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_slug'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_project_id'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_organization_id'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_name'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_gdpr_compliant'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_domain'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_dataset_type'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_data_format'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_data_classification'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_created_by_id'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_created_at'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_contains_personal_data'), table_name='datasets')
    op.drop_index('idx_datasets_project_status', table_name='datasets')
    op.drop_index('idx_datasets_owner_type', table_name='datasets')
    op.drop_index('idx_datasets_classification', table_name='datasets')
    op.create_index(op.f('idx_datasets_project_id'), 'datasets', ['project_id'], unique=False)
    op.create_index(op.f('idx_datasets_created_by'), 'datasets', ['created_by'], unique=False)
    op.create_index(op.f('idx_datasets_created_at'), 'datasets', ['created_at'], unique=False)
    op.create_unique_constraint(op.f('datasets_project_id_name_version_key'), 'datasets', ['project_id', 'name', 'version'], postgresql_nulls_not_distinct=False)
    op.alter_column('datasets', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('datasets', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('datasets', 'parent_dataset_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('datasets', 'quality_score',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=3, scale=2),
               existing_nullable=True)
    op.alter_column('datasets', 'data_classification',
               existing_type=sa.Enum('PUBLIC', 'INTERNAL', 'CONFIDENTIAL', 'RESTRICTED', 'PERSONAL_DATA', 'SENSITIVE_PERSONAL_DATA', name='dataclassification'),
               type_=postgresql.ENUM('USER_IDENTITY', 'USER_AUTH', 'PAYMENT_DATA', 'BILLING_INFO', 'PROJECT_METADATA', 'ASSET_METADATA', 'ASSET_BINARIES', 'USER_UPLOADS', 'MODEL_ARTIFACTS', 'TRAINING_DATASETS', 'MODEL_METADATA', 'APPLICATION_LOGS', 'ACCESS_LOGS', 'AUDIT_LOGS', 'SYSTEM_METRICS', 'API_KEYS', 'ENCRYPTION_KEYS', 'TLS_CERTIFICATES', 'VAULT_TOKENS', 'USAGE_ANALYTICS', 'BUSINESS_METRICS', 'PERFORMANCE_METRICS', name='data_classification'),
               nullable=True,
               existing_server_default=sa.text("'TRAINING_DATASETS'::data_classification"))
    op.alter_column('datasets', 'project_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('datasets', 'name',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('datasets', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.drop_column('datasets', 'archived_at')
    op.drop_column('datasets', 'deletion_scheduled_at')
    op.drop_column('datasets', 'last_compliance_check')
    op.drop_column('datasets', 'audit_trail')
    op.drop_column('datasets', 'gdpr_compliant')
    op.drop_column('datasets', 'access_count')
    op.drop_column('datasets', 'last_accessed_at')
    op.drop_column('datasets', 'download_count')
    op.drop_column('datasets', 'lineage_metadata')
    op.drop_column('datasets', 'transformation_applied')
    op.drop_column('datasets', 'source_datasets')
    op.drop_column('datasets', 'error_message')
    op.drop_column('datasets', 'processing_logs')
    op.drop_column('datasets', 'processing_progress')
    op.drop_column('datasets', 'status')
    op.drop_column('datasets', 'data_statistics')
    op.drop_column('datasets', 'sample_data')
    op.drop_column('datasets', 'column_metadata')
    op.drop_column('datasets', 'uniqueness_score')
    op.drop_column('datasets', 'validity_score')
    op.drop_column('datasets', 'consistency_score')
    op.drop_column('datasets', 'completeness_score')
    op.drop_column('datasets', 'compressed_size_bytes')
    op.drop_column('datasets', 'total_size_bytes')
    op.drop_column('datasets', 'file_count')
    op.drop_column('datasets', 'sample_count')
    op.drop_column('datasets', 'encryption_key_id')
    op.drop_column('datasets', 'storage_region')
    op.drop_column('datasets', 'storage_path')
    op.drop_column('datasets', 'storage_bucket')
    op.drop_column('datasets', 'storage_provider')
    op.drop_column('datasets', 'geographical_restrictions')
    op.drop_column('datasets', 'retention_period_days')
    op.drop_column('datasets', 'consent_basis')
    op.drop_column('datasets', 'anonymization_method')
    op.drop_column('datasets', 'contains_personal_data')
    op.drop_column('datasets', 'organization_id')
    op.drop_column('datasets', 'created_by_id')
    op.drop_column('datasets', 'tags')
    op.drop_column('datasets', 'domain')
    op.drop_column('datasets', 'data_format')
    op.drop_column('datasets', 'dataset_type')
    op.drop_column('datasets', 'slug')
    op.add_column('audit_logs', sa.Column('compliance_event', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('retention_required', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('retention_period_days', sa.INTEGER(), server_default=sa.text('2555'), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('gdpr_relevant', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('data_classification', postgresql.ENUM('USER_IDENTITY', 'USER_AUTH', 'PAYMENT_DATA', 'BILLING_INFO', 'PROJECT_METADATA', 'ASSET_METADATA', 'ASSET_BINARIES', 'USER_UPLOADS', 'MODEL_ARTIFACTS', 'TRAINING_DATASETS', 'MODEL_METADATA', 'APPLICATION_LOGS', 'ACCESS_LOGS', 'AUDIT_LOGS', 'SYSTEM_METRICS', 'API_KEYS', 'ENCRYPTION_KEYS', 'TLS_CERTIFICATES', 'VAULT_TOKENS', 'USAGE_ANALYTICS', 'BUSINESS_METRICS', 'PERFORMANCE_METRICS', name='data_classification'), server_default=sa.text("'AUDIT_LOGS'::data_classification"), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('success', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_audit_logs_severity'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_resource_type'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_resource_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_is_sensitive'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_ip_address'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_event_type'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_event_category'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_created_at'), table_name='audit_logs')
    op.create_index(op.f('idx_audit_logs_user_id'), 'audit_logs', ['user_id'], unique=False)
    op.create_index(op.f('idx_audit_logs_timestamp'), 'audit_logs', ['timestamp'], unique=False)
    op.create_index(op.f('idx_audit_logs_resource_type'), 'audit_logs', ['resource_type'], unique=False)
    op.create_index(op.f('idx_audit_logs_action'), 'audit_logs', ['action'], unique=False)
    op.alter_column('audit_logs', 'request_id',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('audit_logs', 'ip_address',
               existing_type=sa.String(length=45),
               type_=postgresql.INET(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'action',
               existing_type=sa.String(length=100),
               type_=postgresql.ENUM('create', 'read', 'update', 'delete', 'login', 'logout', 'export', 'import', name='audit_action'),
               existing_nullable=False)
    op.alter_column('audit_logs', 'resource_name',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('audit_logs', 'resource_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'resource_type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('audit_logs', 'session_id',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('audit_logs', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.drop_column('audit_logs', 'created_at')
    op.drop_column('audit_logs', 'compliance_flags')
    op.drop_column('audit_logs', 'is_sensitive')
    op.drop_column('audit_logs', 'response_status')
    op.drop_column('audit_logs', 'processing_time_ms')
    op.drop_column('audit_logs', 'http_method')
    op.drop_column('audit_logs', 'endpoint')
    op.drop_column('audit_logs', 'event_metadata')
    op.drop_column('audit_logs', 'changes')
    op.drop_column('audit_logs', 'description')
    op.drop_column('audit_logs', 'api_key_id')
    op.drop_column('audit_logs', 'severity')
    op.drop_column('audit_logs', 'event_category')
    op.drop_column('audit_logs', 'event_type')
    op.add_column('assets', sa.Column('is_latest_version', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('assets', sa.Column('parent_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('assets', sa.Column('data_classification', postgresql.ENUM('USER_IDENTITY', 'USER_AUTH', 'PAYMENT_DATA', 'BILLING_INFO', 'PROJECT_METADATA', 'ASSET_METADATA', 'ASSET_BINARIES', 'USER_UPLOADS', 'MODEL_ARTIFACTS', 'TRAINING_DATASETS', 'MODEL_METADATA', 'APPLICATION_LOGS', 'ACCESS_LOGS', 'AUDIT_LOGS', 'SYSTEM_METRICS', 'API_KEYS', 'ENCRYPTION_KEYS', 'TLS_CERTIFICATES', 'VAULT_TOKENS', 'USAGE_ANALYTICS', 'BUSINESS_METRICS', 'PERFORMANCE_METRICS', name='data_classification'), server_default=sa.text("'ASSET_BINARIES'::data_classification"), autoincrement=False, nullable=True))
    op.add_column('assets', sa.Column('type', postgresql.ENUM('model', 'dataset', 'texture', 'audio', 'script', 'config', 'other', name='asset_type'), autoincrement=False, nullable=False))
    op.add_column('assets', sa.Column('uploaded_by', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('assets', sa.Column('file_size', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('assets', sa.Column('encryption_required', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('assets', sa.Column('last_accessed', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('assets', sa.Column('retention_period_days', sa.INTEGER(), server_default=sa.text('1825'), autoincrement=False, nullable=True))
    op.add_column('assets', sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True))
    op.add_column('assets', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('assets', sa.Column('checksum_md5', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
    op.add_column('assets', sa.Column('checksum_sha256', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('assets', sa.Column('original_filename', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('fk_assets_creator_id_users'), 'assets', type_='foreignkey')
    op.create_foreign_key(op.f('assets_parent_id_fkey'), 'assets', 'assets', ['parent_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('assets_uploaded_by_fkey'), 'assets', 'users', ['uploaded_by'], ['id'])
    op.drop_index(op.f('ix_assets_status'), table_name='assets')
    op.drop_index(op.f('ix_assets_name'), table_name='assets')
    op.drop_index(op.f('ix_assets_is_public'), table_name='assets')
    op.drop_index(op.f('ix_assets_is_featured'), table_name='assets')
    op.drop_index(op.f('ix_assets_created_at'), table_name='assets')
    op.drop_index(op.f('ix_assets_category'), table_name='assets')
    op.drop_index(op.f('ix_assets_asset_type'), table_name='assets')
    op.create_index(op.f('idx_assets_uploaded_by'), 'assets', ['uploaded_by'], unique=False)
    op.create_index(op.f('idx_assets_type'), 'assets', ['type'], unique=False)
    op.create_index(op.f('idx_assets_tags'), 'assets', ['tags'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_assets_search'), 'assets', [sa.literal_column("to_tsvector('english'::regconfig, (name::text || ' '::text) || COALESCE(description, ''::text))")], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_assets_project_id'), 'assets', ['project_id'], unique=False)
    op.create_index(op.f('idx_assets_created_at'), 'assets', ['created_at'], unique=False)
    op.alter_column('assets', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('assets', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('assets', 'mime_type',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('assets', 'file_path',
               existing_type=sa.String(length=1000),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('assets', 'project_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('assets', 'tags',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('assets', 'name',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('assets', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.drop_column('assets', 'published_at')
    op.drop_column('assets', 'processed_at')
    op.drop_column('assets', 'user_rating')
    op.drop_column('assets', 'quality_score')
    op.drop_column('assets', 'copyright_notice')
    op.drop_column('assets', 'license_type')
    op.drop_column('assets', 'is_featured')
    op.drop_column('assets', 'is_public')
    op.drop_column('assets', 'like_count')
    op.drop_column('assets', 'view_count')
    op.drop_column('assets', 'bit_rate')
    op.drop_column('assets', 'frame_rate')
    op.drop_column('assets', 'duration_seconds')
    op.drop_column('assets', 'height')
    op.drop_column('assets', 'width')
    op.drop_column('assets', 'generation_time_seconds')
    op.drop_column('assets', 'generation_parameters')
    op.drop_column('assets', 'generation_prompt')
    op.drop_column('assets', 'ai_provider')
    op.drop_column('assets', 'ai_model')
    op.drop_column('assets', 'error_message')
    op.drop_column('assets', 'processing_progress')
    op.drop_column('assets', 'status')
    op.drop_column('assets', 'download_url')
    op.drop_column('assets', 'preview_url')
    op.drop_column('assets', 'thumbnail_url')
    op.drop_column('assets', 'url')
    op.drop_column('assets', 'file_hash')
    op.drop_column('assets', 'file_format')
    op.drop_column('assets', 'file_size_bytes')
    op.drop_column('assets', 'creator_id')
    op.drop_column('assets', 'category')
    op.drop_column('assets', 'asset_type')
    op.add_column('api_keys', sa.Column('data_classification', postgresql.ENUM('USER_IDENTITY', 'USER_AUTH', 'PAYMENT_DATA', 'BILLING_INFO', 'PROJECT_METADATA', 'ASSET_METADATA', 'ASSET_BINARIES', 'USER_UPLOADS', 'MODEL_ARTIFACTS', 'TRAINING_DATASETS', 'MODEL_METADATA', 'APPLICATION_LOGS', 'ACCESS_LOGS', 'AUDIT_LOGS', 'SYSTEM_METRICS', 'API_KEYS', 'ENCRYPTION_KEYS', 'TLS_CERTIFICATES', 'VAULT_TOKENS', 'USAGE_ANALYTICS', 'BUSINESS_METRICS', 'PERFORMANCE_METRICS', name='data_classification'), server_default=sa.text("'API_KEYS'::data_classification"), autoincrement=False, nullable=True))
    op.add_column('api_keys', sa.Column('last_used', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('api_keys', sa.Column('rate_limit', sa.INTEGER(), server_default=sa.text('1000'), autoincrement=False, nullable=True))
    op.add_column('api_keys', sa.Column('key_prefix', sa.VARCHAR(length=10), autoincrement=False, nullable=False))
    op.add_column('api_keys', sa.Column('encryption_required', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('api_keys', sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_api_keys_key_hash'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_is_active'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_expires_at'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_created_at'), table_name='api_keys')
    op.create_index(op.f('idx_api_keys_user_id'), 'api_keys', ['user_id'], unique=False)
    op.create_index(op.f('idx_api_keys_hash'), 'api_keys', ['key_hash'], unique=False)
    op.create_unique_constraint(op.f('api_keys_key_hash_key'), 'api_keys', ['key_hash'], postgresql_nulls_not_distinct=False)
    op.alter_column('api_keys', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('api_keys', 'expires_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('api_keys', 'name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('api_keys', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.drop_column('api_keys', 'updated_at')
    op.drop_column('api_keys', 'last_used_ip')
    op.drop_column('api_keys', 'last_used_at')
    op.drop_column('api_keys', 'total_requests')
    op.drop_column('api_keys', 'rate_limit_per_day')
    op.drop_column('api_keys', 'rate_limit_per_hour')
    op.drop_column('api_keys', 'rate_limit_per_minute')
    op.drop_column('api_keys', 'scopes')
    op.drop_column('api_keys', 'description')
    op.add_column('ai_requests', sa.Column('output_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('ai_requests', sa.Column('request_type', postgresql.ENUM('text_generation', 'image_generation', 'model_training', 'data_analysis', 'code_generation', name='ai_request_type'), autoincrement=False, nullable=False))
    op.add_column('ai_requests', sa.Column('cost_credits', sa.NUMERIC(precision=10, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('ai_requests', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('ai_requests', sa.Column('scheduled_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('ai_requests', sa.Column('priority', sa.INTEGER(), server_default=sa.text('5'), autoincrement=False, nullable=True))
    op.add_column('ai_requests', sa.Column('input_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False))
    op.add_column('ai_requests', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('ai_requests', sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('ai_requests', sa.Column('processing_time_ms', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('ai_requests', sa.Column('result_link', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('fk_ai_requests_asset_id_assets'), 'ai_requests', type_='foreignkey')
    op.drop_constraint(op.f('fk_ai_requests_project_id_projects'), 'ai_requests', type_='foreignkey')
    op.create_foreign_key(op.f('ai_requests_project_id_fkey'), 'ai_requests', 'projects', ['project_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_ai_requests_submitted_at'), table_name='ai_requests')
    op.drop_index(op.f('ix_ai_requests_status'), table_name='ai_requests')
    op.drop_index(op.f('ix_ai_requests_request_id'), table_name='ai_requests')
    op.drop_index(op.f('ix_ai_requests_model_type'), table_name='ai_requests')
    op.drop_index(op.f('ix_ai_requests_batch_id'), table_name='ai_requests')
    op.drop_index(op.f('ix_ai_requests_ai_provider'), table_name='ai_requests')
    op.drop_index(op.f('ix_ai_requests_ai_model'), table_name='ai_requests')
    op.create_index(op.f('idx_ai_requests_user_id'), 'ai_requests', ['user_id'], unique=False)
    op.create_index(op.f('idx_ai_requests_type'), 'ai_requests', ['request_type'], unique=False)
    op.create_index(op.f('idx_ai_requests_status'), 'ai_requests', ['status'], unique=False)
    op.create_index(op.f('idx_ai_requests_project_id'), 'ai_requests', ['project_id'], unique=False)
    op.create_index(op.f('idx_ai_requests_created_at'), 'ai_requests', ['created_at'], unique=False)
    op.alter_column('ai_requests', 'completed_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('ai_requests', 'started_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('ai_requests', 'status',
               existing_type=sa.Enum('PENDING', 'QUEUED', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'TIMEOUT', name='airequeststatus'),
               type_=postgresql.ENUM('pending', 'processing', 'completed', 'failed', 'cancelled', name='ai_request_status'),
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::ai_request_status"))
    op.alter_column('ai_requests', 'project_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('ai_requests', 'user_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('ai_requests', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.drop_column('ai_requests', 'request_metadata')
    op.drop_column('ai_requests', 'api_key_id')
    op.drop_column('ai_requests', 'user_agent')
    op.drop_column('ai_requests', 'client_ip')
    op.drop_column('ai_requests', 'user_feedback')
    op.drop_column('ai_requests', 'user_rating')
    op.drop_column('ai_requests', 'quality_score')
    op.drop_column('ai_requests', 'webhook_url')
    op.drop_column('ai_requests', 'provider_response')
    op.drop_column('ai_requests', 'provider_request_id')
    op.drop_column('ai_requests', 'error_code')
    op.drop_column('ai_requests', 'credits_used')
    op.drop_column('ai_requests', 'actual_cost')
    op.drop_column('ai_requests', 'estimated_cost')
    op.drop_column('ai_requests', 'queue_time_seconds')
    op.drop_column('ai_requests', 'processing_time_seconds')
    op.drop_column('ai_requests', 'submitted_at')
    op.drop_column('ai_requests', 'generated_count')
    op.drop_column('ai_requests', 'output_files')
    op.drop_column('ai_requests', 'output_urls')
    op.drop_column('ai_requests', 'queue_position')
    op.drop_column('ai_requests', 'progress_percentage')
    op.drop_column('ai_requests', 'input_files')
    op.drop_column('ai_requests', 'parameters')
    op.drop_column('ai_requests', 'negative_prompt')
    op.drop_column('ai_requests', 'prompt')
    op.drop_column('ai_requests', 'model_type')
    op.drop_column('ai_requests', 'model_version')
    op.drop_column('ai_requests', 'ai_model')
    op.drop_column('ai_requests', 'ai_provider')
    op.drop_column('ai_requests', 'asset_id')
    op.drop_column('ai_requests', 'batch_id')
    op.drop_column('ai_requests', 'request_id')
    op.add_column('access_tokens', sa.Column('allowed_actions', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=False))
    op.add_column('access_tokens', sa.Column('last_used', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('access_tokens', sa.Column('use_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('access_tokens', sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('access_tokens', sa.Column('token_prefix', sa.VARCHAR(length=10), autoincrement=False, nullable=False))
    op.add_column('access_tokens', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('access_tokens', sa.Column('max_uses', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_access_tokens_token_hash'), table_name='access_tokens')
    op.drop_index(op.f('ix_access_tokens_resource_type'), table_name='access_tokens')
    op.drop_index(op.f('ix_access_tokens_resource_id'), table_name='access_tokens')
    op.drop_index(op.f('ix_access_tokens_is_active'), table_name='access_tokens')
    op.drop_index(op.f('ix_access_tokens_expires_at'), table_name='access_tokens')
    op.create_index(op.f('idx_access_tokens_user_id'), 'access_tokens', ['user_id'], unique=False)
    op.create_index(op.f('idx_access_tokens_resource'), 'access_tokens', ['resource_type', 'resource_id'], unique=False)
    op.create_index(op.f('idx_access_tokens_hash'), 'access_tokens', ['token_hash'], unique=False)
    op.create_index(op.f('idx_access_tokens_expires'), 'access_tokens', ['expires_at'], unique=False)
    op.create_unique_constraint(op.f('access_tokens_token_hash_key'), 'access_tokens', ['token_hash'], postgresql_nulls_not_distinct=False)
    op.alter_column('access_tokens', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('access_tokens', 'expires_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('access_tokens', 'resource_id',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('access_tokens', 'resource_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('access_tokens', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.drop_column('access_tokens', 'last_used_at')
    op.drop_column('access_tokens', 'is_active')
    op.drop_column('access_tokens', 'scopes')
    op.drop_column('access_tokens', 'name')
    op.drop_column('access_tokens', 'token_type')
    op.create_table('user_preferences',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('theme', sa.VARCHAR(length=50), server_default=sa.text("'system'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notifications_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('email_notifications', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('push_notifications', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(length=10), server_default=sa.text("'en'::character varying"), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=100), server_default=sa.text("'UTC'::character varying"), autoincrement=False, nullable=True),
    sa.Column('date_format', sa.VARCHAR(length=20), server_default=sa.text("'YYYY-MM-DD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('time_format', sa.VARCHAR(length=10), server_default=sa.text("'24h'::character varying"), autoincrement=False, nullable=True),
    sa.Column('items_per_page', sa.INTEGER(), server_default=sa.text('25'), autoincrement=False, nullable=True),
    sa.Column('auto_save', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_preferences_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_preferences_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('user_preferences_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_user_preferences_user_id'), 'user_preferences', ['user_id'], unique=False)
    op.create_table('presigned_urls',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('url_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('method', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('access_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('max_accesses', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('presigned_urls_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('presigned_urls_pkey'))
    )
    op.create_index(op.f('idx_presigned_urls_user_id'), 'presigned_urls', ['user_id'], unique=False)
    op.create_index(op.f('idx_presigned_urls_expires'), 'presigned_urls', ['expires_at'], unique=False)
    op.create_table('system_config',
    sa.Column('key', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('system_config_updated_by_fkey')),
    sa.PrimaryKeyConstraint('key', name=op.f('system_config_pkey'))
    )
    op.create_table('compliance_events',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('data_classification', postgresql.ENUM('USER_IDENTITY', 'USER_AUTH', 'PAYMENT_DATA', 'BILLING_INFO', 'PROJECT_METADATA', 'ASSET_METADATA', 'ASSET_BINARIES', 'USER_UPLOADS', 'MODEL_ARTIFACTS', 'TRAINING_DATASETS', 'MODEL_METADATA', 'APPLICATION_LOGS', 'ACCESS_LOGS', 'AUDIT_LOGS', 'SYSTEM_METRICS', 'API_KEYS', 'ENCRYPTION_KEYS', 'TLS_CERTIFICATES', 'VAULT_TOKENS', 'USAGE_ANALYTICS', 'BUSINESS_METRICS', 'PERFORMANCE_METRICS', name='data_classification'), autoincrement=False, nullable=False),
    sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('resource_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('legal_basis', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('purpose', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retention_period', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('automated_decision', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('cross_border_transfer', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('compliance_events_user_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('compliance_events_pkey'))
    )
    op.create_index(op.f('idx_compliance_events_user_id'), 'compliance_events', ['user_id'], unique=False)
    op.create_index(op.f('idx_compliance_events_type'), 'compliance_events', ['event_type'], unique=False)
    op.create_index(op.f('idx_compliance_events_timestamp'), 'compliance_events', ['timestamp'], unique=False)
    op.create_index(op.f('idx_compliance_events_classification'), 'compliance_events', ['data_classification'], unique=False)
    op.create_table('ml_models',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('model_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('framework', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('accuracy', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('loss', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=True),
    sa.Column('training_data_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('hyperparameters', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('is_deployed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('deployment_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('trained_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('training_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('data_classification', postgresql.ENUM('USER_IDENTITY', 'USER_AUTH', 'PAYMENT_DATA', 'BILLING_INFO', 'PROJECT_METADATA', 'ASSET_METADATA', 'ASSET_BINARIES', 'USER_UPLOADS', 'MODEL_ARTIFACTS', 'TRAINING_DATASETS', 'MODEL_METADATA', 'APPLICATION_LOGS', 'ACCESS_LOGS', 'AUDIT_LOGS', 'SYSTEM_METRICS', 'API_KEYS', 'ENCRYPTION_KEYS', 'TLS_CERTIFICATES', 'VAULT_TOKENS', 'USAGE_ANALYTICS', 'BUSINESS_METRICS', 'PERFORMANCE_METRICS', name='data_classification'), server_default=sa.text("'MODEL_ARTIFACTS'::data_classification"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('ml_models_project_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['trained_by'], ['users.id'], name=op.f('ml_models_trained_by_fkey')),
    sa.ForeignKeyConstraint(['training_data_id'], ['assets.id'], name=op.f('ml_models_training_data_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('ml_models_pkey')),
    sa.UniqueConstraint('project_id', 'name', 'version', name=op.f('ml_models_project_id_name_version_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_ml_models_trained_by'), 'ml_models', ['trained_by'], unique=False)
    op.create_index(op.f('idx_ml_models_project_id'), 'ml_models', ['project_id'], unique=False)
    op.create_index(op.f('idx_ml_models_created_at'), 'ml_models', ['created_at'], unique=False)
    op.create_table('user_permissions',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('permission', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('resource_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('granted_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['granted_by'], ['users.id'], name=op.f('user_permissions_granted_by_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_permissions_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_permissions_pkey')),
    sa.UniqueConstraint('user_id', 'permission', 'resource_type', 'resource_id', name=op.f('unique_user_permission'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_user_permissions_user_id'), 'user_permissions', ['user_id'], unique=False)
    op.create_index(op.f('idx_user_permissions_resource'), 'user_permissions', ['resource_type', 'resource_id'], unique=False)
    op.create_index(op.f('idx_user_permissions_permission'), 'user_permissions', ['permission'], unique=False)
    op.create_index(op.f('idx_user_permissions_expires'), 'user_permissions', ['expires_at'], unique=False)
    op.create_table('game_templates',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('engine', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('engine_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('genre', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('template_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('repository_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('documentation_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('thumbnail_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('preview_images', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('detailed_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('features', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('requirements', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('difficulty_level', sa.VARCHAR(length=20), server_default=sa.text("'beginner'::character varying"), autoincrement=False, nullable=True),
    sa.Column('estimated_time_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('file_size_mb', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('downloads', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('rating', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=True),
    sa.Column('review_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('is_featured', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('price_credits', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], name='game_templates_approved_by_fkey'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='game_templates_created_by_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='game_templates_updated_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='game_templates_pkey'),
    sa.UniqueConstraint('slug', name='game_templates_slug_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_game_templates_tags'), 'game_templates', ['tags'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_game_templates_slug'), 'game_templates', ['slug'], unique=False)
    op.create_index(op.f('idx_game_templates_genre'), 'game_templates', ['genre'], unique=False)
    op.create_index(op.f('idx_game_templates_featured'), 'game_templates', ['is_featured'], unique=False)
    op.create_index(op.f('idx_game_templates_engine'), 'game_templates', ['engine'], unique=False)
    op.create_index(op.f('idx_game_templates_category'), 'game_templates', ['category'], unique=False)
    op.create_index(op.f('idx_game_templates_active'), 'game_templates', ['is_active'], unique=False)
    op.create_table('schema_migrations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('version', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('applied_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('applied_by', sa.VARCHAR(length=255), server_default=sa.text('CURRENT_USER'), autoincrement=False, nullable=True),
    sa.Column('execution_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('script_path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('schema_migrations_pkey')),
    sa.UniqueConstraint('version', name=op.f('schema_migrations_version_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_schema_migrations_version'), 'schema_migrations', ['version'], unique=False)
    op.create_index(op.f('idx_schema_migrations_applied_at'), 'schema_migrations', ['applied_at'], unique=False)
    op.create_table('project_collaborators',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), server_default=sa.text("'viewer'::character varying"), autoincrement=False, nullable=True),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('invited_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('invited_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('accepted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['invited_by'], ['users.id'], name=op.f('project_collaborators_invited_by_fkey')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('project_collaborators_project_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('project_collaborators_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('project_collaborators_pkey')),
    sa.UniqueConstraint('project_id', 'user_id', name=op.f('project_collaborators_project_id_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_project_collaborators_user_id'), 'project_collaborators', ['user_id'], unique=False)
    op.create_index(op.f('idx_project_collaborators_project_id'), 'project_collaborators', ['project_id'], unique=False)
    op.drop_index(op.f('ix_model_monitoring_configs_model_version_id'), table_name='model_monitoring_configs')
    op.drop_index(op.f('ix_model_monitoring_configs_is_active'), table_name='model_monitoring_configs')
    op.drop_table('model_monitoring_configs')
    op.drop_index(op.f('ix_drift_events_severity'), table_name='drift_events')
    op.drop_index(op.f('ix_drift_events_model_version_id'), table_name='drift_events')
    op.drop_index(op.f('ix_drift_events_is_resolved'), table_name='drift_events')
    op.drop_index(op.f('ix_drift_events_event_type'), table_name='drift_events')
    op.drop_index(op.f('ix_drift_events_detected_at'), table_name='drift_events')
    op.drop_index('idx_drift_type_severity', table_name='drift_events')
    op.drop_index('idx_drift_model_severity', table_name='drift_events')
    op.drop_index('idx_drift_detected_unresolved', table_name='drift_events')
    op.drop_table('drift_events')
    op.drop_index(op.f('ix_notifications_priority'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_notification_type'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_is_read'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_is_archived'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_created_at'), table_name='notifications')
    op.drop_table('notifications')
    op.drop_index(op.f('ix_model_versions_status'), table_name='model_versions')
    op.drop_index(op.f('ix_model_versions_experiment_id'), table_name='model_versions')
    op.drop_index(op.f('ix_model_versions_created_at'), table_name='model_versions')
    op.drop_index(op.f('ix_model_versions_base_model_id'), table_name='model_versions')
    op.drop_index('idx_unique_model_version', table_name='model_versions')
    op.drop_table('model_versions')
    op.drop_index(op.f('ix_template_ratings_user_id'), table_name='template_ratings')
    op.drop_index(op.f('ix_template_ratings_template_id'), table_name='template_ratings')
    op.drop_index('idx_unique_user_template_rating', table_name='template_ratings')
    op.drop_table('template_ratings')
    op.drop_index(op.f('ix_template_downloads_template_id'), table_name='template_downloads')
    op.drop_index(op.f('ix_template_downloads_ip_address'), table_name='template_downloads')
    op.drop_index('idx_downloads_user_date', table_name='template_downloads')
    op.drop_index('idx_downloads_template_date', table_name='template_downloads')
    op.drop_table('template_downloads')
    op.drop_index(op.f('ix_refunds_refund_number'), table_name='refunds')
    op.drop_index(op.f('ix_refunds_purchase_id'), table_name='refunds')
    op.drop_table('refunds')
    op.drop_index(op.f('ix_payment_transactions_transaction_id'), table_name='payment_transactions')
    op.drop_index(op.f('ix_payment_transactions_status'), table_name='payment_transactions')
    op.drop_index(op.f('ix_payment_transactions_purchase_id'), table_name='payment_transactions')
    op.drop_index(op.f('ix_payment_transactions_provider_transaction_id'), table_name='payment_transactions')
    op.drop_table('payment_transactions')
    op.drop_index(op.f('ix_experiments_status'), table_name='experiments')
    op.drop_index(op.f('ix_experiments_project_id'), table_name='experiments')
    op.drop_index(op.f('ix_experiments_name'), table_name='experiments')
    op.drop_index(op.f('ix_experiments_experiment_type'), table_name='experiments')
    op.drop_index(op.f('ix_experiments_created_by_id'), table_name='experiments')
    op.drop_index(op.f('ix_experiments_created_at'), table_name='experiments')
    op.drop_table('experiments')
    op.drop_index(op.f('ix_dataset_versions_version_hash'), table_name='dataset_versions')
    op.drop_index(op.f('ix_dataset_versions_dataset_id'), table_name='dataset_versions')
    op.drop_table('dataset_versions')
    op.drop_index(op.f('ix_comments_project_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_is_deleted'), table_name='comments')
    op.drop_index(op.f('ix_comments_created_at'), table_name='comments')
    op.drop_index(op.f('ix_comments_asset_id'), table_name='comments')
    op.drop_table('comments')
    op.drop_index(op.f('ix_purchases_template_id'), table_name='purchases')
    op.drop_index(op.f('ix_purchases_status'), table_name='purchases')
    op.drop_index(op.f('ix_purchases_purchase_number'), table_name='purchases')
    op.drop_index(op.f('ix_purchases_invoice_number'), table_name='purchases')
    op.drop_index(op.f('ix_purchases_created_at'), table_name='purchases')
    op.drop_index(op.f('ix_purchases_coupon_code'), table_name='purchases')
    op.drop_index(op.f('ix_purchases_completed_at'), table_name='purchases')
    op.drop_index(op.f('ix_purchases_buyer_id'), table_name='purchases')
    op.drop_index(op.f('ix_purchases_buyer_email'), table_name='purchases')
    op.drop_index('idx_purchases_template_date', table_name='purchases')
    op.drop_index('idx_purchases_status_date', table_name='purchases')
    op.drop_index('idx_purchases_buyer_status', table_name='purchases')
    op.drop_table('purchases')
    op.drop_index(op.f('ix_project_invites_token'), table_name='project_invites')
    op.drop_index(op.f('ix_project_invites_status'), table_name='project_invites')
    op.drop_index(op.f('ix_project_invites_invited_email'), table_name='project_invites')
    op.drop_index(op.f('ix_project_invites_expires_at'), table_name='project_invites')
    op.drop_index(op.f('ix_project_invites_created_at'), table_name='project_invites')
    op.drop_table('project_invites')
    op.drop_index(op.f('ix_project_collaborations_is_active'), table_name='project_collaborations')
    op.drop_index(op.f('ix_project_collaborations_created_at'), table_name='project_collaborations')
    op.drop_table('project_collaborations')
    op.drop_index(op.f('ix_marketplace_listings_template_id'), table_name='marketplace_listings')
    op.drop_index(op.f('ix_marketplace_listings_is_available'), table_name='marketplace_listings')
    op.drop_table('marketplace_listings')
    op.drop_index(op.f('ix_marketplace_analytics_template_id'), table_name='marketplace_analytics')
    op.drop_index(op.f('ix_marketplace_analytics_date'), table_name='marketplace_analytics')
    op.drop_index(op.f('ix_marketplace_analytics_category_id'), table_name='marketplace_analytics')
    op.drop_index('idx_analytics_template_date', table_name='marketplace_analytics')
    op.drop_index('idx_analytics_period_date', table_name='marketplace_analytics')
    op.drop_index('idx_analytics_category_date', table_name='marketplace_analytics')
    op.drop_table('marketplace_analytics')
    op.drop_index(op.f('ix_analytics_session_id'), table_name='analytics')
    op.drop_index(op.f('ix_analytics_ip_address'), table_name='analytics')
    op.drop_index(op.f('ix_analytics_event_type'), table_name='analytics')
    op.drop_index(op.f('ix_analytics_event_name'), table_name='analytics')
    op.drop_index(op.f('ix_analytics_created_at'), table_name='analytics')
    op.drop_index(op.f('ix_analytics_category'), table_name='analytics')
    op.drop_table('analytics')
    op.drop_index(op.f('ix_activity_logs_resource_type'), table_name='activity_logs')
    op.drop_index(op.f('ix_activity_logs_resource_id'), table_name='activity_logs')
    op.drop_index(op.f('ix_activity_logs_project_id'), table_name='activity_logs')
    op.drop_index(op.f('ix_activity_logs_is_public'), table_name='activity_logs')
    op.drop_index(op.f('ix_activity_logs_created_at'), table_name='activity_logs')
    op.drop_index(op.f('ix_activity_logs_category'), table_name='activity_logs')
    op.drop_index(op.f('ix_activity_logs_activity_type'), table_name='activity_logs')
    op.drop_table('activity_logs')
    op.drop_index(op.f('ix_user_consents_created_at'), table_name='user_consents')
    op.drop_index(op.f('ix_user_consents_consent_type'), table_name='user_consents')
    op.drop_table('user_consents')
    op.drop_index(op.f('ix_usage_metrics_resource_type'), table_name='usage_metrics')
    op.drop_index(op.f('ix_usage_metrics_resource_id'), table_name='usage_metrics')
    op.drop_index(op.f('ix_usage_metrics_period_start'), table_name='usage_metrics')
    op.drop_index(op.f('ix_usage_metrics_period_end'), table_name='usage_metrics')
    op.drop_index(op.f('ix_usage_metrics_metric_type'), table_name='usage_metrics')
    op.drop_index(op.f('ix_usage_metrics_created_at'), table_name='usage_metrics')
    op.drop_index(op.f('ix_usage_metrics_aggregation_period'), table_name='usage_metrics')
    op.drop_table('usage_metrics')
    op.drop_index(op.f('ix_templates_template_type'), table_name='templates')
    op.drop_index(op.f('ix_templates_status'), table_name='templates')
    op.drop_index(op.f('ix_templates_slug'), table_name='templates')
    op.drop_index(op.f('ix_templates_name'), table_name='templates')
    op.drop_index(op.f('ix_templates_is_verified'), table_name='templates')
    op.drop_index(op.f('ix_templates_is_public'), table_name='templates')
    op.drop_index(op.f('ix_templates_is_premium'), table_name='templates')
    op.drop_index(op.f('ix_templates_is_marketplace_ready'), table_name='templates')
    op.drop_index(op.f('ix_templates_is_featured'), table_name='templates')
    op.drop_index(op.f('ix_templates_created_at'), table_name='templates')
    op.drop_index(op.f('ix_templates_category_id'), table_name='templates')
    op.drop_table('templates')
    op.drop_index(op.f('ix_system_notifications_user_id'), table_name='system_notifications')
    op.drop_index(op.f('ix_system_notifications_type'), table_name='system_notifications')
    op.drop_index(op.f('ix_system_notifications_sent_at'), table_name='system_notifications')
    op.drop_index(op.f('ix_system_notifications_priority'), table_name='system_notifications')
    op.drop_index(op.f('ix_system_notifications_organization_id'), table_name='system_notifications')
    op.drop_index(op.f('ix_system_notifications_is_read'), table_name='system_notifications')
    op.drop_index(op.f('ix_system_notifications_is_deleted'), table_name='system_notifications')
    op.drop_index(op.f('ix_system_notifications_is_archived'), table_name='system_notifications')
    op.drop_index(op.f('ix_system_notifications_created_at'), table_name='system_notifications')
    op.drop_index(op.f('ix_system_notifications_channel'), table_name='system_notifications')
    op.drop_table('system_notifications')
    op.drop_index(op.f('ix_system_configs_scope_id'), table_name='system_configs')
    op.drop_index(op.f('ix_system_configs_scope'), table_name='system_configs')
    op.drop_index(op.f('ix_system_configs_key'), table_name='system_configs')
    op.drop_index(op.f('ix_system_configs_is_sensitive'), table_name='system_configs')
    op.drop_index(op.f('ix_system_configs_is_active'), table_name='system_configs')
    op.drop_index(op.f('ix_system_configs_created_at'), table_name='system_configs')
    op.drop_index(op.f('ix_system_configs_category'), table_name='system_configs')
    op.drop_table('system_configs')
    op.drop_index(op.f('ix_subscriptions_user_id'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_status'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_plan_type'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_payment_status'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_payment_method_id'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_organization_id'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_is_trial'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_is_deleted'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_is_active'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_invoice_id'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_external_subscription_id'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_external_customer_id'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_created_at'), table_name='subscriptions')
    op.drop_table('subscriptions')
    op.drop_index(op.f('ix_coupon_codes_is_active'), table_name='coupon_codes')
    op.drop_index(op.f('ix_coupon_codes_code'), table_name='coupon_codes')
    op.drop_table('coupon_codes')
    op.drop_index(op.f('ix_template_categories_slug'), table_name='template_categories')
    op.drop_index(op.f('ix_template_categories_name'), table_name='template_categories')
    op.drop_index(op.f('ix_template_categories_is_featured'), table_name='template_categories')
    op.drop_index(op.f('ix_template_categories_is_active'), table_name='template_categories')
    op.drop_index(op.f('ix_template_categories_created_at'), table_name='template_categories')
    op.drop_table('template_categories')
    op.drop_index(op.f('ix_storage_providers_provider_type'), table_name='storage_providers')
    op.drop_index(op.f('ix_storage_providers_name'), table_name='storage_providers')
    op.drop_index(op.f('ix_storage_providers_is_available'), table_name='storage_providers')
    op.drop_index(op.f('ix_storage_providers_is_active'), table_name='storage_providers')
    op.drop_index(op.f('ix_storage_providers_created_at'), table_name='storage_providers')
    op.drop_table('storage_providers')
    op.drop_index(op.f('ix_ai_providers_provider_type'), table_name='ai_providers')
    op.drop_index(op.f('ix_ai_providers_name'), table_name='ai_providers')
    op.drop_index(op.f('ix_ai_providers_is_available'), table_name='ai_providers')
    op.drop_index(op.f('ix_ai_providers_is_active'), table_name='ai_providers')
    op.drop_index(op.f('ix_ai_providers_created_at'), table_name='ai_providers')
    op.drop_table('ai_providers')
    op.drop_index(op.f('ix_ai_models_provider'), table_name='ai_models')
    op.drop_index(op.f('ix_ai_models_name'), table_name='ai_models')
    op.drop_index(op.f('ix_ai_models_model_type'), table_name='ai_models')
    op.drop_index(op.f('ix_ai_models_is_public'), table_name='ai_models')
    op.drop_index(op.f('ix_ai_models_is_beta'), table_name='ai_models')
    op.drop_index(op.f('ix_ai_models_is_active'), table_name='ai_models')
    op.drop_index(op.f('ix_ai_models_created_at'), table_name='ai_models')
    op.drop_index(op.f('ix_ai_models_category'), table_name='ai_models')
    op.drop_table('ai_models')
    # ### end Alembic commands ###
