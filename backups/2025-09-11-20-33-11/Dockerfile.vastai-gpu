# GameForge Vast.ai GPU Dockerfile
# ========================================================================
# Optimized for Vast.ai cloud GPU instances with RTX 4090/3090 support
# ========================================================================

ARG CUDA_VERSION=12.1
ARG PYTORCH_VERSION=2.1.0
ARG UBUNTU_VERSION=22.04
ARG PYTHON_VERSION=3.10

    # ========================================================================
    # Stage 1: Vast.ai CUDA Base with Optimizations  
    # ========================================================================
    FROM nvcr.io/nvidia/pytorch:23.12-py3 AS vastai-base

    # Prevent interactive prompts during build
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Vast.ai optimized NVIDIA environment
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV NVIDIA_REQUIRE_CUDA="cuda>=12.0"
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}

    # Install system dependencies optimized for Vast.ai
    RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        cmake \
        git \
        curl \
        wget \
        unzip \
        vim \
        htop \
        tmux \
        screen \
        rsync \
        openssh-client \
        libssl-dev \
        libffi-dev \
        libjpeg-dev \
        libpng-dev \
        libgl1-mesa-glx \
        libglib2.0-0 \
        libsm6 \
        libxext6 \
        libxrender-dev \
        libgomp1 \
        ca-certificates \
        && rm -rf /var/lib/apt/lists/* \
        && apt-get clean

    # Verify existing PyTorch and CUDA installation
    RUN python -c "import torch; print(f'PyTorch {torch.__version__} with CUDA {torch.version.cuda} available')" \
        && nvidia-smi || echo "nvidia-smi not available in build context"

    # ========================================================================
    # Stage 2: Python Dependencies for Vast.ai GPU Workloads
    # ========================================================================
    FROM vastai-base AS vastai-deps

    # Create and activate virtual environment (use existing Python from base)
    ENV PATH="/opt/conda/bin:$PATH"

    # Upgrade pip and install additional packages
    RUN pip install --upgrade pip setuptools wheel

    # Install Vast.ai optimized GPU libraries (use available versions)
    RUN pip install --no-cache-dir \
        nvidia-ml-py3==7.352.0

    # Install Vast.ai optimized ML/AI libraries (compatible versions)
    RUN pip install --no-cache-dir \
        transformers \
        accelerate \
        datasets \
        tokenizers \
        diffusers \
        peft \
        trl \
        optimum

    # Install training and optimization libraries (compatible versions)
    RUN pip install --no-cache-dir \
        tensorboard \
        wandb \
        mlflow

    # Install production web framework (compatible versions)
    RUN pip install --no-cache-dir \
        fastapi \
        uvicorn[standard] \
        pydantic \
        aiofiles

    # Install database and caching (compatible versions)
    RUN pip install --no-cache-dir \
        psycopg2-binary \
        redis \
        sqlalchemy

    # Copy requirements files
    COPY requirements.txt requirements-vastai.txt* ./

    # Install application-specific requirements
    RUN pip install --no-cache-dir -r requirements.txt && \
        if [ -f requirements-vastai.txt ]; then \
            pip install --no-cache-dir -r requirements-vastai.txt; \
        fi

    # ========================================================================
    # Stage 3: Security and User Setup for Vast.ai
    # ========================================================================
    FROM vastai-deps AS vastai-secure

    # Security: Create non-root user with specific UID/GID
    RUN groupadd -g 1001 gameforge && \
        useradd -u 1001 -g gameforge -m -s /bin/bash gameforge && \
        mkdir -p /home/gameforge/.local/bin

    # Create Vast.ai workspace directories
    RUN mkdir -p \
        /workspace/app \
        /workspace/models \
        /workspace/training_data \
        /workspace/checkpoints \
        /workspace/cache \
        /workspace/logs \
        /workspace/assets \
        /workspace/monitoring && \
        chown -R gameforge:gameforge /workspace

# ========================================================================
# Stage 4: Application Build for Vast.ai
# ========================================================================
FROM vastai-secure AS vastai-build

WORKDIR /build

# Copy application source code
COPY . .

# Compile Python bytecode for performance
RUN python -m compileall -b . && \
    find . -name "*.py" -delete && \
    find . -name "__pycache__" -exec rm -rf {} + || true

# ========================================================================
# Stage 5: Vast.ai Production Runtime
# ========================================================================
FROM vastai-secure AS vastai-production

# Vast.ai production environment variables
ENV GAMEFORGE_ENV=vastai-production
ENV LOG_LEVEL=info
ENV SERVICE_TYPE=vastai-gpu-workload

# Vast.ai CUDA/GPU specific optimizations
ENV CUDA_LAUNCH_BLOCKING=0
ENV CUDA_CACHE_DISABLE=0
ENV PYTORCH_CUDA_ALLOC_CONF="max_split_size_mb:4096,garbage_collection_threshold:0.9,expandable_segments:True"
ENV PYTORCH_JIT=1
ENV PYTORCH_JIT_LOG_LEVEL=ERROR

# Vast.ai memory and performance optimizations
ENV OMP_NUM_THREADS=16
ENV MKL_NUM_THREADS=16
ENV NCCL_DEBUG=WARN
ENV NCCL_TREE_THRESHOLD=0

# Vast.ai specific optimizations
ENV VASTAI_OPTIMIZE_MEMORY=true
ENV VASTAI_ENABLE_TENSORRT=true
ENV VASTAI_MIXED_PRECISION=fp16
ENV VASTAI_CACHE_MODELS=true

# Security environment
ENV PYTHONPATH=/workspace/app
ENV HOME=/home/gameforge
ENV PATH="/home/gameforge/.local/bin:$PATH"

WORKDIR /workspace/app

# Copy compiled application from build stage
COPY --from=vastai-build --chown=gameforge:gameforge /build .

# Create Vast.ai optimized entrypoint script
RUN echo '#!/bin/bash\n\
set -euo pipefail\n\
\n\
echo "=== GameForge Vast.ai GPU Container Startup ==="\n\
echo "User: $(whoami) (UID: $(id -u), GID: $(id -g))"\n\
echo "Environment: $GAMEFORGE_ENV"\n\
echo "Service Type: $SERVICE_TYPE"\n\
echo "Workspace: $PYTHONPATH"\n\
echo "CUDA Path: $CUDA_HOME"\n\
\n\
# Validate environment\n\
if [ "$GAMEFORGE_ENV" != "vastai-production" ]; then\n\
    echo "ERROR: Not in Vast.ai production environment!"\n\
    exit 1\n\
fi\n\
\n\
# Vast.ai GPU Health Check\n\
echo "=== Vast.ai GPU Health Check ==="\n\
if command -v nvidia-smi >/dev/null 2>&1; then\n\
    echo "NVIDIA Driver Status:"\n\
    nvidia-smi --query-gpu=name,memory.total,memory.used,temperature.gpu,utilization.gpu,power.draw --format=csv,noheader,nounits || echo "GPU query failed"\n\
    echo ""\n\
    echo "CUDA Version: $(nvcc --version | grep release | awk \"{print \\$6}\" | cut -d, -f1)" || echo "NVCC not available"\n\
    echo "Driver Version: $(nvidia-smi --query-gpu=driver_version --format=csv,noheader)" || echo "Driver query failed"\n\
else\n\
    echo "ERROR: nvidia-smi not available in Vast.ai instance"\n\
    exit 1\n\
fi\n\
\n\
# Python GPU Check\n\
echo "=== Python GPU Check ==="\n\
python -c "\n\
import torch\n\
print(f\"PyTorch Version: {torch.__version__}\")\n\
print(f\"CUDA Available: {torch.cuda.is_available()}\")\n\
print(f\"CUDA Version: {torch.version.cuda}\")\n\
print(f\"GPU Count: {torch.cuda.device_count()}\")\n\
if torch.cuda.is_available():\n\
    for i in range(torch.cuda.device_count()):\n\
        props = torch.cuda.get_device_properties(i)\n\
        print(f\"GPU {i}: {props.name} ({props.total_memory / 1024**3:.1f} GB)\")\n\
        print(f\"  Compute Capability: {props.major}.{props.minor}\")\n\
        print(f\"  Multiprocessors: {props.multi_processor_count}\")\n\
print(f\"cuDNN Version: {torch.backends.cudnn.version()}\")\n\
print(f\"Tensor Cores Available: {torch.backends.cudnn.is_available()}\")\n\
" || {\n\
    echo "ERROR: GPU not accessible from Python in Vast.ai instance"\n\
    exit 1\n\
}\n\
\n\
# Check TensorRT availability\n\
echo "=== TensorRT Check ==="\n\
python -c "import tensorrt as trt; print(f\"TensorRT Version: {trt.__version__}\")" || echo "TensorRT not available"\n\
\n\
# Validate critical directories\n\
for dir in models training_data checkpoints cache logs assets; do\n\
    if [ ! -w "/workspace/$dir" ]; then\n\
        echo "ERROR: Directory /workspace/$dir is not writable"\n\
        exit 1\n\
    fi\n\
done\n\
\n\
# Display Vast.ai instance info\n\
echo "=== Vast.ai Instance Info ==="\n\
echo "Hostname: $(hostname)"\n\
echo "CPU Cores: $(nproc)"\n\
echo "Memory: $(free -h | grep Mem | awk \"{print \\$2}\")"\n\
echo "Disk Space: $(df -h /workspace | tail -1 | awk \"{print \\$4}\") available"\n\
echo ""\n\
\n\
echo "=== Vast.ai GPU Workload Service Starting ==="\n\
exec "$@"' > /workspace/app/entrypoint-vastai.sh && \
    chmod +x /workspace/app/entrypoint-vastai.sh && \
    chown gameforge:gameforge /workspace/app/entrypoint-vastai.sh

# Security: Switch to non-root user
USER gameforge

# Vast.ai optimized health check
HEALTHCHECK --interval=60s --timeout=30s --start-period=300s --retries=3 \
    CMD python -c "import torch; exit(0 if torch.cuda.is_available() and torch.cuda.device_count() > 0 else 1)" || exit 1

# Expose application ports
EXPOSE 8080 8081 8082

# Security: Set proper entrypoint
ENTRYPOINT ["/workspace/app/entrypoint-vastai.sh"]

# Default command - will be overridden by docker-compose
CMD ["python", "-m", "gameforge.vastai.inference_service"]

# Build metadata
ARG BUILD_DATE
ARG VCS_REF
ARG BUILD_VERSION

LABEL \
    org.label-schema.build-date=$BUILD_DATE \
    org.label-schema.vcs-ref=$VCS_REF \
    org.label-schema.vcs-url="https://github.com/Sandmanmmm/ai-game-production-p" \
    org.label-schema.version=$BUILD_VERSION \
    org.label-schema.schema-version="1.0" \
    org.label-schema.name="gameforge-vastai-gpu" \
    org.label-schema.description="GameForge Vast.ai GPU-optimized container" \
    maintainer="GameForge Team" \
    vastai.enabled="true" \
    vastai.cuda.version="12.1" \
    vastai.pytorch.version="2.1.0" \
    vastai.tensorrt.enabled="true" \
    security.profile="vastai-gpu-workload"
