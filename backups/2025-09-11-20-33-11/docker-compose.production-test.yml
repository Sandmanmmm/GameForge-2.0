# Simplified Production Test - Core Services Only
version: '3.8'

services:
  # Phase 4: Vault Service (Simplified for testing)
  vault:
    image: hashicorp/vault:latest
    container_name: gameforge-vault-test
    hostname: vault
    restart: unless-stopped
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    ports:
      - "127.0.0.1:8200:8200"
    volumes:
      - vault-data:/vault/data
    networks:
      - backend
      - vault-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: ["vault", "server", "-dev", "-dev-root-token-id=${VAULT_ROOT_TOKEN}", "-dev-listen-address=0.0.0.0:8200"]

  # Database for full stack testing
  postgres:
    image: postgres:15.4-alpine
    container_name: gameforge-postgres-test
    hostname: postgres
    restart: unless-stopped
    user: "999:999"
    environment:
      POSTGRES_DB: gameforge_prod
      POSTGRES_USER: gameforge
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend
    ports:
      - "127.0.0.1:15432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gameforge -d gameforge_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching
  redis:
    image: redis:7.2.1-alpine
    container_name: gameforge-redis-test
    hostname: redis
    restart: unless-stopped
    user: "999:999"
    volumes:
      - redis-data:/data
    networks:
      - backend
    ports:
      - "127.0.0.1:16379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  backend:
    driver: bridge
    internal: true
  vault-network:
    driver: bridge

volumes:
  vault-data:
  postgres-data:
  redis-data:
