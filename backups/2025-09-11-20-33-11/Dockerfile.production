# Reproducible build arguments
ARG BUILD_DATE
ARG VCS_REF  
ARG BUILD_VERSION
# GameForge Production Dockerfile - Multi-stage Secure Build
# ========================================================================
# Stage 1: Base Dependencies and System Setup
# ========================================================================
FROM nvcr.io/nvidia/pytorch:23.12-py3 AS base-system

# Prevent interactive prompts during build
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Security: Create non-root user with specific UID/GID
RUN groupadd -g 1001 gameforge && \
    useradd -u 1001 -g gameforge -m -s /bin/bash gameforge && \
    mkdir -p /home/gameforge/.local/bin

# Install minimal system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.10 \
    python3.10-dev \
    python3-pip \
    python3.10-venv \
    curl \
    wget \
    git \
    build-essential \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    ca-certificates \
    gnupg \
    lsb-release \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# ========================================================================
# Stage 2: Python Dependencies Installation
# ========================================================================
FROM base-system AS python-deps

# Create virtual environment
RUN python3.10 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements files
COPY requirements.txt requirements-production.txt* ./

# Install Python dependencies with security considerations
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir --compile -r requirements.txt && \
    if [ -f requirements-production.txt ]; then \
        pip install --no-cache-dir --compile -r requirements-production.txt; \
    fi

# Install production monitoring and security packages
RUN pip install --no-cache-dir --compile \
    gunicorn==21.2.0 \
    uvicorn[standard]==0.23.2 \
    prometheus-client==0.17.1 \
    sentry-sdk==1.32.0 \
    python-multipart==0.0.6 \
    cryptography==41.0.4 \
    bcrypt==4.0.1 \
    passlib==1.7.4 \
    python-jose[cryptography]==3.3.0 \
    celery[redis]==5.3.1 \
    redis==4.6.0

# ========================================================================
# Stage 3: Application Build
# ========================================================================
FROM python-deps AS app-build

WORKDIR /build

# Copy application source code
COPY . .

# Compile Python bytecode for performance
RUN python -m compileall -b . && \
    find . -name "*.py" -delete && \
    find . -name "__pycache__" -exec rm -rf {} + || true

# ========================================================================
# Stage 4: Production Runtime
# ========================================================================
FROM base-system AS production

# Production environment variables
ENV GAMEFORGE_ENV=production
ENV LOG_LEVEL=info
ENV WORKERS=4
ENV MAX_WORKERS=8
ENV WORKER_TIMEOUT=300
ENV KEEPALIVE=2
ENV MAX_REQUESTS=1000
ENV MAX_REQUESTS_JITTER=100

# GPU optimization environment
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
ENV CUDA_LAUNCH_BLOCKING=0

# Security environment
ENV PYTHONPATH=/app
ENV HOME=/home/gameforge
ENV PATH="/home/gameforge/.local/bin:$PATH"

# Copy Python environment from dependencies stage
COPY --from=python-deps --chown=gameforge:gameforge /opt/venv /home/gameforge/.local

# Create application directories with proper permissions
RUN mkdir -p /app/logs /app/cache /app/assets /app/generated_assets /app/models_cache /app/tmp && \
    chown -R gameforge:gameforge /app

WORKDIR /app

# Copy compiled application from build stage
COPY --from=app-build --chown=gameforge:gameforge /build .

# Create entrypoint script with security validation
RUN echo '#!/bin/bash\n\
set -euo pipefail\n\
\n\
echo "=== GameForge Production Container Startup ==="\n\
echo "User: $(whoami) (UID: $(id -u), GID: $(id -g))"\n\
echo "Environment: $GAMEFORGE_ENV"\n\
echo "Python Path: $PYTHONPATH"\n\
echo "Workers: $WORKERS"\n\
\n\
# Validate environment\n\
if [ "$GAMEFORGE_ENV" != "production" ]; then\n\
    echo "ERROR: Not in production environment!"\n\
    exit 1\n\
fi\n\
\n\
# Check GPU availability\n\
echo "GPU Status:"\n\
if command -v nvidia-smi >/dev/null 2>&1; then\n\
    nvidia-smi --query-gpu=name,memory.total,memory.used --format=csv,noheader || echo "GPU check failed"\n\
else\n\
    echo "nvidia-smi not available"\n\
fi\n\
\n\
# Validate critical directories\n\
for dir in logs cache generated_assets models_cache; do\n\
    if [ ! -w "/app/$dir" ]; then\n\
        echo "ERROR: Directory /app/$dir is not writable"\n\
        exit 1\n\
    fi\n\
done\n\
\n\
echo "=== Starting Application ==="\n\
exec "$@"' > /app/entrypoint.sh && \
    chmod +x /app/entrypoint.sh && \
    chown gameforge:gameforge /app/entrypoint.sh

# Security: Switch to non-root user
USER gameforge

# Health check with comprehensive validation
HEALTHCHECK --interval=30s --timeout=15s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose application port
EXPOSE 8080

# Security: Set proper entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]

# Production command with optimized settings
CMD ["gunicorn", \
     "--bind", "0.0.0.0:8080", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--worker-timeout", "300", \
     "--keepalive", "2", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--preload", \
     "--user", "gameforge", \
     "--group", "gameforge", \
     "--access-logfile", "/app/logs/access.log", \
     "--error-logfile", "/app/logs/error.log", \
     "--log-level", "info", \
     "--capture-output", \
     "gameforge_production_server:app"]

