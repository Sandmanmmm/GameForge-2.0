# GameForge Production Docker Compose
# ========================================================================
# Optimized for production deployment with minimal build overhead
# ========================================================================

version: '3.8'

# ========================================================================
# Production Security Templates
# ========================================================================
x-production-security: &production-security
  user: "1001:1001"
  read_only: true
  tmpfs:
    - /tmp:size=2G,mode=1777
    - /app/tmp:noexec,nosuid,size=1G
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL

# ========================================================================
# Production Resource Templates
# ========================================================================
x-production-resources: &production-resources
  deploy:
    resources:
      limits:
        memory: 16G
        cpus: '6.0'
        pids: 1000
      reservations:
        memory: 8G
        cpus: '3.0'
    restart_policy:
      condition: on-failure
      delay: 15s
      max_attempts: 5

# ========================================================================
# Services
# ========================================================================
services:
  # ========================================================================
  # GameForge GPU Inference Service
  # ========================================================================
  gameforge-gpu:
    build:
      context: .
      dockerfile: Dockerfile.production-optimized
      target: gameforge-app
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: gameforge-gpu-production
    hostname: gameforge-gpu
    <<: [*production-security, *production-resources]
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=0
      - MODEL_CACHE_DIR=/app/models
      - MAX_CONCURRENT_REQUESTS=10
      - WORKER_PROCESSES=4
    volumes:
      - gameforge-models:/app/models:rw
      - gameforge-outputs:/app/outputs:rw
      - gameforge-logs:/app/logs:rw
    networks:
      - gameforge-production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 60s
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 30s

  # ========================================================================
  # PostgreSQL Database
  # ========================================================================
  postgres:
    image: postgres:17.4-alpine
    container_name: gameforge-postgres-production
    hostname: postgres
    <<: *production-security
    user: "70:70"  # postgres user
    environment:
      - POSTGRES_DB=gameforge_production
      - POSTGRES_USER=gameforge_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw
      - postgres-backups:/backups:rw
    networks:
      - gameforge-production
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gameforge_user -d gameforge_production"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ========================================================================
  # Redis Cache
  # ========================================================================
  redis:
    image: redis:7.2-alpine
    container_name: gameforge-redis-production
    hostname: redis
    <<: *production-security
    user: "999:999"  # redis user
    command: redis-server --appendonly yes --maxmemory 4gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data:rw
    networks:
      - gameforge-production
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ========================================================================
  # Monitoring Stack
  # ========================================================================
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: gameforge-prometheus
    hostname: prometheus
    <<: *production-security
    user: "65534:65534"  # nobody user
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus:rw
    networks:
      - gameforge-production
    ports:
      - "9090:9090"
    depends_on:
      - gameforge-gpu

  grafana:
    image: grafana/grafana:10.2.0
    container_name: gameforge-grafana
    hostname: grafana
    <<: *production-security
    user: "472:472"  # grafana user
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana:rw
      - ./monitoring/grafana/:/etc/grafana/provisioning/:ro
    networks:
      - gameforge-production
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

# ========================================================================
# Networks
# ========================================================================
networks:
  gameforge-production:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ========================================================================
# Volumes
# ========================================================================
volumes:
  gameforge-models:
    driver: local
  gameforge-outputs:
    driver: local
  gameforge-logs:
    driver: local
  postgres-data:
    driver: local
  postgres-backups:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
