# GameForge Production Stack - Enterprise Security & Monitoring
# ========================================================================
# Complete production deployment with security hardening, monitoring,
# and automated operations for enterprise-grade GameForge deployment
# ========================================================================
version: '3.8'

# ========================================================================
# Shared Configuration Templates
# ========================================================================
x-common-variables: &common-variables
  GAMEFORGE_ENV: production
  LOG_LEVEL: info
  TZ: UTC
  PYTHONPATH: /app

x-security-context: &security-context
  security_opt:
    - no-new-privileges:true
    - seccomp:unconfined  # Required for GPU access
  cap_drop:
    - ALL
  cap_add:
    - NET_BIND_SERVICE
    - CHOWN
    - SETUID
    - SETGID

x-logging-config: &logging-config
  driver: "json-file"
  options:
    max-size: "50m"
    max-file: "5"
    labels: "service,environment"

x-restart-policy: &restart-policy
  restart: unless-stopped

services:
  # ======================================================================
  # Load Balancer & SSL Termination (Nginx)
  # ======================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: gameforge-nginx
    <<: *restart-policy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/dhparam.pem:/etc/nginx/dhparam.pem:ro
      - ./static:/var/www/static:ro
      - nginx_logs:/var/log/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=4096
    depends_on:
      gameforge-api:
        condition: service_healthy
    networks:
      - gameforge-frontend
      - gameforge-backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    <<: *security-context
    logging: *logging-config

  # ======================================================================
  # GameForge API Service (GPU-Optimized)
  # ======================================================================
  gameforge-api:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    image: gameforge-api:production
    container_name: gameforge-api
    <<: *restart-policy
    environment:
      <<: *common-variables
      DATABASE_URL: postgresql://gameforge:${DB_PASSWORD}@postgres:5432/gameforge_production
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      REPLICATE_API_TOKEN: ${REPLICATE_API_TOKEN}
      SENTRY_DSN: ${SENTRY_DSN}
      PROMETHEUS_METRICS_PORT: 8081
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
    volumes:
      - ./generated_assets:/app/generated_assets
      - api_logs:/app/logs
      - model_cache:/app/models_cache
      - ./config:/app/config:ro
    tmpfs:
      - /app/tmp:size=2G,noexec,nosuid,nodev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gameforge-backend
    ports:
      - "8081:8081"  # Metrics endpoint
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 12G
          cpus: '6.0'
        reservations:
          memory: 8G
          cpus: '4.0'
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    user: "1001:1001"
    read_only: false  # Required for model caching
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined  # Required for GPU
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging: *logging-config

  # ======================================================================
  # Background Workers for AI Processing
  # ======================================================================
  gameforge-worker:
    image: gameforge-api:production
    container_name: gameforge-worker-${WORKER_ID:-1}
    <<: *restart-policy
    environment:
      <<: *common-variables
      DATABASE_URL: postgresql://gameforge:${DB_PASSWORD}@postgres:5432/gameforge_production
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      WORKER_MODE: "true"
      WORKER_ID: ${WORKER_ID:-1}
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - ./generated_assets:/app/generated_assets
      - worker_logs:/app/logs
      - model_cache:/app/models_cache
      - ./config:/app/config:ro
    tmpfs:
      - /app/tmp:size=1G,noexec,nosuid,nodev
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      gameforge-api:
        condition: service_healthy
    networks:
      - gameforge-backend
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: ["celery", "worker", "-A", "gameforge_server.celery_app", 
              "--loglevel=info", "--concurrency=2", "--prefetch-multiplier=1",
              "--max-tasks-per-child=100", "--time-limit=3600"]
    user: "1001:1001"
    read_only: false  # Required for model caching
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined  # Required for GPU
    cap_drop:
      - ALL
    logging: *logging-config

  # ======================================================================
  # PostgreSQL Database with Backup Integration
  # ======================================================================
  postgres:
    image: postgres:15-alpine
    container_name: gameforge-postgres
    <<: *restart-policy
    environment:
      POSTGRES_DB: gameforge_production
      POSTGRES_USER: gameforge
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      PGUSER: gameforge
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql:ro
    networks:
      - gameforge-backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d gameforge_production -U gameforge"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=1GB
      -c effective_cache_size=3GB
      -c maintenance_work_mem=256MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    <<: *security-context
    logging: *logging-config

  # ======================================================================
  # Redis for Job Queuing and Caching
  # ======================================================================
  redis:
    image: redis:7.2-alpine
    container_name: gameforge-redis
    <<: *restart-policy
    environment:
      REDIS_REPLICATION_MODE: master
    volumes:
      - redis_data:/data
      - ./redis/redis.production.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - gameforge-backend
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --appendonly yes
      --maxmemory 3gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 300
      --databases 16
    <<: *security-context
    logging: *logging-config

  # ======================================================================
  # Monitoring Stack - Prometheus
  # ======================================================================
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: gameforge-prometheus
    <<: *restart-policy
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=http://localhost:9090/'
    networks:
      - gameforge-backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    <<: *security-context
    logging: *logging-config

  # ======================================================================
  # Monitoring Stack - Grafana
  # ======================================================================
  grafana:
    image: grafana/grafana:10.2.0
    container_name: gameforge-grafana
    <<: *restart-policy
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SECURITY_ADMIN_USER: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel,redis-datasource
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - gameforge-backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    <<: *security-context
    logging: *logging-config

  # ======================================================================
  # Log Aggregation - Elasticsearch
  # ======================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: gameforge-elasticsearch
    <<: *restart-policy
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
      - cluster.name=gameforge-logs
      - bootstrap.memory_lock=true
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - gameforge-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    <<: *security-context
    logging: *logging-config

  # ======================================================================
  # Automated Backup Service
  # ======================================================================
  backup:
    image: postgres:15-alpine
    container_name: gameforge-backup
    <<: *restart-policy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: gameforge_production
      POSTGRES_USER: gameforge
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      S3_BUCKET: ${S3_BACKUP_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-west-2}
      BACKUP_SCHEDULE: "0 2 * * *"
      BACKUP_RETENTION_DAYS: 15
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup-production.sh:/backup.sh:ro
      - ./scripts/restore-production.sh:/restore.sh:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gameforge-backend
    command: |
      sh -c "
      echo 'Installing backup dependencies...'
      apk add --no-cache aws-cli curl
      echo 'Starting backup scheduler...'
      while true; do
        echo '[$(date)] Running scheduled backup...'
        /backup.sh
        echo '[$(date)] Backup complete. Next backup in 24 hours.'
        sleep 86400
      done
      "
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    <<: *security-context
    logging: *logging-config

# ========================================================================
# Persistent Data Volumes
# ========================================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/backups
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  model_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/models
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/elasticsearch
  api_logs:
    driver: local
  worker_logs:
    driver: local
  nginx_logs:
    driver: local

# ========================================================================
# Network Configuration
# ========================================================================
networks:
  gameforge-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/24
          gateway: 172.28.0.1
    driver_opts:
      com.docker.network.bridge.name: gameforge-frontend
  gameforge-backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.29.0.0/24
          gateway: 172.29.0.1
    driver_opts:
      com.docker.network.bridge.name: gameforge-backend
