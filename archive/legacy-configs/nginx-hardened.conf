
# GameForge AI - Hardened Nginx Configuration
# Production-ready with security headers, rate limiting, and mTLS

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Hide Nginx version
    server_tokens off;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:;" always;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=gpu:10m rate=2r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # JSON logging format
    log_format json_combined escape=json
    '{'
        '"time_local":"$time_local",'
        '"remote_addr":"$remote_addr",'
        '"remote_user":"$remote_user",'
        '"request":"$request",'
        '"status": "$status",'
        '"body_bytes_sent":"$body_bytes_sent",'
        '"request_time":"$request_time",'
        '"http_referrer":"$http_referer",'
        '"http_user_agent":"$http_user_agent",'
        '"upstream_addr":"$upstream_addr",'
        '"upstream_status":"$upstream_status",'
        '"upstream_response_time":"$upstream_response_time",'
        '"ssl_protocol":"$ssl_protocol",'
        '"ssl_cipher":"$ssl_cipher"'
    '}';

    access_log /var/log/nginx/access.log json_combined;
    error_log /var/log/nginx/error.log warn;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/x-javascript
        application/xml+rss
        application/json;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 10m;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # mTLS configuration
    ssl_verify_client optional;
    ssl_client_certificate /etc/nginx/certs/ca-cert.pem;
    ssl_trusted_certificate /etc/nginx/certs/ca-cert.pem;

    # Upstream servers
    upstream gameforge_app {
        server gameforge-app:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream gpu_inference {
        server gpu-inference:8000 max_fails=3 fail_timeout=60s;
        keepalive 16;
    }

    upstream prometheus {
        server prometheus:9090 max_fails=2 fail_timeout=30s;
    }

    upstream grafana {
        server grafana:3000 max_fails=2 fail_timeout=30s;
    }

    # Block common attack patterns
    map $request_uri $blocked {
        ~*\.(php|asp|aspx|jsp)$ 1;
        ~*/wp-admin.* 1;
        ~*/wp-login.* 1;
        ~*/phpMyAdmin.* 1;
        ~*/admin.* 1;
        default 0;
    }

    # Main server block (HTTPS)
    server {
        listen 443 ssl http2;
        server_name localhost;

        # Connection limiting
        limit_conn addr 10;

        # SSL certificates
        ssl_certificate /etc/nginx/certs/server-cert.pem;
        ssl_certificate_key /etc/nginx/certs/server-key.pem;

        # Block malicious requests
        if ($blocked = 1) {
            return 444;
        }

        # Block requests with no User-Agent
        if ($http_user_agent = "") {
            return 444;
        }

        # Health check endpoint (no rate limiting)
        location = /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Internal monitoring endpoints (require mTLS)
        location /monitoring/ {
            # Require valid client certificate
            if ($ssl_client_verify != SUCCESS) {
                return 403;
            }
            
            auth_basic "Monitoring Access";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            location /monitoring/prometheus/ {
                proxy_pass http://prometheus/;
                include /etc/nginx/proxy_params;
            }
            
            location /monitoring/grafana/ {
                proxy_pass http://grafana/;
                include /etc/nginx/proxy_params;
            }
        }

        # API authentication endpoints (strict rate limiting)
        location /api/auth/ {
            limit_req zone=login burst=3 nodelay;
            proxy_pass http://gameforge_app;
            include /etc/nginx/proxy_params;
        }

        # API endpoints (moderate rate limiting)
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://gameforge_app;
            include /etc/nginx/proxy_params;
        }

        # GPU inference endpoints (low rate limiting, high timeout)
        location /gpu/ {
            limit_req zone=gpu burst=5 nodelay;
            proxy_pass http://gpu_inference/;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            proxy_send_timeout 300s;
            include /etc/nginx/proxy_params;
        }

        # Static content (cached)
        location /static/ {
            limit_req zone=general burst=10 nodelay;
            proxy_pass http://gameforge_app;
            proxy_cache_valid 200 1h;
            expires 1h;
            add_header Cache-Control "public, immutable";
            include /etc/nginx/proxy_params;
        }

        # Default application routes
        location / {
            limit_req zone=general burst=10 nodelay;
            proxy_pass http://gameforge_app;
            include /etc/nginx/proxy_params;
        }
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name localhost;
        return 301 https://$server_name$request_uri;
    }

    # Internal services (only accessible within Docker network)
    server {
        listen 8080;
        server_name internal;
        
        # Only allow internal network access
        allow 172.16.0.0/12;
        allow 10.0.0.0/8;
        allow 192.168.0.0/16;
        deny all;

        location /internal/health {
            proxy_pass http://gameforge_app/health;
        }

        location /internal/metrics {
            proxy_pass http://gameforge_app/metrics;
        }
    }
}
