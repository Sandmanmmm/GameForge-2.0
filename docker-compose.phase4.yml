version: '3.8'

# GameForge Production Phase 4 - Model Asset Security Testing Environment
# This compose file provides comprehensive testing for secure model management

services:
  # HashiCorp Vault for secret management
  vault:
    image: hashicorp/vault:latest
    container_name: gameforge-vault-phase4
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "dev-token-123"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
      VAULT_ADDR: "http://0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    networks:
      - gameforge-phase4
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MinIO S3-compatible storage for model assets
  minio:
    image: minio/minio:latest
    container_name: gameforge-minio-phase4
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: "gameforge-access"
      MINIO_SECRET_KEY: "gameforge-secret-key-123"
      MINIO_DEFAULT_BUCKETS: "gameforge-models"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - gameforge-phase4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GameForge Application - Phase 4 with Model Security
  gameforge-app:
    build:
      context: .
      dockerfile: Dockerfile.production.enhanced
      target: production
      args:
        BUILD_ENV: phase4-testing
        ENABLE_GPU: "true"
    container_name: gameforge-app-phase4
    depends_on:
      vault:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "8080:8080"
      - "8443:8443"
    environment:
      # Application Configuration
      GAMEFORGE_ENV: "phase4-testing"
      DEBUG: "false"
      
      # Phase 4 Security Configuration
      MODEL_SECURITY_ENABLED: "true"
      SECURITY_SCAN_ENABLED: "true"
      STRICT_MODEL_SECURITY: "true"
      VAULT_HEALTH_CHECK_ENABLED: "true"
      PERFORMANCE_MONITORING_ENABLED: "true"
      
      # Vault Configuration
      VAULT_ADDR: "http://vault:8200"
      VAULT_TOKEN: "dev-token-123"
      VAULT_NAMESPACE: "gameforge"
      
      # Model Storage Configuration
      MODEL_STORAGE_BACKEND: "s3"
      AWS_ENDPOINT_URL: "http://minio:9000"
      AWS_ACCESS_KEY_ID: "gameforge-access"
      AWS_SECRET_ACCESS_KEY: "gameforge-secret-key-123"
      AWS_REGION: "us-east-1"
      AWS_S3_BUCKET: "gameforge-models"
      
      # Model Management
      REQUIRED_MODELS: "base-model.safetensors"
      MODEL_CACHE_DIR: "/tmp/models"
      
      # Resource Limits for Testing
      MEMORY_LIMIT: "4g"
      CPU_LIMIT: "2"
    
    volumes:
      # Mount scripts for development/testing
      - ./scripts:/app/scripts:ro
      
      # Temporary model storage
      - model_cache:/tmp/models
      
      # Monitoring data
      - monitoring_data:/tmp/monitoring
    
    networks:
      - gameforge-phase4
    
    # Resource constraints for testing
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    
    # Enhanced security settings
    security_opt:
      - no-new-privileges:true
    
    read_only: false  # Allow temporary file creation for models
    
    tmpfs:
      - /tmp:size=2G,mode=1777
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Vault Configuration Container
  vault-config:
    image: hashicorp/vault:latest
    container_name: gameforge-vault-config-phase4
    depends_on:
      vault:
        condition: service_healthy
    environment:
      VAULT_ADDR: "http://vault:8200"
      VAULT_TOKEN: "dev-token-123"
    networks:
      - gameforge-phase4
    command: |
      sh -c "
        echo 'Configuring Vault for GameForge Phase 4...'
        
        # Enable KV secrets engine
        vault secrets enable -version=2 -path=gameforge kv
        
        # Enable AWS secrets engine for dynamic credentials
        vault secrets enable aws
        
        # Configure AWS secrets engine (using MinIO for testing)
        vault write aws/config/root \
          access_key=gameforge-access \
          secret_key=gameforge-secret-key-123 \
          region=us-east-1
        
        # Create role for model access
        vault write aws/roles/gameforge-model-reader \
          credential_type=iam_user \
          policy_document='{
            \"Version\": \"2012-10-17\",
            \"Statement\": [
              {
                \"Effect\": \"Allow\",
                \"Action\": [
                  \"s3:GetObject\",
                  \"s3:ListBucket\"
                ],
                \"Resource\": [
                  \"arn:aws:s3:::gameforge-models\",
                  \"arn:aws:s3:::gameforge-models/*\"
                ]
              }
            ]
          }'
        
        # Store model metadata
        vault kv put gameforge/models/base-model.safetensors \
          s3_bucket=gameforge-models \
          s3_key=models/base-model.safetensors \
          checksum=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 \
          size_bytes=1073741824 \
          encryption_key=test-encryption-key-256bit
        
        echo 'Vault configuration completed!'
      "
    restart: "no"

  # Model Upload Helper (for testing)
  model-uploader:
    image: minio/mc:latest
    container_name: gameforge-model-uploader-phase4
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - gameforge-phase4
    command: |
      sh -c "
        echo 'Setting up MinIO and uploading test models...'
        
        # Configure MinIO client
        mc alias set gameforge-minio http://minio:9000 gameforge-access gameforge-secret-key-123
        
        # Create bucket
        mc mb gameforge-minio/gameforge-models
        
        # Create a dummy model file for testing
        dd if=/dev/zero of=/tmp/base-model.safetensors bs=1M count=1
        
        # Upload model
        mc cp /tmp/base-model.safetensors gameforge-minio/gameforge-models/models/
        
        # Set up encryption (simulate encrypted storage)
        echo 'Test model uploaded successfully!'
      "
    restart: "no"

  # Security Scanner for Phase 4 Validation
  security-scanner:
    image: aquasec/trivy:latest
    container_name: gameforge-security-scanner-phase4
    depends_on:
      - gameforge-app
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - scanner_cache:/root/.cache/trivy
    networks:
      - gameforge-phase4
    command: |
      sh -c "
        echo 'Running Phase 4 security scan...'
        
        # Wait for application container
        sleep 30
        
        # Scan the built image
        trivy image --severity HIGH,CRITICAL gameforge-ai-phase4:latest
        
        # Check for model files in image
        echo 'Checking for baked model files...'
        docker run --rm gameforge-ai-phase4:latest find /app -name '*.safetensors' -o -name '*.bin' -o -name '*.pt' || echo 'No model files found - Phase 4 compliant!'
        
        echo 'Security scan completed!'
      "
    restart: "no"

networks:
  gameforge-phase4:
    driver: bridge
    name: gameforge-phase4-network

volumes:
  minio_data:
    name: gameforge-minio-data-phase4
  
  model_cache:
    name: gameforge-model-cache-phase4
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=2G,mode=1777
  
  monitoring_data:
    name: gameforge-monitoring-phase4
  
  scanner_cache:
    name: gameforge-scanner-cache-phase4
