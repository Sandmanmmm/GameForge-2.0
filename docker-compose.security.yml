version: '3.8'

services:
  # Trivy Scanner Server
  trivy-server:
    image: aquasec/trivy:latest
    container_name: trivy-server
    command: server --listen 0.0.0.0:4954
    ports:
      - "4954:4954"
    volumes:
      - trivy-cache:/root/.cache/trivy
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - security-network
    restart: unless-stopped

  # Clair Scanner
  clair:
    image: quay.io/coreos/clair:latest
    container_name: clair
    ports:
      - "6060:6060"
      - "6061:6061"
    volumes:
      - ./security/configs/clair-config.yaml:/config/config.yaml:ro
    command: ["-config", "/config/config.yaml"]
    depends_on:
      - clair-postgres
    networks:
      - security-network
    restart: unless-stopped

  # Clair Database
  clair-postgres:
    image: postgres:13
    container_name: clair-postgres
    environment:
      POSTGRES_DB: clair
      POSTGRES_USER: clair
      POSTGRES_PASSWORD: ${CLAIR_DB_PASSWORD}
    volumes:
      - clair-db:/var/lib/postgresql/data
    networks:
      - security-network
    restart: unless-stopped

  # Harbor Registry with Security Scanning
  harbor-core:
    image: goharbor/harbor-core:v2.9.0
    container_name: harbor-core
    environment:
      CORE_SECRET: ${HARBOR_CORE_SECRET}
      JOBSERVICE_SECRET: ${HARBOR_JOBSERVICE_SECRET}
    ports:
      - "8080:8080"
    volumes:
      - harbor-data:/data
      - ./security/configs/harbor-app.conf:/etc/core/app.conf:ro
    depends_on:
      - harbor-postgres
      - harbor-redis
    networks:
      - security-network
    restart: unless-stopped

  # Harbor Database
  harbor-postgres:
    image: goharbor/harbor-db:v2.9.0
    container_name: harbor-postgres
    environment:
      POSTGRES_PASSWORD: ${HARBOR_DB_PASSWORD}
    volumes:
      - harbor-db:/var/lib/postgresql/data
    networks:
      - security-network
    restart: unless-stopped

  # Harbor Redis
  harbor-redis:
    image: goharbor/redis-photon:v2.9.0
    container_name: harbor-redis
    volumes:
      - harbor-redis:/var/lib/redis
    networks:
      - security-network
    restart: unless-stopped

  # DefectDojo for Vulnerability Management
  defectdojo:
    image: defectdojo/defectdojo-django:latest
    container_name: defectdojo
    environment:
      DD_DATABASE_URL: postgresql://defectdojo:${DEFECTDOJO_DB_PASSWORD}@defectdojo-postgres:5432/defectdojo
      DD_SECRET_KEY: ${DEFECTDOJO_SECRET_KEY}
      DD_CREDENTIAL_AES_256_KEY: ${DEFECTDOJO_AES_KEY}
    ports:
      - "8000:8000"
    volumes:
      - defectdojo-media:/app/media
    depends_on:
      - defectdojo-postgres
      - defectdojo-redis
    networks:
      - security-network
    restart: unless-stopped

  # DefectDojo Database
  defectdojo-postgres:
    image: postgres:13
    container_name: defectdojo-postgres
    environment:
      POSTGRES_DB: defectdojo
      POSTGRES_USER: defectdojo
      POSTGRES_PASSWORD: ${DEFECTDOJO_DB_PASSWORD}
    volumes:
      - defectdojo-db:/var/lib/postgresql/data
    networks:
      - security-network
    restart: unless-stopped

  # DefectDojo Redis
  defectdojo-redis:
    image: redis:6
    container_name: defectdojo-redis
    volumes:
      - defectdojo-redis:/data
    networks:
      - security-network
    restart: unless-stopped

  # Grafana Security Dashboard
  grafana-security:
    image: grafana/grafana:latest
    container_name: grafana-security
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    ports:
      - "3001:3000"
    volumes:
      - grafana-security:/var/lib/grafana
      - ./security/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - security-network
    restart: unless-stopped

  # Prometheus for Security Metrics
  prometheus-security:
    image: prom/prometheus:latest
    container_name: prometheus-security
    ports:
      - "9091:9090"
    volumes:
      - ./security/configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-security:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - security-network
    restart: unless-stopped

volumes:
  trivy-cache:
  clair-db:
  harbor-data:
  harbor-db:
  harbor-redis:
  defectdojo-media:
  defectdojo-db:
  defectdojo-redis:
  grafana-security:
  prometheus-security:

networks:
  security-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
