# ========================================================================
# GameForge Production Dockerfile - Enhanced Multi-stage Build
# Phase 2: CPU/GPU Variants with Advanced Security Hardening
# ========================================================================

# Build arguments for flexibility
ARG BUILD_DATE
ARG VCS_REF
ARG BUILD_VERSION
ARG VARIANT=gpu
ARG PYTHON_VERSION=3.10
ARG DEBIAN_FRONTEND=noninteractive

# Base image selection based on variant
# Updated to use working NVIDIA NGC Registry images
ARG GPU_BASE_IMAGE=nvcr.io/nvidia/pytorch:23.12-py3
ARG CPU_BASE_IMAGE=ubuntu:22.04

# Dynamic base image selection
FROM ${GPU_BASE_IMAGE} AS base-gpu
FROM ${CPU_BASE_IMAGE} AS base-cpu
FROM base-${VARIANT} AS base-selected

# ========================================================================
# Stage 1: System Foundation with Security Hardening
# ========================================================================
FROM base-selected AS system-foundation

# Metadata
LABEL maintainer="GameForge Team"
LABEL version="${BUILD_VERSION}"
LABEL vcs-ref="${VCS_REF}"
LABEL build-date="${BUILD_DATE}"
LABEL variant="${VARIANT}"
LABEL description="GameForge AI Production Container - ${VARIANT} variant"

# Security: Update package lists and install security updates
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        # Essential security tools
        ca-certificates \
        curl \
        gnupg \
        # Python build essentials (minimal)
        python3.10 \
        python3.10-dev \
        python3.10-venv \
        python3-pip \
        # Minimal build tools
        build-essential \
        pkg-config \
        # Git for version control
        git && \
    # Security: Remove package lists and clean cache
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    # Security: Create non-root user early
    groupadd --gid 1001 gameforge && \
    useradd --uid 1001 --gid gameforge --shell /bin/bash --create-home gameforge && \
    # Security: Set proper Python alternatives
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1 && \
    update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

# ========================================================================
# Stage 2: Build Dependencies (Temporary)
# ========================================================================
FROM system-foundation AS build-deps

# Install additional build dependencies (will be discarded)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        # Additional build tools for compilation
        gcc \
        g++ \
        make \
        cmake \
        libc6-dev \
        # Development headers
        python3.10-dev \
        libffi-dev \
        libssl-dev && \
    # Clean immediately to reduce layer size
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# ========================================================================
# Stage 3: Python Environment Builder
# ========================================================================
FROM build-deps AS python-builder

# Switch to non-root for virtual environment creation
USER gameforge
WORKDIR /home/gameforge

# Create optimized virtual environment
RUN python3 -m venv /home/gameforge/venv && \
    # Activate virtual environment
    . /home/gameforge/venv/bin/activate && \
    # Upgrade pip with security considerations
    pip install --no-cache-dir --upgrade \
        pip==23.3.1 \
        setuptools==68.2.2 \
        wheel==0.41.2

# Copy requirements with proper ownership
COPY --chown=gameforge:gameforge requirements.txt requirements-production.txt requirements-locked-demo.txt* ./

# Install Python dependencies with optimizations
RUN . /home/gameforge/venv/bin/activate && \
    # Use locked requirements if available, fallback to standard
    if [ -f requirements-locked-demo.txt ]; then \
        echo "Installing from locked requirements..." && \
        pip install --no-cache-dir --compile --no-deps -r requirements-locked-demo.txt; \
    else \
        echo "Installing from standard requirements..." && \
        pip install --no-cache-dir --compile -r requirements.txt && \
        if [ -f requirements-production.txt ]; then \
            pip install --no-cache-dir --compile -r requirements-production.txt; \
        fi; \
    fi && \
    # Security: Validate installation
    pip check && \
    # Optimization: Compile bytecode
    python -m compileall /home/gameforge/venv/lib/python*/site-packages && \
    # Security: Remove pip cache and temporary files
    pip cache purge && \
    find /home/gameforge/venv -type d -name __pycache__ -exec rm -rf {} + || true && \
    find /home/gameforge/venv -name "*.pyc" -delete

# ========================================================================
# Stage 4: Application Builder
# ========================================================================
FROM python-builder AS app-builder

WORKDIR /home/gameforge/build

# Copy application source with proper ownership
COPY --chown=gameforge:gameforge . .

# Compile application bytecode and optimize
RUN . /home/gameforge/venv/bin/activate && \
    # Compile all Python files to bytecode
    python -m compileall -b -q . && \
    # Security: Remove source files, keep only bytecode
    find . -name "*.py" -not -path "./scripts/*" -not -name "entrypoint.py" -delete && \
    # Clean up unnecessary files
    find . -name "*.md" -delete && \
    find . -name "*.txt" -not -name "requirements*.txt" -delete && \
    find . -name ".git*" -delete && \
    find . -name "*.log" -delete && \
    find . -name "tests" -type d -exec rm -rf {} + || true && \
    find . -name "test_*" -delete && \
    # Keep essential files for runtime
    find . -name "__pycache__" -exec rm -rf {} + || true

# ========================================================================
# Stage 5: Production Runtime (Final)
# ========================================================================
FROM system-foundation AS production

# Production metadata
ENV GAMEFORGE_ENV=production
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Runtime configuration
ENV LOG_LEVEL=info
ENV WORKERS=4
ENV MAX_WORKERS=8
ENV WORKER_TIMEOUT=300
ENV KEEPALIVE=2
ENV MAX_REQUESTS=1000
ENV MAX_REQUESTS_JITTER=100

# GPU optimization (no-op for CPU variant)
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
ENV CUDA_LAUNCH_BLOCKING=0

# Security environment
ENV HOME=/home/gameforge
ENV PATH="/home/gameforge/venv/bin:$PATH"
ENV USER=gameforge

# Runtime dependencies only (minimal)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        # Essential runtime libraries only
        ca-certificates \
        curl \
        # Keep minimal Python runtime
        python3.10 \
        python3-distutils \
        # Essential for health checks
        procps && \
    # Security: Final cleanup
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /root/.cache

# Security: Create application structure with proper permissions
RUN mkdir -p /app/logs /app/cache /app/assets /app/generated_assets /app/models_cache /app/tmp && \
    chown -R gameforge:gameforge /app && \
    chmod -R 755 /app && \
    chmod -R 700 /app/logs /app/cache /app/tmp && \
    # Security: Make system directories read-only where possible
    chmod 755 /home/gameforge

# Copy optimized Python environment
COPY --from=python-builder --chown=gameforge:gameforge /home/gameforge/venv /home/gameforge/venv

# Copy compiled application
COPY --from=app-builder --chown=gameforge:gameforge /home/gameforge/build /app

# Create secure entrypoint script
RUN echo '#!/bin/bash' > /app/entrypoint.sh && \
    echo 'set -euo pipefail' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo 'echo "=== GameForge Production Container Startup ==="' >> /app/entrypoint.sh && \
    echo 'echo "User: $(whoami) (UID: $(id -u), GID: $(id -g))"' >> /app/entrypoint.sh && \
    echo 'echo "Environment: ${GAMEFORGE_ENV}"' >> /app/entrypoint.sh && \
    echo 'echo "Variant: ${VARIANT:-unknown}"' >> /app/entrypoint.sh && \
    echo 'echo "Python Path: ${PYTHONPATH}"' >> /app/entrypoint.sh && \
    echo 'echo "Workers: ${WORKERS}"' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo '# Security: Validate running as non-root' >> /app/entrypoint.sh && \
    echo 'if [ "$(id -u)" -eq 0 ]; then' >> /app/entrypoint.sh && \
    echo '    echo "ERROR: Container is running as root!"' >> /app/entrypoint.sh && \
    echo '    exit 1' >> /app/entrypoint.sh && \
    echo 'fi' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo '# Validate environment' >> /app/entrypoint.sh && \
    echo 'if [ "${GAMEFORGE_ENV}" != "production" ]; then' >> /app/entrypoint.sh && \
    echo '    echo "ERROR: Not in production environment!"' >> /app/entrypoint.sh && \
    echo '    exit 1' >> /app/entrypoint.sh && \
    echo 'fi' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo '# Check GPU availability (only for GPU variant)' >> /app/entrypoint.sh && \
    echo 'if [ "${VARIANT}" = "gpu" ]; then' >> /app/entrypoint.sh && \
    echo '    echo "GPU Status:"' >> /app/entrypoint.sh && \
    echo '    if command -v nvidia-smi >/dev/null 2>&1; then' >> /app/entrypoint.sh && \
    echo '        nvidia-smi --query-gpu=name,memory.total,memory.used --format=csv,noheader || echo "GPU check failed"' >> /app/entrypoint.sh && \
    echo '    else' >> /app/entrypoint.sh && \
    echo '        echo "nvidia-smi not available (expected for CPU variant)"' >> /app/entrypoint.sh && \
    echo '    fi' >> /app/entrypoint.sh && \
    echo 'fi' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo '# Validate critical directories' >> /app/entrypoint.sh && \
    echo 'for dir in logs cache generated_assets models_cache tmp; do' >> /app/entrypoint.sh && \
    echo '    if [ ! -w "/app/$dir" ]; then' >> /app/entrypoint.sh && \
    echo '        echo "ERROR: Directory /app/$dir is not writable"' >> /app/entrypoint.sh && \
    echo '        exit 1' >> /app/entrypoint.sh && \
    echo '    fi' >> /app/entrypoint.sh && \
    echo 'done' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo '# Security: Validate Python environment' >> /app/entrypoint.sh && \
    echo 'python3 -c "import sys; print(f'\''Python {sys.version}'\''); import gameforge_production_server" || {' >> /app/entrypoint.sh && \
    echo '    echo "ERROR: Application import failed"' >> /app/entrypoint.sh && \
    echo '    exit 1' >> /app/entrypoint.sh && \
    echo '}' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo 'echo "=== Starting Application ==="' >> /app/entrypoint.sh && \
    echo 'exec "$@"' >> /app/entrypoint.sh

# Set proper permissions
RUN chmod +x /app/entrypoint.sh && \
    chown gameforge:gameforge /app/entrypoint.sh

# Security: Switch to non-root user
USER gameforge
WORKDIR /app

# Health check with comprehensive validation
HEALTHCHECK --interval=30s --timeout=15s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Security: Expose only necessary port
EXPOSE 8080

# Security: Use array form for better signal handling
ENTRYPOINT ["/app/entrypoint.sh"]

# Production command with optimized settings
CMD ["gunicorn", \
     "--bind", "0.0.0.0:8080", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--worker-timeout", "300", \
     "--keepalive", "2", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--preload", \
     "--user", "gameforge", \
     "--group", "gameforge", \
     "--access-logfile", "/app/logs/access.log", \
     "--error-logfile", "/app/logs/error.log", \
     "--log-level", "info", \
     "--capture-output", \
     "gameforge_production_server:app"]

# Security metadata
LABEL security.scan="required"
LABEL security.non-root="true"
LABEL security.read-only="partial"
LABEL maintainer.security="gameforge-security@example.com"
