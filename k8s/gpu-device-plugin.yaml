# NVIDIA GPU Device Plugin for Kubernetes
# This DaemonSet ensures that GPU resources are properly exposed to the cluster
# and that AI workloads can request and use GPU resources effectively.

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nvidia-device-plugin-daemonset
  namespace: kube-system
  labels:
    app: nvidia-device-plugin
spec:
  selector:
    matchLabels:
      name: nvidia-device-plugin-ds
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: nvidia-device-plugin-ds
    spec:
      tolerations:
      # Allow scheduling on master nodes (for single-node clusters)
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      # GPU node tolerations
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      - key: accelerator
        operator: Equal
        value: nvidia
        effect: NoSchedule
      
      # Ensure plugin only runs on GPU nodes
      nodeSelector:
        accelerator: nvidia
      
      priorityClassName: system-node-critical
      
      containers:
      - image: nvcr.io/nvidia/k8s-device-plugin:v0.14.1
        name: nvidia-device-plugin-ctr
        args: ["--fail-on-init-error=false"]
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        volumeMounts:
        - name: device-plugin
          mountPath: /var/lib/kubelet/device-plugins
        - name: proc
          mountPath: /host/proc
          readOnly: true
        env:
        - name: FAIL_ON_INIT_ERROR
          value: "false"
        - name: NVIDIA_MIG_MONITOR_DEVICES
          value: all
        - name: NVIDIA_DRIVER_CAPABILITIES
          value: "compute,utility"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
      volumes:
      - name: device-plugin
        hostPath:
          path: /var/lib/kubelet/device-plugins
      - name: proc
        hostPath:
          path: /proc
      terminationGracePeriodSeconds: 30

---
# Node Feature Discovery to automatically label GPU nodes
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nfd-worker
  namespace: kube-system
  labels:
    app: node-feature-discovery
    component: worker
spec:
  selector:
    matchLabels:
      app: node-feature-discovery
      component: worker
  template:
    metadata:
      labels:
        app: node-feature-discovery
        component: worker
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: nfd-worker
        image: k8s.gcr.io/nfd/node-feature-discovery:v0.14.2
        args:
        - "-server=nfd-master:8080"
        volumeMounts:
        - name: host-boot
          mountPath: "/host-boot"
          readOnly: true
        - name: host-os-release
          mountPath: "/host-etc/os-release"
          readOnly: true
        - name: host-sys
          mountPath: "/host-sys"
          readOnly: true
        - name: host-usr-lib
          mountPath: "/host-usr/lib"
          readOnly: true
        - name: host-lib
          mountPath: "/host-lib"
          readOnly: true
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
      volumes:
      - name: host-boot
        hostPath:
          path: "/boot"
      - name: host-os-release
        hostPath:
          path: "/etc/os-release"
      - name: host-sys
        hostPath:
          path: "/sys"
      - name: host-usr-lib
        hostPath:
          path: "/usr/lib"
      - name: host-lib
        hostPath:
          path: "/lib"

---
# NFD Master deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nfd-master
  namespace: kube-system
  labels:
    app: node-feature-discovery
    component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app: node-feature-discovery
      component: master
  template:
    metadata:
      labels:
        app: node-feature-discovery
        component: master
    spec:
      containers:
      - name: nfd-master
        image: k8s.gcr.io/nfd/node-feature-discovery:v0.14.2
        ports:
        - containerPort: 8080
          name: grpc
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi

---
# Service for NFD Master
apiVersion: v1
kind: Service
metadata:
  name: nfd-master
  namespace: kube-system
  labels:
    app: node-feature-discovery
    component: master
spec:
  selector:
    app: node-feature-discovery
    component: master
  ports:
  - port: 8080
    targetPort: 8080
    name: grpc
  type: ClusterIP
